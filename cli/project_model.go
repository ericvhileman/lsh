// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for Project

// register flags to command
func registerModelProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelProjectAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The project ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveProjectAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveProjectAttributesFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes ProjectAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.ProjectAttributes{}
	}

	err, attributesAdded := retrieveModelProjectAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveProjectIDFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ProjectAttributes

// register flags to command
func registerModelProjectAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectAttributesBilling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesBillingMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesBillingType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesCost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesTeam(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesBilling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var billingFlagName string
	if cmdPrefix == "" {
		billingFlagName = "billing"
	} else {
		billingFlagName = fmt.Sprintf("%v.billing", cmdPrefix)
	}

	if err := registerModelProjectAttributesBillingFlags(depth+1, billingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesBillingMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingMethodDescription := `Enum: ["Normal","95th percentile"]. `

	var billingMethodFlagName string
	if cmdPrefix == "" {
		billingMethodFlagName = "billing_method"
	} else {
		billingMethodFlagName = fmt.Sprintf("%v.billing_method", cmdPrefix)
	}

	var billingMethodFlagDefault string

	_ = cmd.PersistentFlags().String(billingMethodFlagName, billingMethodFlagDefault, billingMethodDescription)

	if err := cmd.RegisterFlagCompletionFunc(billingMethodFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Normal","95th percentile"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesBillingType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingTypeDescription := `Enum: ["Yearly","Monthly","Hourly","Normal"]. `

	var billingTypeFlagName string
	if cmdPrefix == "" {
		billingTypeFlagName = "billing_type"
	} else {
		billingTypeFlagName = fmt.Sprintf("%v.billing_type", cmdPrefix)
	}

	var billingTypeFlagDefault string

	_ = cmd.PersistentFlags().String(billingTypeFlagName, billingTypeFlagDefault, billingTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(billingTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Yearly","Monthly","Hourly","Normal"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesCost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	costDescription := ``

	var costFlagName string
	if cmdPrefix == "" {
		costFlagName = "cost"
	} else {
		costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
	}

	var costFlagDefault string

	_ = cmd.PersistentFlags().String(costFlagName, costFlagDefault, costDescription)

	return nil
}

func registerProjectAttributesCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerProjectAttributesDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `The project description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerProjectAttributesEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentDescription := `Enum: ["Development","Staging","Production"]. `

	var environmentFlagName string
	if cmdPrefix == "" {
		environmentFlagName = "environment"
	} else {
		environmentFlagName = fmt.Sprintf("%v.environment", cmdPrefix)
	}

	var environmentFlagDefault string

	_ = cmd.PersistentFlags().String(environmentFlagName, environmentFlagDefault, environmentDescription)

	if err := cmd.RegisterFlagCompletionFunc(environmentFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Development","Staging","Production"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The project name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProjectAttributesSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := `A unique project identifier`

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

func registerProjectAttributesStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statsFlagName string
	if cmdPrefix == "" {
		statsFlagName = "stats"
	} else {
		statsFlagName = fmt.Sprintf("%v.stats", cmdPrefix)
	}

	if err := registerModelProjectAttributesStatsFlags(depth+1, statsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesTeam(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var teamFlagName string
	if cmdPrefix == "" {
		teamFlagName = "team"
	} else {
		teamFlagName = fmt.Sprintf("%v.team", cmdPrefix)
	}

	if err := registerModelTeamIncludeFlags(depth+1, teamFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := ``

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updated_at"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectAttributesFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, billingAdded := retrieveProjectAttributesBillingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded

	err, billingMethodAdded := retrieveProjectAttributesBillingMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingMethodAdded

	err, billingTypeAdded := retrieveProjectAttributesBillingTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingTypeAdded

	err, costAdded := retrieveProjectAttributesCostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || costAdded

	err, createdAtAdded := retrieveProjectAttributesCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, descriptionAdded := retrieveProjectAttributesDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentAdded := retrieveProjectAttributesEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentAdded

	err, nameAdded := retrieveProjectAttributesNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveProjectAttributesSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	err, statsAdded := retrieveProjectAttributesStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsAdded

	err, teamAdded := retrieveProjectAttributesTeamFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAdded

	err, updatedAtAdded := retrieveProjectAttributesUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	return nil, retAdded
}

func retrieveProjectAttributesBillingFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingFlagName := fmt.Sprintf("%v.billing", cmdPrefix)
	if cmd.Flags().Changed(billingFlagName) {
		// info: complex object billing ProjectAttributesBilling is retrieved outside this Changed() block
	}
	billingFlagValue := m.Billing
	if swag.IsZero(billingFlagValue) {
		billingFlagValue = &models.ProjectAttributesBilling{}
	}

	err, billingAdded := retrieveModelProjectAttributesBillingFlags(depth+1, billingFlagValue, billingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded
	if billingAdded {
		m.Billing = billingFlagValue
	}

	return nil, retAdded
}

func retrieveProjectAttributesBillingMethodFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingMethodFlagName := fmt.Sprintf("%v.billing_method", cmdPrefix)
	if cmd.Flags().Changed(billingMethodFlagName) {

		var billingMethodFlagName string
		if cmdPrefix == "" {
			billingMethodFlagName = "billing_method"
		} else {
			billingMethodFlagName = fmt.Sprintf("%v.billing_method", cmdPrefix)
		}

		billingMethodFlagValue, err := cmd.Flags().GetString(billingMethodFlagName)
		if err != nil {
			return err, false
		}
		m.BillingMethod = &billingMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesBillingTypeFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingTypeFlagName := fmt.Sprintf("%v.billing_type", cmdPrefix)
	if cmd.Flags().Changed(billingTypeFlagName) {

		var billingTypeFlagName string
		if cmdPrefix == "" {
			billingTypeFlagName = "billing_type"
		} else {
			billingTypeFlagName = fmt.Sprintf("%v.billing_type", cmdPrefix)
		}

		billingTypeFlagValue, err := cmd.Flags().GetString(billingTypeFlagName)
		if err != nil {
			return err, false
		}
		m.BillingType = &billingTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesCostFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	costFlagName := fmt.Sprintf("%v.cost", cmdPrefix)
	if cmd.Flags().Changed(costFlagName) {

		var costFlagName string
		if cmdPrefix == "" {
			costFlagName = "cost"
		} else {
			costFlagName = fmt.Sprintf("%v.cost", cmdPrefix)
		}

		costFlagValue, err := cmd.Flags().GetString(costFlagName)
		if err != nil {
			return err, false
		}
		m.Cost = &costFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesCreatedAtFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesDescriptionFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesEnvironmentFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentFlagName := fmt.Sprintf("%v.environment", cmdPrefix)
	if cmd.Flags().Changed(environmentFlagName) {

		var environmentFlagName string
		if cmdPrefix == "" {
			environmentFlagName = "environment"
		} else {
			environmentFlagName = fmt.Sprintf("%v.environment", cmdPrefix)
		}

		environmentFlagValue, err := cmd.Flags().GetString(environmentFlagName)
		if err != nil {
			return err, false
		}
		m.Environment = &environmentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesNameFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesSlugFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesStatsFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsFlagName := fmt.Sprintf("%v.stats", cmdPrefix)
	if cmd.Flags().Changed(statsFlagName) {
		// info: complex object stats ProjectAttributesStats is retrieved outside this Changed() block
	}
	statsFlagValue := m.Stats
	if swag.IsZero(statsFlagValue) {
		statsFlagValue = &models.ProjectAttributesStats{}
	}

	err, statsAdded := retrieveModelProjectAttributesStatsFlags(depth+1, statsFlagValue, statsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsAdded
	if statsAdded {
		m.Stats = statsFlagValue
	}

	return nil, retAdded
}

func retrieveProjectAttributesTeamFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	teamFlagName := fmt.Sprintf("%v.team", cmdPrefix)
	if cmd.Flags().Changed(teamFlagName) {
		// info: complex object team TeamInclude is retrieved outside this Changed() block
	}
	teamFlagValue := m.Team
	if swag.IsZero(teamFlagValue) {
		teamFlagValue = &models.TeamInclude{}
	}

	err, teamAdded := retrieveModelTeamIncludeFlags(depth+1, teamFlagValue, teamFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || teamAdded
	if teamAdded {
		m.Team = teamFlagValue
	}

	return nil, retAdded
}

func retrieveProjectAttributesUpdatedAtFlags(depth int, m *models.ProjectAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updated_at", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updated_at"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ProjectAttributesBilling

// register flags to command
func registerModelProjectAttributesBillingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectAttributesBillingMethod2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesBillingSubscriptionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesBillingType2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesBillingMethod2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	methodDescription := ``

	var methodFlagName string
	if cmdPrefix == "" {
		methodFlagName = "method"
	} else {
		methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
	}

	var methodFlagDefault string

	_ = cmd.PersistentFlags().String(methodFlagName, methodFlagDefault, methodDescription)

	return nil
}

func registerProjectAttributesBillingSubscriptionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subscriptionIdDescription := ``

	var subscriptionIdFlagName string
	if cmdPrefix == "" {
		subscriptionIdFlagName = "subscription_id"
	} else {
		subscriptionIdFlagName = fmt.Sprintf("%v.subscription_id", cmdPrefix)
	}

	var subscriptionIdFlagDefault string

	_ = cmd.PersistentFlags().String(subscriptionIdFlagName, subscriptionIdFlagDefault, subscriptionIdDescription)

	return nil
}

func registerProjectAttributesBillingType2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectAttributesBillingFlags(depth int, m *models.ProjectAttributesBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, methodAdded := retrieveProjectAttributesBillingMethodFlagsBilling(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, subscriptionIdAdded := retrieveProjectAttributesBillingSubscriptionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subscriptionIdAdded

	err, typeAdded := retrieveProjectAttributesBillingTypeFlagsBilling(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveProjectAttributesBillingMethodFlagsBilling(depth int, m *models.ProjectAttributesBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesBillingSubscriptionIDFlags(depth int, m *models.ProjectAttributesBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subscriptionIdFlagName := fmt.Sprintf("%v.subscription_id", cmdPrefix)
	if cmd.Flags().Changed(subscriptionIdFlagName) {

		var subscriptionIdFlagName string
		if cmdPrefix == "" {
			subscriptionIdFlagName = "subscription_id"
		} else {
			subscriptionIdFlagName = fmt.Sprintf("%v.subscription_id", cmdPrefix)
		}

		subscriptionIdFlagValue, err := cmd.Flags().GetString(subscriptionIdFlagName)
		if err != nil {
			return err, false
		}
		m.SubscriptionID = subscriptionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesBillingTypeFlagsBilling(depth int, m *models.ProjectAttributesBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ProjectAttributesStats

// register flags to command
func registerModelProjectAttributesStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectAttributesStatsIPAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesStatsPrefixes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesStatsServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectAttributesStatsVlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectAttributesStatsIPAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressesDescription := `The number of IP addresses assigned to the project`

	var ipAddressesFlagName string
	if cmdPrefix == "" {
		ipAddressesFlagName = "ip_addresses"
	} else {
		ipAddressesFlagName = fmt.Sprintf("%v.ip_addresses", cmdPrefix)
	}

	var ipAddressesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(ipAddressesFlagName, ipAddressesFlagDefault, ipAddressesDescription)

	return nil
}

func registerProjectAttributesStatsPrefixes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prefixesDescription := `The IP address prefixes in the project`

	var prefixesFlagName string
	if cmdPrefix == "" {
		prefixesFlagName = "prefixes"
	} else {
		prefixesFlagName = fmt.Sprintf("%v.prefixes", cmdPrefix)
	}

	var prefixesFlagDefault float64

	_ = cmd.PersistentFlags().Float64(prefixesFlagName, prefixesFlagDefault, prefixesDescription)

	return nil
}

func registerProjectAttributesStatsServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serversDescription := `The number of servers assigned to the project`

	var serversFlagName string
	if cmdPrefix == "" {
		serversFlagName = "servers"
	} else {
		serversFlagName = fmt.Sprintf("%v.servers", cmdPrefix)
	}

	var serversFlagDefault float64

	_ = cmd.PersistentFlags().Float64(serversFlagName, serversFlagDefault, serversDescription)

	return nil
}

func registerProjectAttributesStatsVlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlansDescription := `The number of VLANs assigned to the project`

	var vlansFlagName string
	if cmdPrefix == "" {
		vlansFlagName = "vlans"
	} else {
		vlansFlagName = fmt.Sprintf("%v.vlans", cmdPrefix)
	}

	var vlansFlagDefault float64

	_ = cmd.PersistentFlags().Float64(vlansFlagName, vlansFlagDefault, vlansDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectAttributesStatsFlags(depth int, m *models.ProjectAttributesStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ipAddressesAdded := retrieveProjectAttributesStatsIPAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressesAdded

	err, prefixesAdded := retrieveProjectAttributesStatsPrefixesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prefixesAdded

	err, serversAdded := retrieveProjectAttributesStatsServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serversAdded

	err, vlansAdded := retrieveProjectAttributesStatsVlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlansAdded

	return nil, retAdded
}

func retrieveProjectAttributesStatsIPAddressesFlags(depth int, m *models.ProjectAttributesStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddressesFlagName := fmt.Sprintf("%v.ip_addresses", cmdPrefix)
	if cmd.Flags().Changed(ipAddressesFlagName) {

		var ipAddressesFlagName string
		if cmdPrefix == "" {
			ipAddressesFlagName = "ip_addresses"
		} else {
			ipAddressesFlagName = fmt.Sprintf("%v.ip_addresses", cmdPrefix)
		}

		ipAddressesFlagValue, err := cmd.Flags().GetFloat64(ipAddressesFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddresses = ipAddressesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesStatsPrefixesFlags(depth int, m *models.ProjectAttributesStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prefixesFlagName := fmt.Sprintf("%v.prefixes", cmdPrefix)
	if cmd.Flags().Changed(prefixesFlagName) {

		var prefixesFlagName string
		if cmdPrefix == "" {
			prefixesFlagName = "prefixes"
		} else {
			prefixesFlagName = fmt.Sprintf("%v.prefixes", cmdPrefix)
		}

		prefixesFlagValue, err := cmd.Flags().GetFloat64(prefixesFlagName)
		if err != nil {
			return err, false
		}
		m.Prefixes = prefixesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesStatsServersFlags(depth int, m *models.ProjectAttributesStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serversFlagName := fmt.Sprintf("%v.servers", cmdPrefix)
	if cmd.Flags().Changed(serversFlagName) {

		var serversFlagName string
		if cmdPrefix == "" {
			serversFlagName = "servers"
		} else {
			serversFlagName = fmt.Sprintf("%v.servers", cmdPrefix)
		}

		serversFlagValue, err := cmd.Flags().GetFloat64(serversFlagName)
		if err != nil {
			return err, false
		}
		m.Servers = serversFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectAttributesStatsVlansFlags(depth int, m *models.ProjectAttributesStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlansFlagName := fmt.Sprintf("%v.vlans", cmdPrefix)
	if cmd.Flags().Changed(vlansFlagName) {

		var vlansFlagName string
		if cmdPrefix == "" {
			vlansFlagName = "vlans"
		} else {
			vlansFlagName = fmt.Sprintf("%v.vlans", cmdPrefix)
		}

		vlansFlagValue, err := cmd.Flags().GetFloat64(vlansFlagName)
		if err != nil {
			return err, false
		}
		m.Vlans = vlansFlagValue

		retAdded = true
	}

	return nil, retAdded
}
