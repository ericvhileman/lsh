// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/lsh/client/servers"
	"github.com/latitudesh/lsh/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServersUpdateServerCmd returns a cmd to handle operation updateServer
func makeOperationServersUpdateServerCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "update",
		Short: `Update server information.`,
		RunE:  runOperationServersUpdateServer,
	}

	if err := registerOperationServersUpdateServerParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServersUpdateServer uses cmd flags to call endpoint api
func runOperationServersUpdateServer(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := servers.NewUpdateServerParams()
	if err, _ := retrieveOperationServersUpdateServerBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationServersUpdateServerServerIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}

	result, err := appCli.Servers.UpdateServer(params, nil)
	if err != nil {
		utils.PrintError(err)
		return nil
	}

	msgStr, err := parseOperationServersUpdateServerResult(result)
	if err != nil {
		return err
	}
	if !debug {

		utils.PrintResult(msgStr)
	}
	return nil
}

// registerOperationServersUpdateServerParamFlags registers all flags needed to fill params
func registerOperationServersUpdateServerParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServersUpdateServerBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationServersUpdateServerServerIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServersUpdateServerBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. ")

	// add flags for body
	if err := registerModelUpdateServerBodyFlags(0, "", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationServersUpdateServerServerIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	serverIdDescription := `The Server Id (Required).`
	
	var serverIdFlagName string
	if cmdPrefix == "" {
	serverIdFlagName = "id"
	} else {
	serverIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)
	cmd.MarkPersistentFlagRequired(serverIdFlagName)

	return nil
}

func retrieveOperationServersUpdateServerBodyFlag(m *servers.UpdateServerParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := servers.UpdateServerBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in UpdateServerBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = servers.UpdateServerBody{}
	}
	err, added := retrieveModelUpdateServerBodyFlags(0, &bodyValueModel, "", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationServersUpdateServerServerIDFlag(m *servers.UpdateServerParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "id"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue
		m.Body.ID = m.ServerID

	}
	return nil, retAdded
}

// parseOperationServersUpdateServerResult parses request result and return the string content
func parseOperationServersUpdateServerResult(resp0 *servers.UpdateServerOK) (string, error) {
	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelUpdateServerBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdateServerBodyAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerBodyAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName = "attributes"

	if err := registerModelUpdateServerParamsBodyAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdateServerBodyFlags(depth int, m *servers.UpdateServerBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveUpdateServerBodyAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	return nil, retAdded
}

func retrieveUpdateServerBodyAttributesFlags(depth int, m *servers.UpdateServerBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%vattributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes UpdateServerParamsBodyAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &servers.UpdateServerParamsBodyAttributes{}
	}

	attributesFlagName = ""
	err, attributesAdded := retrieveModelUpdateServerParamsBodyAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

// register flags to command
func registerModelUpdateServerParamsBodyAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdateServerParamsBodyAttributesBilling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateServerParamsBodyAttributesHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateServerParamsBodyAttributesBilling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingDescription := ``

	var billingFlagName = "billing"

	var billingFlagDefault string

	_ = cmd.PersistentFlags().String(billingFlagName, billingFlagDefault, billingDescription)

	return nil
}

func registerUpdateServerParamsBodyAttributesHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName = "hostname"

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdateServerParamsBodyAttributesFlags(depth int, m *servers.UpdateServerParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, billingAdded := retrieveUpdateServerParamsBodyAttributesBillingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded

	err, hostnameAdded := retrieveUpdateServerParamsBodyAttributesHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	return nil, retAdded
}

func retrieveUpdateServerParamsBodyAttributesBillingFlags(depth int, m *servers.UpdateServerParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	var billingFlagName = "billing"
	if cmd.Flags().Changed(billingFlagName) {

		billingFlagValue, err := cmd.Flags().GetString(billingFlagName)
		if err != nil {
			return err, false
		}
		m.Billing = billingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateServerParamsBodyAttributesHostnameFlags(depth int, m *servers.UpdateServerParamsBodyAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	var hostnameFlagName = "hostname"
	if cmd.Flags().Changed(hostnameFlagName) {

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
