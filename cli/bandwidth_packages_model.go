// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for BandwidthPackages

// register flags to command
func registerModelBandwidthPackagesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBandwidthPackagesAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBandwidthPackagesAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelBandwidthPackagesAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBandwidthPackagesType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["bandwidth_packages"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["bandwidth_packages"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBandwidthPackagesFlags(depth int, m *models.BandwidthPackages, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveBandwidthPackagesAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, typeAdded := retrieveBandwidthPackagesTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesFlags(depth int, m *models.BandwidthPackages, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes BandwidthPackagesAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.BandwidthPackagesAttributes{}
	}

	err, attributesAdded := retrieveModelBandwidthPackagesAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesTypeFlags(depth int, m *models.BandwidthPackages, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BandwidthPackagesAttributes

// register flags to command
func registerModelBandwidthPackagesAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBandwidthPackagesAttributesPackages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBandwidthPackagesAttributesPackages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: packages []*BandwidthPackagesAttributesPackagesItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerBandwidthPackagesAttributesProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	if err := registerModelBandwidthPackagesAttributesProjectFlags(depth+1, projectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBandwidthPackagesAttributesFlags(depth int, m *models.BandwidthPackagesAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, packagesAdded := retrieveBandwidthPackagesAttributesPackagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || packagesAdded

	err, projectAdded := retrieveBandwidthPackagesAttributesProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesFlags(depth int, m *models.BandwidthPackagesAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	packagesFlagName := fmt.Sprintf("%v.packages", cmdPrefix)
	if cmd.Flags().Changed(packagesFlagName) {
		// warning: packages array type []*BandwidthPackagesAttributesPackagesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesProjectFlags(depth int, m *models.BandwidthPackagesAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectFlagName := fmt.Sprintf("%v.project", cmdPrefix)
	if cmd.Flags().Changed(projectFlagName) {
		// info: complex object project BandwidthPackagesAttributesProject is retrieved outside this Changed() block
	}
	projectFlagValue := m.Project
	if swag.IsZero(projectFlagValue) {
		projectFlagValue = &models.BandwidthPackagesAttributesProject{}
	}

	err, projectAdded := retrieveModelBandwidthPackagesAttributesProjectFlags(depth+1, projectFlagValue, projectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded
	if projectAdded {
		m.Project = projectFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for BandwidthPackagesAttributesPackagesItems0

// register flags to command
func registerModelBandwidthPackagesAttributesPackagesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBandwidthPackagesAttributesPackagesItems0Contracted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesPackagesItems0Currency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesPackagesItems0RegionSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesPackagesItems0TotalPrice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesPackagesItems0UnitPrice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBandwidthPackagesAttributesPackagesItems0Contracted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contractedDescription := ``

	var contractedFlagName string
	if cmdPrefix == "" {
		contractedFlagName = "contracted"
	} else {
		contractedFlagName = fmt.Sprintf("%v.contracted", cmdPrefix)
	}

	var contractedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(contractedFlagName, contractedFlagDefault, contractedDescription)

	return nil
}

func registerBandwidthPackagesAttributesPackagesItems0Currency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currencyDescription := ``

	var currencyFlagName string
	if cmdPrefix == "" {
		currencyFlagName = "currency"
	} else {
		currencyFlagName = fmt.Sprintf("%v.currency", cmdPrefix)
	}

	var currencyFlagDefault string

	_ = cmd.PersistentFlags().String(currencyFlagName, currencyFlagDefault, currencyDescription)

	return nil
}

func registerBandwidthPackagesAttributesPackagesItems0RegionSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	regionSlugDescription := ``

	var regionSlugFlagName string
	if cmdPrefix == "" {
		regionSlugFlagName = "region_slug"
	} else {
		regionSlugFlagName = fmt.Sprintf("%v.region_slug", cmdPrefix)
	}

	var regionSlugFlagDefault string

	_ = cmd.PersistentFlags().String(regionSlugFlagName, regionSlugFlagDefault, regionSlugDescription)

	return nil
}

func registerBandwidthPackagesAttributesPackagesItems0TotalPrice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalPriceDescription := ``

	var totalPriceFlagName string
	if cmdPrefix == "" {
		totalPriceFlagName = "total_price"
	} else {
		totalPriceFlagName = fmt.Sprintf("%v.total_price", cmdPrefix)
	}

	var totalPriceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(totalPriceFlagName, totalPriceFlagDefault, totalPriceDescription)

	return nil
}

func registerBandwidthPackagesAttributesPackagesItems0UnitPrice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unitPriceDescription := ``

	var unitPriceFlagName string
	if cmdPrefix == "" {
		unitPriceFlagName = "unit_price"
	} else {
		unitPriceFlagName = fmt.Sprintf("%v.unit_price", cmdPrefix)
	}

	var unitPriceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(unitPriceFlagName, unitPriceFlagDefault, unitPriceDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBandwidthPackagesAttributesPackagesItems0Flags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, contractedAdded := retrieveBandwidthPackagesAttributesPackagesItems0ContractedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contractedAdded

	err, currencyAdded := retrieveBandwidthPackagesAttributesPackagesItems0CurrencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currencyAdded

	err, regionSlugAdded := retrieveBandwidthPackagesAttributesPackagesItems0RegionSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionSlugAdded

	err, totalPriceAdded := retrieveBandwidthPackagesAttributesPackagesItems0TotalPriceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalPriceAdded

	err, unitPriceAdded := retrieveBandwidthPackagesAttributesPackagesItems0UnitPriceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unitPriceAdded

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesItems0ContractedFlags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contractedFlagName := fmt.Sprintf("%v.contracted", cmdPrefix)
	if cmd.Flags().Changed(contractedFlagName) {

		var contractedFlagName string
		if cmdPrefix == "" {
			contractedFlagName = "contracted"
		} else {
			contractedFlagName = fmt.Sprintf("%v.contracted", cmdPrefix)
		}

		contractedFlagValue, err := cmd.Flags().GetInt64(contractedFlagName)
		if err != nil {
			return err, false
		}
		m.Contracted = contractedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesItems0CurrencyFlags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currencyFlagName := fmt.Sprintf("%v.currency", cmdPrefix)
	if cmd.Flags().Changed(currencyFlagName) {

		var currencyFlagName string
		if cmdPrefix == "" {
			currencyFlagName = "currency"
		} else {
			currencyFlagName = fmt.Sprintf("%v.currency", cmdPrefix)
		}

		currencyFlagValue, err := cmd.Flags().GetString(currencyFlagName)
		if err != nil {
			return err, false
		}
		m.Currency = currencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesItems0RegionSlugFlags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionSlugFlagName := fmt.Sprintf("%v.region_slug", cmdPrefix)
	if cmd.Flags().Changed(regionSlugFlagName) {

		var regionSlugFlagName string
		if cmdPrefix == "" {
			regionSlugFlagName = "region_slug"
		} else {
			regionSlugFlagName = fmt.Sprintf("%v.region_slug", cmdPrefix)
		}

		regionSlugFlagValue, err := cmd.Flags().GetString(regionSlugFlagName)
		if err != nil {
			return err, false
		}
		m.RegionSlug = regionSlugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesItems0TotalPriceFlags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalPriceFlagName := fmt.Sprintf("%v.total_price", cmdPrefix)
	if cmd.Flags().Changed(totalPriceFlagName) {

		var totalPriceFlagName string
		if cmdPrefix == "" {
			totalPriceFlagName = "total_price"
		} else {
			totalPriceFlagName = fmt.Sprintf("%v.total_price", cmdPrefix)
		}

		totalPriceFlagValue, err := cmd.Flags().GetFloat64(totalPriceFlagName)
		if err != nil {
			return err, false
		}
		m.TotalPrice = totalPriceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesPackagesItems0UnitPriceFlags(depth int, m *models.BandwidthPackagesAttributesPackagesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unitPriceFlagName := fmt.Sprintf("%v.unit_price", cmdPrefix)
	if cmd.Flags().Changed(unitPriceFlagName) {

		var unitPriceFlagName string
		if cmdPrefix == "" {
			unitPriceFlagName = "unit_price"
		} else {
			unitPriceFlagName = fmt.Sprintf("%v.unit_price", cmdPrefix)
		}

		unitPriceFlagValue, err := cmd.Flags().GetFloat64(unitPriceFlagName)
		if err != nil {
			return err, false
		}
		m.UnitPrice = unitPriceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BandwidthPackagesAttributesProject

// register flags to command
func registerModelBandwidthPackagesAttributesProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBandwidthPackagesAttributesProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBandwidthPackagesAttributesProjectSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBandwidthPackagesAttributesProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBandwidthPackagesAttributesProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBandwidthPackagesAttributesProjectSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBandwidthPackagesAttributesProjectFlags(depth int, m *models.BandwidthPackagesAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveBandwidthPackagesAttributesProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveBandwidthPackagesAttributesProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveBandwidthPackagesAttributesProjectSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesProjectIDFlags(depth int, m *models.BandwidthPackagesAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesProjectNameFlags(depth int, m *models.BandwidthPackagesAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBandwidthPackagesAttributesProjectSlugFlags(depth int, m *models.BandwidthPackagesAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
