// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for RegionResourceData

// register flags to command
func registerModelRegionResourceDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegionResourceDataCity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegionResourceDataCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegionResourceDataSite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegionResourceDataCity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cityDescription := ``

	var cityFlagName string
	if cmdPrefix == "" {
		cityFlagName = "city"
	} else {
		cityFlagName = fmt.Sprintf("%v.city", cmdPrefix)
	}

	var cityFlagDefault string

	_ = cmd.PersistentFlags().String(cityFlagName, cityFlagDefault, cityDescription)

	return nil
}

func registerRegionResourceDataCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryDescription := ``

	var countryFlagName string
	if cmdPrefix == "" {
		countryFlagName = "country"
	} else {
		countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var countryFlagDefault string

	_ = cmd.PersistentFlags().String(countryFlagName, countryFlagDefault, countryDescription)

	return nil
}

func registerRegionResourceDataSite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var siteFlagName string
	if cmdPrefix == "" {
		siteFlagName = "site"
	} else {
		siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
	}

	if err := registerModelRegionResourceDataSiteFlags(depth+1, siteFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegionResourceDataFlags(depth int, m *models.RegionResourceData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cityAdded := retrieveRegionResourceDataCityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cityAdded

	err, countryAdded := retrieveRegionResourceDataCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryAdded

	err, siteAdded := retrieveRegionResourceDataSiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded

	return nil, retAdded
}

func retrieveRegionResourceDataCityFlags(depth int, m *models.RegionResourceData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cityFlagName := fmt.Sprintf("%v.city", cmdPrefix)
	if cmd.Flags().Changed(cityFlagName) {

		var cityFlagName string
		if cmdPrefix == "" {
			cityFlagName = "city"
		} else {
			cityFlagName = fmt.Sprintf("%v.city", cmdPrefix)
		}

		cityFlagValue, err := cmd.Flags().GetString(cityFlagName)
		if err != nil {
			return err, false
		}
		m.City = cityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegionResourceDataCountryFlags(depth int, m *models.RegionResourceData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryFlagName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(countryFlagName) {

		var countryFlagName string
		if cmdPrefix == "" {
			countryFlagName = "country"
		} else {
			countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		countryFlagValue, err := cmd.Flags().GetString(countryFlagName)
		if err != nil {
			return err, false
		}
		m.Country = countryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegionResourceDataSiteFlags(depth int, m *models.RegionResourceData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteFlagName := fmt.Sprintf("%v.site", cmdPrefix)
	if cmd.Flags().Changed(siteFlagName) {
		// info: complex object site RegionResourceDataSite is retrieved outside this Changed() block
	}
	siteFlagValue := m.Site
	if swag.IsZero(siteFlagValue) {
		siteFlagValue = &models.RegionResourceDataSite{}
	}

	err, siteAdded := retrieveModelRegionResourceDataSiteFlags(depth+1, siteFlagValue, siteFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded
	if siteAdded {
		m.Site = siteFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for RegionResourceDataSite

// register flags to command
func registerModelRegionResourceDataSiteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegionResourceDataSiteFacility(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegionResourceDataSiteID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegionResourceDataSiteName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegionResourceDataSiteSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegionResourceDataSiteFacility(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	facilityDescription := ``

	var facilityFlagName string
	if cmdPrefix == "" {
		facilityFlagName = "facility"
	} else {
		facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
	}

	var facilityFlagDefault string

	_ = cmd.PersistentFlags().String(facilityFlagName, facilityFlagDefault, facilityDescription)

	return nil
}

func registerRegionResourceDataSiteID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRegionResourceDataSiteName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerRegionResourceDataSiteSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegionResourceDataSiteFlags(depth int, m *models.RegionResourceDataSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, facilityAdded := retrieveRegionResourceDataSiteFacilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || facilityAdded

	err, idAdded := retrieveRegionResourceDataSiteIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveRegionResourceDataSiteNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveRegionResourceDataSiteSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveRegionResourceDataSiteFacilityFlags(depth int, m *models.RegionResourceDataSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	facilityFlagName := fmt.Sprintf("%v.facility", cmdPrefix)
	if cmd.Flags().Changed(facilityFlagName) {

		var facilityFlagName string
		if cmdPrefix == "" {
			facilityFlagName = "facility"
		} else {
			facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
		}

		facilityFlagValue, err := cmd.Flags().GetString(facilityFlagName)
		if err != nil {
			return err, false
		}
		m.Facility = facilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegionResourceDataSiteIDFlags(depth int, m *models.RegionResourceDataSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegionResourceDataSiteNameFlags(depth int, m *models.RegionResourceDataSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegionResourceDataSiteSlugFlags(depth int, m *models.RegionResourceDataSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
