// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for BillingUsage

// register flags to command
func registerModelBillingUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelBillingUsageDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageFlags(depth int, m *models.BillingUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveBillingUsageDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveBillingUsageDataFlags(depth int, m *models.BillingUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data BillingUsageData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &models.BillingUsageData{}
	}

	err, dataAdded := retrieveModelBillingUsageDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageData

// register flags to command
func registerModelBillingUsageDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelBillingUsageDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataFlags(depth int, m *models.BillingUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveBillingUsageDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveBillingUsageDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesFlags(depth int, m *models.BillingUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes BillingUsageDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.BillingUsageDataAttributes{}
	}

	err, attributesAdded := retrieveModelBillingUsageDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveBillingUsageDataIDFlags(depth int, m *models.BillingUsageData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageDataAttributes

// register flags to command
func registerModelBillingUsageDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributesPeriod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesPrice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProducts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesPeriod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var periodFlagName string
	if cmdPrefix == "" {
		periodFlagName = "period"
	} else {
		periodFlagName = fmt.Sprintf("%v.period", cmdPrefix)
	}

	if err := registerModelBillingUsageDataAttributesPeriodFlags(depth+1, periodFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesPrice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priceDescription := `The total usage price in cents`

	var priceFlagName string
	if cmdPrefix == "" {
		priceFlagName = "price"
	} else {
		priceFlagName = fmt.Sprintf("%v.price", cmdPrefix)
	}

	var priceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(priceFlagName, priceFlagDefault, priceDescription)

	return nil
}

func registerBillingUsageDataAttributesProducts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: products []*BillingUsageDataAttributesProductsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerBillingUsageDataAttributesProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	if err := registerModelBillingUsageDataAttributesProjectFlags(depth+1, projectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataAttributesFlags(depth int, m *models.BillingUsageDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, periodAdded := retrieveBillingUsageDataAttributesPeriodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || periodAdded

	err, priceAdded := retrieveBillingUsageDataAttributesPriceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priceAdded

	err, productsAdded := retrieveBillingUsageDataAttributesProductsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || productsAdded

	err, projectAdded := retrieveBillingUsageDataAttributesProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesPeriodFlags(depth int, m *models.BillingUsageDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	periodFlagName := fmt.Sprintf("%v.period", cmdPrefix)
	if cmd.Flags().Changed(periodFlagName) {
		// info: complex object period BillingUsageDataAttributesPeriod is retrieved outside this Changed() block
	}
	periodFlagValue := m.Period
	if swag.IsZero(periodFlagValue) {
		periodFlagValue = &models.BillingUsageDataAttributesPeriod{}
	}

	err, periodAdded := retrieveModelBillingUsageDataAttributesPeriodFlags(depth+1, periodFlagValue, periodFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || periodAdded
	if periodAdded {
		m.Period = periodFlagValue
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesPriceFlags(depth int, m *models.BillingUsageDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priceFlagName := fmt.Sprintf("%v.price", cmdPrefix)
	if cmd.Flags().Changed(priceFlagName) {

		var priceFlagName string
		if cmdPrefix == "" {
			priceFlagName = "price"
		} else {
			priceFlagName = fmt.Sprintf("%v.price", cmdPrefix)
		}

		priceFlagValue, err := cmd.Flags().GetFloat64(priceFlagName)
		if err != nil {
			return err, false
		}
		m.Price = priceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsFlags(depth int, m *models.BillingUsageDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	productsFlagName := fmt.Sprintf("%v.products", cmdPrefix)
	if cmd.Flags().Changed(productsFlagName) {
		// warning: products array type []*BillingUsageDataAttributesProductsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProjectFlags(depth int, m *models.BillingUsageDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectFlagName := fmt.Sprintf("%v.project", cmdPrefix)
	if cmd.Flags().Changed(projectFlagName) {
		// info: complex object project BillingUsageDataAttributesProject is retrieved outside this Changed() block
	}
	projectFlagValue := m.Project
	if swag.IsZero(projectFlagValue) {
		projectFlagValue = &models.BillingUsageDataAttributesProject{}
	}

	err, projectAdded := retrieveModelBillingUsageDataAttributesProjectFlags(depth+1, projectFlagValue, projectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded
	if projectAdded {
		m.Project = projectFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageDataAttributesPeriod

// register flags to command
func registerModelBillingUsageDataAttributesPeriodFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributesPeriodEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesPeriodStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesPeriodEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDescription := ``

	var endFlagName string
	if cmdPrefix == "" {
		endFlagName = "end"
	} else {
		endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endFlagName, "", endDescription)

	return nil
}

func registerBillingUsageDataAttributesPeriodStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDescription := ``

	var startFlagName string
	if cmdPrefix == "" {
		startFlagName = "start"
	} else {
		startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startFlagName, "", startDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataAttributesPeriodFlags(depth int, m *models.BillingUsageDataAttributesPeriod, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endAdded := retrieveBillingUsageDataAttributesPeriodEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endAdded

	err, startAdded := retrieveBillingUsageDataAttributesPeriodStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesPeriodEndFlags(depth int, m *models.BillingUsageDataAttributesPeriod, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endFlagName := fmt.Sprintf("%v.end", cmdPrefix)
	if cmd.Flags().Changed(endFlagName) {

		var endFlagName string
		if cmdPrefix == "" {
			endFlagName = "end"
		} else {
			endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
		}

		endFlagValueStr, err := cmd.Flags().GetString(endFlagName)
		if err != nil {
			return err, false
		}
		var endFlagValue strfmt.DateTime
		if err := endFlagValue.UnmarshalText([]byte(endFlagValueStr)); err != nil {
			return err, false
		}
		m.End = endFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesPeriodStartFlags(depth int, m *models.BillingUsageDataAttributesPeriod, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startFlagName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(startFlagName) {

		var startFlagName string
		if cmdPrefix == "" {
			startFlagName = "start"
		} else {
			startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
		}

		startFlagValueStr, err := cmd.Flags().GetString(startFlagName)
		if err != nil {
			return err, false
		}
		var startFlagValue strfmt.DateTime
		if err := startFlagValue.UnmarshalText([]byte(startFlagValueStr)); err != nil {
			return err, false
		}
		m.Start = startFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageDataAttributesProductsItems0

// register flags to command
func registerModelBillingUsageDataAttributesProductsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributesProductsItems0End(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0ID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Metadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Price(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Quantity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Resource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0Start(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0UnitPrice(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0UsageType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesProductsItems0End(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDescription := ``

	var endFlagName string
	if cmdPrefix == "" {
		endFlagName = "end"
	} else {
		endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endFlagName, "", endDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0ID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Metadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelBillingUsageDataAttributesProductsItems0MetadataFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Price(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priceDescription := `The total usage price of the product in cents`

	var priceFlagName string
	if cmdPrefix == "" {
		priceFlagName = "price"
	} else {
		priceFlagName = fmt.Sprintf("%v.price", cmdPrefix)
	}

	var priceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(priceFlagName, priceFlagDefault, priceDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Quantity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	quantityDescription := ``

	var quantityFlagName string
	if cmdPrefix == "" {
		quantityFlagName = "quantity"
	} else {
		quantityFlagName = fmt.Sprintf("%v.quantity", cmdPrefix)
	}

	var quantityFlagDefault float64

	_ = cmd.PersistentFlags().Float64(quantityFlagName, quantityFlagDefault, quantityDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Resource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceDescription := `Enum: ["servers","networking","others"]. `

	var resourceFlagName string
	if cmdPrefix == "" {
		resourceFlagName = "resource"
	} else {
		resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
	}

	var resourceFlagDefault string

	_ = cmd.PersistentFlags().String(resourceFlagName, resourceFlagDefault, resourceDescription)

	if err := cmd.RegisterFlagCompletionFunc(resourceFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["servers","networking","others"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesProductsItems0Start(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDescription := ``

	var startFlagName string
	if cmdPrefix == "" {
		startFlagName = "start"
	} else {
		startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startFlagName, "", startDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0UnitPrice(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	unitPriceDescription := `The unit price of the product in cents`

	var unitPriceFlagName string
	if cmdPrefix == "" {
		unitPriceFlagName = "unit_price"
	} else {
		unitPriceFlagName = fmt.Sprintf("%v.unit_price", cmdPrefix)
	}

	var unitPriceFlagDefault float64

	_ = cmd.PersistentFlags().Float64(unitPriceFlagName, unitPriceFlagDefault, unitPriceDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0UsageType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usageTypeDescription := `Enum: ["licensed","metered"]. `

	var usageTypeFlagName string
	if cmdPrefix == "" {
		usageTypeFlagName = "usage_type"
	} else {
		usageTypeFlagName = fmt.Sprintf("%v.usage_type", cmdPrefix)
	}

	var usageTypeFlagDefault string

	_ = cmd.PersistentFlags().String(usageTypeFlagName, usageTypeFlagDefault, usageTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(usageTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["licensed","metered"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataAttributesProductsItems0Flags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endAdded := retrieveBillingUsageDataAttributesProductsItems0EndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endAdded

	err, idAdded := retrieveBillingUsageDataAttributesProductsItems0IDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, metadataAdded := retrieveBillingUsageDataAttributesProductsItems0MetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, nameAdded := retrieveBillingUsageDataAttributesProductsItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, priceAdded := retrieveBillingUsageDataAttributesProductsItems0PriceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priceAdded

	err, quantityAdded := retrieveBillingUsageDataAttributesProductsItems0QuantityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quantityAdded

	err, resourceAdded := retrieveBillingUsageDataAttributesProductsItems0ResourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceAdded

	err, startAdded := retrieveBillingUsageDataAttributesProductsItems0StartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startAdded

	err, unitPriceAdded := retrieveBillingUsageDataAttributesProductsItems0UnitPriceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || unitPriceAdded

	err, usageTypeAdded := retrieveBillingUsageDataAttributesProductsItems0UsageTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usageTypeAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0EndFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endFlagName := fmt.Sprintf("%v.end", cmdPrefix)
	if cmd.Flags().Changed(endFlagName) {

		var endFlagName string
		if cmdPrefix == "" {
			endFlagName = "end"
		} else {
			endFlagName = fmt.Sprintf("%v.end", cmdPrefix)
		}

		endFlagValueStr, err := cmd.Flags().GetString(endFlagName)
		if err != nil {
			return err, false
		}
		var endFlagValue strfmt.DateTime
		if err := endFlagValue.UnmarshalText([]byte(endFlagValueStr)); err != nil {
			return err, false
		}
		m.End = &endFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0IDFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0MetadataFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata BillingUsageDataAttributesProductsItems0Metadata is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.BillingUsageDataAttributesProductsItems0Metadata{}
	}

	err, metadataAdded := retrieveModelBillingUsageDataAttributesProductsItems0MetadataFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0NameFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0PriceFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priceFlagName := fmt.Sprintf("%v.price", cmdPrefix)
	if cmd.Flags().Changed(priceFlagName) {

		var priceFlagName string
		if cmdPrefix == "" {
			priceFlagName = "price"
		} else {
			priceFlagName = fmt.Sprintf("%v.price", cmdPrefix)
		}

		priceFlagValue, err := cmd.Flags().GetFloat64(priceFlagName)
		if err != nil {
			return err, false
		}
		m.Price = priceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0QuantityFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quantityFlagName := fmt.Sprintf("%v.quantity", cmdPrefix)
	if cmd.Flags().Changed(quantityFlagName) {

		var quantityFlagName string
		if cmdPrefix == "" {
			quantityFlagName = "quantity"
		} else {
			quantityFlagName = fmt.Sprintf("%v.quantity", cmdPrefix)
		}

		quantityFlagValue, err := cmd.Flags().GetFloat64(quantityFlagName)
		if err != nil {
			return err, false
		}
		m.Quantity = quantityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0ResourceFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceFlagName := fmt.Sprintf("%v.resource", cmdPrefix)
	if cmd.Flags().Changed(resourceFlagName) {

		var resourceFlagName string
		if cmdPrefix == "" {
			resourceFlagName = "resource"
		} else {
			resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
		}

		resourceFlagValue, err := cmd.Flags().GetString(resourceFlagName)
		if err != nil {
			return err, false
		}
		m.Resource = resourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0StartFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startFlagName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(startFlagName) {

		var startFlagName string
		if cmdPrefix == "" {
			startFlagName = "start"
		} else {
			startFlagName = fmt.Sprintf("%v.start", cmdPrefix)
		}

		startFlagValueStr, err := cmd.Flags().GetString(startFlagName)
		if err != nil {
			return err, false
		}
		var startFlagValue strfmt.DateTime
		if err := startFlagValue.UnmarshalText([]byte(startFlagValueStr)); err != nil {
			return err, false
		}
		m.Start = startFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0UnitPriceFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	unitPriceFlagName := fmt.Sprintf("%v.unit_price", cmdPrefix)
	if cmd.Flags().Changed(unitPriceFlagName) {

		var unitPriceFlagName string
		if cmdPrefix == "" {
			unitPriceFlagName = "unit_price"
		} else {
			unitPriceFlagName = fmt.Sprintf("%v.unit_price", cmdPrefix)
		}

		unitPriceFlagValue, err := cmd.Flags().GetFloat64(unitPriceFlagName)
		if err != nil {
			return err, false
		}
		m.UnitPrice = unitPriceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0UsageTypeFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usageTypeFlagName := fmt.Sprintf("%v.usage_type", cmdPrefix)
	if cmd.Flags().Changed(usageTypeFlagName) {

		var usageTypeFlagName string
		if cmdPrefix == "" {
			usageTypeFlagName = "usage_type"
		} else {
			usageTypeFlagName = fmt.Sprintf("%v.usage_type", cmdPrefix)
		}

		usageTypeFlagValue, err := cmd.Flags().GetString(usageTypeFlagName)
		if err != nil {
			return err, false
		}
		m.UsageType = usageTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageDataAttributesProductsItems0Metadata

// register flags to command
func registerModelBillingUsageDataAttributesProductsItems0MetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributesProductsItems0MetadataHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0MetadataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProductsItems0MetadataPlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesProductsItems0MetadataHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0MetadataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBillingUsageDataAttributesProductsItems0MetadataPlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	planDescription := ``

	var planFlagName string
	if cmdPrefix == "" {
		planFlagName = "plan"
	} else {
		planFlagName = fmt.Sprintf("%v.plan", cmdPrefix)
	}

	var planFlagDefault string

	_ = cmd.PersistentFlags().String(planFlagName, planFlagDefault, planDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataAttributesProductsItems0MetadataFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hostnameAdded := retrieveBillingUsageDataAttributesProductsItems0MetadataHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, idAdded := retrieveBillingUsageDataAttributesProductsItems0MetadataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, planAdded := retrieveBillingUsageDataAttributesProductsItems0MetadataPlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0MetadataHostnameFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = &hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0MetadataIDFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProductsItems0MetadataPlanFlags(depth int, m *models.BillingUsageDataAttributesProductsItems0Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planFlagName := fmt.Sprintf("%v.plan", cmdPrefix)
	if cmd.Flags().Changed(planFlagName) {

		var planFlagName string
		if cmdPrefix == "" {
			planFlagName = "plan"
		} else {
			planFlagName = fmt.Sprintf("%v.plan", cmdPrefix)
		}

		planFlagValue, err := cmd.Flags().GetString(planFlagName)
		if err != nil {
			return err, false
		}
		m.Plan = &planFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for BillingUsageDataAttributesProject

// register flags to command
func registerModelBillingUsageDataAttributesProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBillingUsageDataAttributesProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBillingUsageDataAttributesProjectSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBillingUsageDataAttributesProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerBillingUsageDataAttributesProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBillingUsageDataAttributesProjectSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBillingUsageDataAttributesProjectFlags(depth int, m *models.BillingUsageDataAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveBillingUsageDataAttributesProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveBillingUsageDataAttributesProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveBillingUsageDataAttributesProjectSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProjectIDFlags(depth int, m *models.BillingUsageDataAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProjectNameFlags(depth int, m *models.BillingUsageDataAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBillingUsageDataAttributesProjectSlugFlags(depth int, m *models.BillingUsageDataAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
