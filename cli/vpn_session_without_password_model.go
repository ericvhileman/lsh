// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for VpnSessionWithoutPassword

// register flags to command
func registerModelVpnSessionWithoutPasswordFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionWithoutPasswordData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelVpnSessionWithoutPasswordDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionWithoutPasswordFlags(depth int, m *models.VpnSessionWithoutPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveVpnSessionWithoutPasswordDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataFlags(depth int, m *models.VpnSessionWithoutPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data VpnSessionWithoutPasswordData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &models.VpnSessionWithoutPasswordData{}
	}

	err, dataAdded := retrieveModelVpnSessionWithoutPasswordDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for VpnSessionWithoutPasswordData

// register flags to command
func registerModelVpnSessionWithoutPasswordDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionWithoutPasswordDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelVpnSessionWithoutPasswordDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["vpn_sessions"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["vpn_sessions"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionWithoutPasswordDataFlags(depth int, m *models.VpnSessionWithoutPasswordData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveVpnSessionWithoutPasswordDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveVpnSessionWithoutPasswordDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrieveVpnSessionWithoutPasswordDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesFlags(depth int, m *models.VpnSessionWithoutPasswordData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes VpnSessionWithoutPasswordDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.VpnSessionWithoutPasswordDataAttributes{}
	}

	err, attributesAdded := retrieveModelVpnSessionWithoutPasswordDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataIDFlags(depth int, m *models.VpnSessionWithoutPasswordData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataTypeFlags(depth int, m *models.VpnSessionWithoutPasswordData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VpnSessionWithoutPasswordDataAttributes

// register flags to command
func registerModelVpnSessionWithoutPasswordDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionWithoutPasswordDataAttributesCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesUserName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expiresAtDescription := `Time to expiry`

	var expiresAtFlagName string
	if cmdPrefix == "" {
		expiresAtFlagName = "expires_at"
	} else {
		expiresAtFlagName = fmt.Sprintf("%v.expires_at", cmdPrefix)
	}

	var expiresAtFlagDefault string

	_ = cmd.PersistentFlags().String(expiresAtFlagName, expiresAtFlagDefault, expiresAtDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostDescription := `VPN host`

	var hostFlagName string
	if cmdPrefix == "" {
		hostFlagName = "host"
	} else {
		hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
	}

	var hostFlagDefault string

	_ = cmd.PersistentFlags().String(hostFlagName, hostFlagDefault, hostDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `VPN port`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault string

	_ = cmd.PersistentFlags().String(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	if err := registerModelVpnSessionWithoutPasswordDataAttributesRegionFlags(depth+1, regionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["enable","disable"]. from Firewall Response`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := ``

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updated_at"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesUserName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userNameDescription := `VPN username`

	var userNameFlagName string
	if cmdPrefix == "" {
		userNameFlagName = "user_name"
	} else {
		userNameFlagName = fmt.Sprintf("%v.user_name", cmdPrefix)
	}

	var userNameFlagDefault string

	_ = cmd.PersistentFlags().String(userNameFlagName, userNameFlagDefault, userNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionWithoutPasswordDataAttributesFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveVpnSessionWithoutPasswordDataAttributesCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, expiresAtAdded := retrieveVpnSessionWithoutPasswordDataAttributesExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, hostAdded := retrieveVpnSessionWithoutPasswordDataAttributesHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostAdded

	err, portAdded := retrieveVpnSessionWithoutPasswordDataAttributesPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, regionAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, statusAdded := retrieveVpnSessionWithoutPasswordDataAttributesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAtAdded := retrieveVpnSessionWithoutPasswordDataAttributesUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, userNameAdded := retrieveVpnSessionWithoutPasswordDataAttributesUserNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userNameAdded

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesCreatedAtFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesExpiresAtFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expires_at", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		var expiresAtFlagName string
		if cmdPrefix == "" {
			expiresAtFlagName = "expires_at"
		} else {
			expiresAtFlagName = fmt.Sprintf("%v.expires_at", cmdPrefix)
		}

		expiresAtFlagValue, err := cmd.Flags().GetString(expiresAtFlagName)
		if err != nil {
			return err, false
		}
		m.ExpiresAt = expiresAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesHostFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostFlagName := fmt.Sprintf("%v.host", cmdPrefix)
	if cmd.Flags().Changed(hostFlagName) {

		var hostFlagName string
		if cmdPrefix == "" {
			hostFlagName = "host"
		} else {
			hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
		}

		hostFlagValue, err := cmd.Flags().GetString(hostFlagName)
		if err != nil {
			return err, false
		}
		m.Host = hostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesPortFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetString(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {
		// info: complex object region VpnSessionWithoutPasswordDataAttributesRegion is retrieved outside this Changed() block
	}
	regionFlagValue := m.Region
	if swag.IsZero(regionFlagValue) {
		regionFlagValue = &models.VpnSessionWithoutPasswordDataAttributesRegion{}
	}

	err, regionAdded := retrieveModelVpnSessionWithoutPasswordDataAttributesRegionFlags(depth+1, regionFlagValue, regionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded
	if regionAdded {
		m.Region = regionFlagValue
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesStatusFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesUpdatedAtFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updated_at", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updated_at"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesUserNameFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userNameFlagName := fmt.Sprintf("%v.user_name", cmdPrefix)
	if cmd.Flags().Changed(userNameFlagName) {

		var userNameFlagName string
		if cmdPrefix == "" {
			userNameFlagName = "user_name"
		} else {
			userNameFlagName = fmt.Sprintf("%v.user_name", cmdPrefix)
		}

		userNameFlagValue, err := cmd.Flags().GetString(userNameFlagName)
		if err != nil {
			return err, false
		}
		m.UserName = userNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VpnSessionWithoutPasswordDataAttributesRegion

// register flags to command
func registerModelVpnSessionWithoutPasswordDataAttributesRegionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionCity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionSite(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionCity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cityDescription := ``

	var cityFlagName string
	if cmdPrefix == "" {
		cityFlagName = "city"
	} else {
		cityFlagName = fmt.Sprintf("%v.city", cmdPrefix)
	}

	var cityFlagDefault string

	_ = cmd.PersistentFlags().String(cityFlagName, cityFlagDefault, cityDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countryDescription := ``

	var countryFlagName string
	if cmdPrefix == "" {
		countryFlagName = "country"
	} else {
		countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var countryFlagDefault string

	_ = cmd.PersistentFlags().String(countryFlagName, countryFlagDefault, countryDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionSite(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var siteFlagName string
	if cmdPrefix == "" {
		siteFlagName = "site"
	} else {
		siteFlagName = fmt.Sprintf("%v.site", cmdPrefix)
	}

	if err := registerModelVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth+1, siteFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionWithoutPasswordDataAttributesRegionFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cityAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionCityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cityAdded

	err, countryAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countryAdded

	err, siteAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionCityFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cityFlagName := fmt.Sprintf("%v.city", cmdPrefix)
	if cmd.Flags().Changed(cityFlagName) {

		var cityFlagName string
		if cmdPrefix == "" {
			cityFlagName = "city"
		} else {
			cityFlagName = fmt.Sprintf("%v.city", cmdPrefix)
		}

		cityFlagValue, err := cmd.Flags().GetString(cityFlagName)
		if err != nil {
			return err, false
		}
		m.City = cityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionCountryFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countryFlagName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(countryFlagName) {

		var countryFlagName string
		if cmdPrefix == "" {
			countryFlagName = "country"
		} else {
			countryFlagName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		countryFlagValue, err := cmd.Flags().GetString(countryFlagName)
		if err != nil {
			return err, false
		}
		m.Country = countryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	siteFlagName := fmt.Sprintf("%v.site", cmdPrefix)
	if cmd.Flags().Changed(siteFlagName) {
		// info: complex object site VpnSessionWithoutPasswordDataAttributesRegionSite is retrieved outside this Changed() block
	}
	siteFlagValue := m.Site
	if swag.IsZero(siteFlagValue) {
		siteFlagValue = &models.VpnSessionWithoutPasswordDataAttributesRegionSite{}
	}

	err, siteAdded := retrieveModelVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth+1, siteFlagValue, siteFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || siteAdded
	if siteAdded {
		m.Site = siteFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for VpnSessionWithoutPasswordDataAttributesRegionSite

// register flags to command
func registerModelVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionSiteFacility(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionSiteName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionWithoutPasswordDataAttributesRegionSiteSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionSiteFacility(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	facilityDescription := ``

	var facilityFlagName string
	if cmdPrefix == "" {
		facilityFlagName = "facility"
	} else {
		facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
	}

	var facilityFlagDefault string

	_ = cmd.PersistentFlags().String(facilityFlagName, facilityFlagDefault, facilityDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionSiteName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerVpnSessionWithoutPasswordDataAttributesRegionSiteSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionWithoutPasswordDataAttributesRegionSiteFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegionSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, facilityAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteFacilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || facilityAdded

	err, nameAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteFacilityFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegionSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	facilityFlagName := fmt.Sprintf("%v.facility", cmdPrefix)
	if cmd.Flags().Changed(facilityFlagName) {

		var facilityFlagName string
		if cmdPrefix == "" {
			facilityFlagName = "facility"
		} else {
			facilityFlagName = fmt.Sprintf("%v.facility", cmdPrefix)
		}

		facilityFlagValue, err := cmd.Flags().GetString(facilityFlagName)
		if err != nil {
			return err, false
		}
		m.Facility = facilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteNameFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegionSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionWithoutPasswordDataAttributesRegionSiteSlugFlags(depth int, m *models.VpnSessionWithoutPasswordDataAttributesRegionSite, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
