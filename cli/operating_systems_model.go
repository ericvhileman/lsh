// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for OperatingSystems

// register flags to command
func registerModelOperatingSystemsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOperatingSystemsAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperatingSystemsAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelOperatingSystemsAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperatingSystemsID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOperatingSystemsFlags(depth int, m *models.OperatingSystems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveOperatingSystemsAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveOperatingSystemsIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesFlags(depth int, m *models.OperatingSystems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes OperatingSystemsAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.OperatingSystemsAttributes{}
	}

	err, attributesAdded := retrieveModelOperatingSystemsAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveOperatingSystemsIDFlags(depth int, m *models.OperatingSystems, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for OperatingSystemsAttributes

// register flags to command
func registerModelOperatingSystemsAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOperatingSystemsAttributesDistro(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperatingSystemsAttributesDistro(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distroDescription := ``

	var distroFlagName string
	if cmdPrefix == "" {
		distroFlagName = "distro"
	} else {
		distroFlagName = fmt.Sprintf("%v.distro", cmdPrefix)
	}

	var distroFlagDefault string

	_ = cmd.PersistentFlags().String(distroFlagName, distroFlagDefault, distroDescription)

	return nil
}

func registerOperatingSystemsAttributesFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var featuresFlagName string
	if cmdPrefix == "" {
		featuresFlagName = "features"
	} else {
		featuresFlagName = fmt.Sprintf("%v.features", cmdPrefix)
	}

	if err := registerModelOperatingSystemsAttributesFeaturesFlags(depth+1, featuresFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperatingSystemsAttributesName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerOperatingSystemsAttributesSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

func registerOperatingSystemsAttributesUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

func registerOperatingSystemsAttributesVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOperatingSystemsAttributesFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, distroAdded := retrieveOperatingSystemsAttributesDistroFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distroAdded

	err, featuresAdded := retrieveOperatingSystemsAttributesFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, nameAdded := retrieveOperatingSystemsAttributesNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveOperatingSystemsAttributesSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	err, userAdded := retrieveOperatingSystemsAttributesUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, versionAdded := retrieveOperatingSystemsAttributesVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesDistroFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distroFlagName := fmt.Sprintf("%v.distro", cmdPrefix)
	if cmd.Flags().Changed(distroFlagName) {

		var distroFlagName string
		if cmdPrefix == "" {
			distroFlagName = "distro"
		} else {
			distroFlagName = fmt.Sprintf("%v.distro", cmdPrefix)
		}

		distroFlagValue, err := cmd.Flags().GetString(distroFlagName)
		if err != nil {
			return err, false
		}
		m.Distro = distroFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesFeaturesFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// info: complex object features OperatingSystemsAttributesFeatures is retrieved outside this Changed() block
	}
	featuresFlagValue := m.Features
	if swag.IsZero(featuresFlagValue) {
		featuresFlagValue = &models.OperatingSystemsAttributesFeatures{}
	}

	err, featuresAdded := retrieveModelOperatingSystemsAttributesFeaturesFlags(depth+1, featuresFlagValue, featuresFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded
	if featuresAdded {
		m.Features = featuresFlagValue
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesNameFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesSlugFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesUserFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesVersionFlags(depth int, m *models.OperatingSystemsAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for OperatingSystemsAttributesFeatures

// register flags to command
func registerModelOperatingSystemsAttributesFeaturesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOperatingSystemsAttributesFeaturesRaid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesFeaturesSSHKeys(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOperatingSystemsAttributesFeaturesUserData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperatingSystemsAttributesFeaturesRaid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	raidDescription := ``

	var raidFlagName string
	if cmdPrefix == "" {
		raidFlagName = "raid"
	} else {
		raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
	}

	var raidFlagDefault bool

	_ = cmd.PersistentFlags().Bool(raidFlagName, raidFlagDefault, raidDescription)

	return nil
}

func registerOperatingSystemsAttributesFeaturesSSHKeys(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sshKeysDescription := ``

	var sshKeysFlagName string
	if cmdPrefix == "" {
		sshKeysFlagName = "ssh_keys"
	} else {
		sshKeysFlagName = fmt.Sprintf("%v.ssh_keys", cmdPrefix)
	}

	var sshKeysFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sshKeysFlagName, sshKeysFlagDefault, sshKeysDescription)

	return nil
}

func registerOperatingSystemsAttributesFeaturesUserData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDataDescription := ``

	var userDataFlagName string
	if cmdPrefix == "" {
		userDataFlagName = "user_data"
	} else {
		userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
	}

	var userDataFlagDefault bool

	_ = cmd.PersistentFlags().Bool(userDataFlagName, userDataFlagDefault, userDataDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOperatingSystemsAttributesFeaturesFlags(depth int, m *models.OperatingSystemsAttributesFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, raidAdded := retrieveOperatingSystemsAttributesFeaturesRaidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || raidAdded

	err, sshKeysAdded := retrieveOperatingSystemsAttributesFeaturesSSHKeysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshKeysAdded

	err, userDataAdded := retrieveOperatingSystemsAttributesFeaturesUserDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userDataAdded

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesFeaturesRaidFlags(depth int, m *models.OperatingSystemsAttributesFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	raidFlagName := fmt.Sprintf("%v.raid", cmdPrefix)
	if cmd.Flags().Changed(raidFlagName) {

		var raidFlagName string
		if cmdPrefix == "" {
			raidFlagName = "raid"
		} else {
			raidFlagName = fmt.Sprintf("%v.raid", cmdPrefix)
		}

		raidFlagValue, err := cmd.Flags().GetBool(raidFlagName)
		if err != nil {
			return err, false
		}
		m.Raid = raidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesFeaturesSSHKeysFlags(depth int, m *models.OperatingSystemsAttributesFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshKeysFlagName := fmt.Sprintf("%v.ssh_keys", cmdPrefix)
	if cmd.Flags().Changed(sshKeysFlagName) {

		var sshKeysFlagName string
		if cmdPrefix == "" {
			sshKeysFlagName = "ssh_keys"
		} else {
			sshKeysFlagName = fmt.Sprintf("%v.ssh_keys", cmdPrefix)
		}

		sshKeysFlagValue, err := cmd.Flags().GetBool(sshKeysFlagName)
		if err != nil {
			return err, false
		}
		m.SSHKeys = sshKeysFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOperatingSystemsAttributesFeaturesUserDataFlags(depth int, m *models.OperatingSystemsAttributesFeatures, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userDataFlagName := fmt.Sprintf("%v.user_data", cmdPrefix)
	if cmd.Flags().Changed(userDataFlagName) {

		var userDataFlagName string
		if cmdPrefix == "" {
			userDataFlagName = "user_data"
		} else {
			userDataFlagName = fmt.Sprintf("%v.user_data", cmdPrefix)
		}

		userDataFlagValue, err := cmd.Flags().GetBool(userDataFlagName)
		if err != nil {
			return err, false
		}
		m.UserData = userDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}
