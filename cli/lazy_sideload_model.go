// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for LazySideload

// register flags to command
func registerModelLazySideloadFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLazySideloadMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLazySideloadMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metaFlagName string
	if cmdPrefix == "" {
		metaFlagName = "meta"
	} else {
		metaFlagName = fmt.Sprintf("%v.meta", cmdPrefix)
	}

	if err := registerModelLazySideloadMetaFlags(depth+1, metaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLazySideloadFlags(depth int, m *models.LazySideload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, metaAdded := retrieveLazySideloadMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	return nil, retAdded
}

func retrieveLazySideloadMetaFlags(depth int, m *models.LazySideload, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// info: complex object meta LazySideloadMeta is retrieved outside this Changed() block
	}
	metaFlagValue := m.Meta
	if swag.IsZero(metaFlagValue) {
		metaFlagValue = &models.LazySideloadMeta{}
	}

	err, metaAdded := retrieveModelLazySideloadMetaFlags(depth+1, metaFlagValue, metaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded
	if metaAdded {
		m.Meta = metaFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for LazySideloadMeta

// register flags to command
func registerModelLazySideloadMetaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLazySideloadMetaIncluded(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLazySideloadMetaIncluded(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	includedDescription := ``

	var includedFlagName string
	if cmdPrefix == "" {
		includedFlagName = "included"
	} else {
		includedFlagName = fmt.Sprintf("%v.included", cmdPrefix)
	}

	var includedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(includedFlagName, includedFlagDefault, includedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLazySideloadMetaFlags(depth int, m *models.LazySideloadMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, includedAdded := retrieveLazySideloadMetaIncludedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || includedAdded

	return nil, retAdded
}

func retrieveLazySideloadMetaIncludedFlags(depth int, m *models.LazySideloadMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	includedFlagName := fmt.Sprintf("%v.included", cmdPrefix)
	if cmd.Flags().Changed(includedFlagName) {

		var includedFlagName string
		if cmdPrefix == "" {
			includedFlagName = "included"
		} else {
			includedFlagName = fmt.Sprintf("%v.included", cmdPrefix)
		}

		includedFlagValue, err := cmd.Flags().GetBool(includedFlagName)
		if err != nil {
			return err, false
		}
		m.Included = includedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
