// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for IPAddress

// register flags to command
func registerModelIPAddressFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelIPAddressAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressFlags(depth int, m *models.IPAddress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveIPAddressAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveIPAddressIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesFlags(depth int, m *models.IPAddress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes IPAddressAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.IPAddressAttributes{}
	}

	err, attributesAdded := retrieveModelIPAddressAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveIPAddressIDFlags(depth int, m *models.IPAddress, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IPAddressAttributes

// register flags to command
func registerModelIPAddressAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributesAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesAssignment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesCidr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesFamily(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesManagement(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesNetmask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := ``

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerIPAddressAttributesAssignment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var assignmentFlagName string
	if cmdPrefix == "" {
		assignmentFlagName = "assignment"
	} else {
		assignmentFlagName = fmt.Sprintf("%v.assignment", cmdPrefix)
	}

	if err := registerModelIPAddressAttributesAssignmentFlags(depth+1, assignmentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	availableDescription := ``

	var availableFlagName string
	if cmdPrefix == "" {
		availableFlagName = "available"
	} else {
		availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
	}

	var availableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(availableFlagName, availableFlagDefault, availableDescription)

	return nil
}

func registerIPAddressAttributesCidr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cidrDescription := ``

	var cidrFlagName string
	if cmdPrefix == "" {
		cidrFlagName = "cidr"
	} else {
		cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
	}

	var cidrFlagDefault string

	_ = cmd.PersistentFlags().String(cidrFlagName, cidrFlagDefault, cidrDescription)

	return nil
}

func registerIPAddressAttributesFamily(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	familyDescription := `Enum: ["IPv4","IPv6"]. `

	var familyFlagName string
	if cmdPrefix == "" {
		familyFlagName = "family"
	} else {
		familyFlagName = fmt.Sprintf("%v.family", cmdPrefix)
	}

	var familyFlagDefault string

	_ = cmd.PersistentFlags().String(familyFlagName, familyFlagDefault, familyDescription)

	if err := cmd.RegisterFlagCompletionFunc(familyFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["IPv4","IPv6"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := ``

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerIPAddressAttributesManagement(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	managementDescription := ``

	var managementFlagName string
	if cmdPrefix == "" {
		managementFlagName = "management"
	} else {
		managementFlagName = fmt.Sprintf("%v.management", cmdPrefix)
	}

	var managementFlagDefault bool

	_ = cmd.PersistentFlags().Bool(managementFlagName, managementFlagDefault, managementDescription)

	return nil
}

func registerIPAddressAttributesNetmask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	netmaskDescription := ``

	var netmaskFlagName string
	if cmdPrefix == "" {
		netmaskFlagName = "netmask"
	} else {
		netmaskFlagName = fmt.Sprintf("%v.netmask", cmdPrefix)
	}

	var netmaskFlagDefault string

	_ = cmd.PersistentFlags().String(netmaskFlagName, netmaskFlagDefault, netmaskDescription)

	return nil
}

func registerIPAddressAttributesProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	if err := registerModelIPAddressAttributesProjectFlags(depth+1, projectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicDescription := ``

	var publicFlagName string
	if cmdPrefix == "" {
		publicFlagName = "public"
	} else {
		publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
	}

	var publicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicFlagName, publicFlagDefault, publicDescription)

	return nil
}

func registerIPAddressAttributesRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	if err := registerModelIPAddressAttributesRegionFlags(depth+1, regionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["Public","Private"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Public","Private"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressAttributesFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveIPAddressAttributesAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, assignmentAdded := retrieveIPAddressAttributesAssignmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || assignmentAdded

	err, availableAdded := retrieveIPAddressAttributesAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableAdded

	err, cidrAdded := retrieveIPAddressAttributesCidrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cidrAdded

	err, familyAdded := retrieveIPAddressAttributesFamilyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || familyAdded

	err, gatewayAdded := retrieveIPAddressAttributesGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, managementAdded := retrieveIPAddressAttributesManagementFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || managementAdded

	err, netmaskAdded := retrieveIPAddressAttributesNetmaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || netmaskAdded

	err, projectAdded := retrieveIPAddressAttributesProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded

	err, publicAdded := retrieveIPAddressAttributesPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicAdded

	err, regionAdded := retrieveIPAddressAttributesRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, typeAdded := retrieveIPAddressAttributesTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesAddressFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesAssignmentFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	assignmentFlagName := fmt.Sprintf("%v.assignment", cmdPrefix)
	if cmd.Flags().Changed(assignmentFlagName) {
		// info: complex object assignment IPAddressAttributesAssignment is retrieved outside this Changed() block
	}
	assignmentFlagValue := m.Assignment
	if swag.IsZero(assignmentFlagValue) {
		assignmentFlagValue = &models.IPAddressAttributesAssignment{}
	}

	err, assignmentAdded := retrieveModelIPAddressAttributesAssignmentFlags(depth+1, assignmentFlagValue, assignmentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || assignmentAdded
	if assignmentAdded {
		m.Assignment = assignmentFlagValue
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesAvailableFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availableFlagName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(availableFlagName) {

		var availableFlagName string
		if cmdPrefix == "" {
			availableFlagName = "available"
		} else {
			availableFlagName = fmt.Sprintf("%v.available", cmdPrefix)
		}

		availableFlagValue, err := cmd.Flags().GetBool(availableFlagName)
		if err != nil {
			return err, false
		}
		m.Available = availableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesCidrFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cidrFlagName := fmt.Sprintf("%v.cidr", cmdPrefix)
	if cmd.Flags().Changed(cidrFlagName) {

		var cidrFlagName string
		if cmdPrefix == "" {
			cidrFlagName = "cidr"
		} else {
			cidrFlagName = fmt.Sprintf("%v.cidr", cmdPrefix)
		}

		cidrFlagValue, err := cmd.Flags().GetString(cidrFlagName)
		if err != nil {
			return err, false
		}
		m.Cidr = &cidrFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesFamilyFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	familyFlagName := fmt.Sprintf("%v.family", cmdPrefix)
	if cmd.Flags().Changed(familyFlagName) {

		var familyFlagName string
		if cmdPrefix == "" {
			familyFlagName = "family"
		} else {
			familyFlagName = fmt.Sprintf("%v.family", cmdPrefix)
		}

		familyFlagValue, err := cmd.Flags().GetString(familyFlagName)
		if err != nil {
			return err, false
		}
		m.Family = familyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesGatewayFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = &gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesManagementFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	managementFlagName := fmt.Sprintf("%v.management", cmdPrefix)
	if cmd.Flags().Changed(managementFlagName) {

		var managementFlagName string
		if cmdPrefix == "" {
			managementFlagName = "management"
		} else {
			managementFlagName = fmt.Sprintf("%v.management", cmdPrefix)
		}

		managementFlagValue, err := cmd.Flags().GetBool(managementFlagName)
		if err != nil {
			return err, false
		}
		m.Management = managementFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesNetmaskFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	netmaskFlagName := fmt.Sprintf("%v.netmask", cmdPrefix)
	if cmd.Flags().Changed(netmaskFlagName) {

		var netmaskFlagName string
		if cmdPrefix == "" {
			netmaskFlagName = "netmask"
		} else {
			netmaskFlagName = fmt.Sprintf("%v.netmask", cmdPrefix)
		}

		netmaskFlagValue, err := cmd.Flags().GetString(netmaskFlagName)
		if err != nil {
			return err, false
		}
		m.Netmask = netmaskFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesProjectFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectFlagName := fmt.Sprintf("%v.project", cmdPrefix)
	if cmd.Flags().Changed(projectFlagName) {
		// info: complex object project IPAddressAttributesProject is retrieved outside this Changed() block
	}
	projectFlagValue := m.Project
	if swag.IsZero(projectFlagValue) {
		projectFlagValue = &models.IPAddressAttributesProject{}
	}

	err, projectAdded := retrieveModelIPAddressAttributesProjectFlags(depth+1, projectFlagValue, projectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdded
	if projectAdded {
		m.Project = projectFlagValue
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesPublicFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicFlagName := fmt.Sprintf("%v.public", cmdPrefix)
	if cmd.Flags().Changed(publicFlagName) {

		var publicFlagName string
		if cmdPrefix == "" {
			publicFlagName = "public"
		} else {
			publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
		}

		publicFlagValue, err := cmd.Flags().GetBool(publicFlagName)
		if err != nil {
			return err, false
		}
		m.Public = publicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {
		// info: complex object region IPAddressAttributesRegion is retrieved outside this Changed() block
	}
	regionFlagValue := m.Region
	if swag.IsZero(regionFlagValue) {
		regionFlagValue = &models.IPAddressAttributesRegion{}
	}

	err, regionAdded := retrieveModelIPAddressAttributesRegionFlags(depth+1, regionFlagValue, regionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded
	if regionAdded {
		m.Region = regionFlagValue
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesTypeFlags(depth int, m *models.IPAddressAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IPAddressAttributesAssignment

// register flags to command
func registerModelIPAddressAttributesAssignmentFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributesAssignmentAssignedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesAssignmentHostname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesAssignmentServerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesAssignmentAssignedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	assignedAtDescription := ``

	var assignedAtFlagName string
	if cmdPrefix == "" {
		assignedAtFlagName = "assigned_at"
	} else {
		assignedAtFlagName = fmt.Sprintf("%v.assigned_at", cmdPrefix)
	}

	var assignedAtFlagDefault string

	_ = cmd.PersistentFlags().String(assignedAtFlagName, assignedAtFlagDefault, assignedAtDescription)

	return nil
}

func registerIPAddressAttributesAssignmentHostname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostnameDescription := ``

	var hostnameFlagName string
	if cmdPrefix == "" {
		hostnameFlagName = "hostname"
	} else {
		hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
	}

	var hostnameFlagDefault string

	_ = cmd.PersistentFlags().String(hostnameFlagName, hostnameFlagDefault, hostnameDescription)

	return nil
}

func registerIPAddressAttributesAssignmentServerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverIdDescription := ``

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "server_id"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressAttributesAssignmentFlags(depth int, m *models.IPAddressAttributesAssignment, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, assignedAtAdded := retrieveIPAddressAttributesAssignmentAssignedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || assignedAtAdded

	err, hostnameAdded := retrieveIPAddressAttributesAssignmentHostnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostnameAdded

	err, serverIdAdded := retrieveIPAddressAttributesAssignmentServerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverIdAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesAssignmentAssignedAtFlags(depth int, m *models.IPAddressAttributesAssignment, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	assignedAtFlagName := fmt.Sprintf("%v.assigned_at", cmdPrefix)
	if cmd.Flags().Changed(assignedAtFlagName) {

		var assignedAtFlagName string
		if cmdPrefix == "" {
			assignedAtFlagName = "assigned_at"
		} else {
			assignedAtFlagName = fmt.Sprintf("%v.assigned_at", cmdPrefix)
		}

		assignedAtFlagValue, err := cmd.Flags().GetString(assignedAtFlagName)
		if err != nil {
			return err, false
		}
		m.AssignedAt = assignedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesAssignmentHostnameFlags(depth int, m *models.IPAddressAttributesAssignment, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostnameFlagName := fmt.Sprintf("%v.hostname", cmdPrefix)
	if cmd.Flags().Changed(hostnameFlagName) {

		var hostnameFlagName string
		if cmdPrefix == "" {
			hostnameFlagName = "hostname"
		} else {
			hostnameFlagName = fmt.Sprintf("%v.hostname", cmdPrefix)
		}

		hostnameFlagValue, err := cmd.Flags().GetString(hostnameFlagName)
		if err != nil {
			return err, false
		}
		m.Hostname = hostnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesAssignmentServerIDFlags(depth int, m *models.IPAddressAttributesAssignment, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverIdFlagName := fmt.Sprintf("%v.server_id", cmdPrefix)
	if cmd.Flags().Changed(serverIdFlagName) {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "server_id"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IPAddressAttributesProject

// register flags to command
func registerModelIPAddressAttributesProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributesProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerIPAddressAttributesProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressAttributesProjectFlags(depth int, m *models.IPAddressAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveIPAddressAttributesProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveIPAddressAttributesProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesProjectIDFlags(depth int, m *models.IPAddressAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesProjectNameFlags(depth int, m *models.IPAddressAttributesProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IPAddressAttributesRegion

// register flags to command
func registerModelIPAddressAttributesRegionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributesRegionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesRegionLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesRegionName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesRegionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerIPAddressAttributesRegionLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var locationFlagName string
	if cmdPrefix == "" {
		locationFlagName = "location"
	} else {
		locationFlagName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelIPAddressAttributesRegionLocationFlags(depth+1, locationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesRegionName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressAttributesRegionFlags(depth int, m *models.IPAddressAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveIPAddressAttributesRegionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, locationAdded := retrieveIPAddressAttributesRegionLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded

	err, nameAdded := retrieveIPAddressAttributesRegionNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionIDFlags(depth int, m *models.IPAddressAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionLocationFlags(depth int, m *models.IPAddressAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationFlagName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(locationFlagName) {
		// info: complex object location IPAddressAttributesRegionLocation is retrieved outside this Changed() block
	}
	locationFlagValue := m.Location
	if swag.IsZero(locationFlagValue) {
		locationFlagValue = &models.IPAddressAttributesRegionLocation{}
	}

	err, locationAdded := retrieveModelIPAddressAttributesRegionLocationFlags(depth+1, locationFlagValue, locationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationAdded
	if locationAdded {
		m.Location = locationFlagValue
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionNameFlags(depth int, m *models.IPAddressAttributesRegion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IPAddressAttributesRegionLocation

// register flags to command
func registerModelIPAddressAttributesRegionLocationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPAddressAttributesRegionLocationID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesRegionLocationName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPAddressAttributesRegionLocationSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPAddressAttributesRegionLocationID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerIPAddressAttributesRegionLocationName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerIPAddressAttributesRegionLocationSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPAddressAttributesRegionLocationFlags(depth int, m *models.IPAddressAttributesRegionLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveIPAddressAttributesRegionLocationIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveIPAddressAttributesRegionLocationNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveIPAddressAttributesRegionLocationSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionLocationIDFlags(depth int, m *models.IPAddressAttributesRegionLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionLocationNameFlags(depth int, m *models.IPAddressAttributesRegionLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPAddressAttributesRegionLocationSlugFlags(depth int, m *models.IPAddressAttributesRegionLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}
