// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/latitudesh/cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ErrorObject

// register flags to command
func registerModelErrorObjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorObjectErrors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorObjectErrors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: errors []*ErrorObjectErrorsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorObjectFlags(depth int, m *models.ErrorObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, errorsAdded := retrieveErrorObjectErrorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorsAdded

	return nil, retAdded
}

func retrieveErrorObjectErrorsFlags(depth int, m *models.ErrorObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorsFlagName := fmt.Sprintf("%v.errors", cmdPrefix)
	if cmd.Flags().Changed(errorsFlagName) {
		// warning: errors array type []*ErrorObjectErrorsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for ErrorObjectErrorsItems0

// register flags to command
func registerModelErrorObjectErrorsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorObjectErrorsItems0Code(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorObjectErrorsItems0Detail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorObjectErrorsItems0Meta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorObjectErrorsItems0Status(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorObjectErrorsItems0Title(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorObjectErrorsItems0Code(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	codeDescription := ``

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault string

	_ = cmd.PersistentFlags().String(codeFlagName, codeFlagDefault, codeDescription)

	return nil
}

func registerErrorObjectErrorsItems0Detail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	detailDescription := ``

	var detailFlagName string
	if cmdPrefix == "" {
		detailFlagName = "detail"
	} else {
		detailFlagName = fmt.Sprintf("%v.detail", cmdPrefix)
	}

	var detailFlagDefault string

	_ = cmd.PersistentFlags().String(detailFlagName, detailFlagDefault, detailDescription)

	return nil
}

func registerErrorObjectErrorsItems0Meta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: meta interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerErrorObjectErrorsItems0Status(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerErrorObjectErrorsItems0Title(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	titleDescription := ``

	var titleFlagName string
	if cmdPrefix == "" {
		titleFlagName = "title"
	} else {
		titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
	}

	var titleFlagDefault string

	_ = cmd.PersistentFlags().String(titleFlagName, titleFlagDefault, titleDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorObjectErrorsItems0Flags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, codeAdded := retrieveErrorObjectErrorsItems0CodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codeAdded

	err, detailAdded := retrieveErrorObjectErrorsItems0DetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detailAdded

	err, metaAdded := retrieveErrorObjectErrorsItems0MetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metaAdded

	err, statusAdded := retrieveErrorObjectErrorsItems0StatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, titleAdded := retrieveErrorObjectErrorsItems0TitleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || titleAdded

	return nil, retAdded
}

func retrieveErrorObjectErrorsItems0CodeFlags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	codeFlagName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(codeFlagName) {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetString(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = &codeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorObjectErrorsItems0DetailFlags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	detailFlagName := fmt.Sprintf("%v.detail", cmdPrefix)
	if cmd.Flags().Changed(detailFlagName) {

		var detailFlagName string
		if cmdPrefix == "" {
			detailFlagName = "detail"
		} else {
			detailFlagName = fmt.Sprintf("%v.detail", cmdPrefix)
		}

		detailFlagValue, err := cmd.Flags().GetString(detailFlagName)
		if err != nil {
			return err, false
		}
		m.Detail = detailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorObjectErrorsItems0MetaFlags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metaFlagName := fmt.Sprintf("%v.meta", cmdPrefix)
	if cmd.Flags().Changed(metaFlagName) {
		// warning: meta map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveErrorObjectErrorsItems0StatusFlags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorObjectErrorsItems0TitleFlags(depth int, m *models.ErrorObjectErrorsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	titleFlagName := fmt.Sprintf("%v.title", cmdPrefix)
	if cmd.Flags().Changed(titleFlagName) {

		var titleFlagName string
		if cmdPrefix == "" {
			titleFlagName = "title"
		} else {
			titleFlagName = fmt.Sprintf("%v.title", cmdPrefix)
		}

		titleFlagValue, err := cmd.Flags().GetString(titleFlagName)
		if err != nil {
			return err, false
		}
		m.Title = titleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
