// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for VpnSessionDataWithPassword

// register flags to command
func registerModelVpnSessionDataWithPasswordFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionDataWithPasswordAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionDataWithPasswordAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelVpnSessionDataWithPasswordAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionDataWithPasswordID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerVpnSessionDataWithPasswordType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["vpn_sessions"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["vpn_sessions"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionDataWithPasswordFlags(depth int, m *models.VpnSessionDataWithPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveVpnSessionDataWithPasswordAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveVpnSessionDataWithPasswordIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrieveVpnSessionDataWithPasswordTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesFlags(depth int, m *models.VpnSessionDataWithPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes VpnSessionDataWithPasswordAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.VpnSessionDataWithPasswordAttributes{}
	}

	err, attributesAdded := retrieveModelVpnSessionDataWithPasswordAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordIDFlags(depth int, m *models.VpnSessionDataWithPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordTypeFlags(depth int, m *models.VpnSessionDataWithPassword, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for VpnSessionDataWithPasswordAttributes

// register flags to command
func registerModelVpnSessionDataWithPasswordAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVpnSessionDataWithPasswordAttributesCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesExpiresAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVpnSessionDataWithPasswordAttributesUserName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionDataWithPasswordAttributesCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesExpiresAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	expiresAtDescription := `Time to expiry`

	var expiresAtFlagName string
	if cmdPrefix == "" {
		expiresAtFlagName = "expires_at"
	} else {
		expiresAtFlagName = fmt.Sprintf("%v.expires_at", cmdPrefix)
	}

	var expiresAtFlagDefault string

	_ = cmd.PersistentFlags().String(expiresAtFlagName, expiresAtFlagDefault, expiresAtDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hostDescription := `VPN host`

	var hostFlagName string
	if cmdPrefix == "" {
		hostFlagName = "host"
	} else {
		hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
	}

	var hostFlagDefault string

	_ = cmd.PersistentFlags().String(hostFlagName, hostFlagDefault, hostDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `VPN password`

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `VPN port`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault string

	_ = cmd.PersistentFlags().String(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var regionFlagName string
	if cmdPrefix == "" {
		regionFlagName = "region"
	} else {
		regionFlagName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	if err := registerModelRegionResourceDataFlags(depth+1, regionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionDataWithPasswordAttributesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["enable","disable"]. from Firewall Response`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerVpnSessionDataWithPasswordAttributesUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := ``

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updated_at"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerVpnSessionDataWithPasswordAttributesUserName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userNameDescription := `VPN username`

	var userNameFlagName string
	if cmdPrefix == "" {
		userNameFlagName = "user_name"
	} else {
		userNameFlagName = fmt.Sprintf("%v.user_name", cmdPrefix)
	}

	var userNameFlagDefault string

	_ = cmd.PersistentFlags().String(userNameFlagName, userNameFlagDefault, userNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVpnSessionDataWithPasswordAttributesFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveVpnSessionDataWithPasswordAttributesCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, expiresAtAdded := retrieveVpnSessionDataWithPasswordAttributesExpiresAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || expiresAtAdded

	err, hostAdded := retrieveVpnSessionDataWithPasswordAttributesHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hostAdded

	err, passwordAdded := retrieveVpnSessionDataWithPasswordAttributesPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, portAdded := retrieveVpnSessionDataWithPasswordAttributesPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, regionAdded := retrieveVpnSessionDataWithPasswordAttributesRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded

	err, statusAdded := retrieveVpnSessionDataWithPasswordAttributesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updatedAtAdded := retrieveVpnSessionDataWithPasswordAttributesUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, userNameAdded := retrieveVpnSessionDataWithPasswordAttributesUserNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userNameAdded

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesCreatedAtFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesExpiresAtFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	expiresAtFlagName := fmt.Sprintf("%v.expires_at", cmdPrefix)
	if cmd.Flags().Changed(expiresAtFlagName) {

		var expiresAtFlagName string
		if cmdPrefix == "" {
			expiresAtFlagName = "expires_at"
		} else {
			expiresAtFlagName = fmt.Sprintf("%v.expires_at", cmdPrefix)
		}

		expiresAtFlagValue, err := cmd.Flags().GetString(expiresAtFlagName)
		if err != nil {
			return err, false
		}
		m.ExpiresAt = expiresAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesHostFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hostFlagName := fmt.Sprintf("%v.host", cmdPrefix)
	if cmd.Flags().Changed(hostFlagName) {

		var hostFlagName string
		if cmdPrefix == "" {
			hostFlagName = "host"
		} else {
			hostFlagName = fmt.Sprintf("%v.host", cmdPrefix)
		}

		hostFlagValue, err := cmd.Flags().GetString(hostFlagName)
		if err != nil {
			return err, false
		}
		m.Host = hostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesPasswordFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesPortFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetString(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesRegionFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionFlagName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(regionFlagName) {
		// info: complex object region RegionResourceData is retrieved outside this Changed() block
	}
	regionFlagValue := m.Region
	if swag.IsZero(regionFlagValue) {
		regionFlagValue = &models.RegionResourceData{}
	}

	err, regionAdded := retrieveModelRegionResourceDataFlags(depth+1, regionFlagValue, regionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionAdded
	if regionAdded {
		m.Region = regionFlagValue
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesStatusFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesUpdatedAtFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updated_at", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updated_at"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updated_at", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVpnSessionDataWithPasswordAttributesUserNameFlags(depth int, m *models.VpnSessionDataWithPasswordAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userNameFlagName := fmt.Sprintf("%v.user_name", cmdPrefix)
	if cmd.Flags().Changed(userNameFlagName) {

		var userNameFlagName string
		if cmdPrefix == "" {
			userNameFlagName = "user_name"
		} else {
			userNameFlagName = fmt.Sprintf("%v.user_name", cmdPrefix)
		}

		userNameFlagValue, err := cmd.Flags().GetString(userNameFlagName)
		if err != nil {
			return err, false
		}
		m.UserName = userNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
