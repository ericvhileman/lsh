// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for OutOfBandConnection

// register flags to command
func registerModelOutOfBandConnectionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOutOfBandConnectionData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var dataFlagName string
	if cmdPrefix == "" {
		dataFlagName = "data"
	} else {
		dataFlagName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelOutOfBandConnectionDataFlags(depth+1, dataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOutOfBandConnectionFlags(depth int, m *models.OutOfBandConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dataAdded := retrieveOutOfBandConnectionDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataFlags(depth int, m *models.OutOfBandConnection, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dataFlagName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(dataFlagName) {
		// info: complex object data OutOfBandConnectionData is retrieved outside this Changed() block
	}
	dataFlagValue := m.Data
	if swag.IsZero(dataFlagValue) {
		dataFlagValue = &models.OutOfBandConnectionData{}
	}

	err, dataAdded := retrieveModelOutOfBandConnectionDataFlags(depth+1, dataFlagValue, dataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dataAdded
	if dataAdded {
		m.Data = dataFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for OutOfBandConnectionData

// register flags to command
func registerModelOutOfBandConnectionDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOutOfBandConnectionDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelOutOfBandConnectionDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerOutOfBandConnectionDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOutOfBandConnectionDataFlags(depth int, m *models.OutOfBandConnectionData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveOutOfBandConnectionDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveOutOfBandConnectionDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrieveOutOfBandConnectionDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesFlags(depth int, m *models.OutOfBandConnectionData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes OutOfBandConnectionDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.OutOfBandConnectionDataAttributes{}
	}

	err, attributesAdded := retrieveModelOutOfBandConnectionDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataIDFlags(depth int, m *models.OutOfBandConnectionData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataTypeFlags(depth int, m *models.OutOfBandConnectionData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for OutOfBandConnectionDataAttributes

// register flags to command
func registerModelOutOfBandConnectionDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOutOfBandConnectionDataAttributesAccessIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesCredentials(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesServerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesSSHKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributesAccessIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessIpDescription := ``

	var accessIpFlagName string
	if cmdPrefix == "" {
		accessIpFlagName = "access_ip"
	} else {
		accessIpFlagName = fmt.Sprintf("%v.access_ip", cmdPrefix)
	}

	var accessIpFlagDefault string

	_ = cmd.PersistentFlags().String(accessIpFlagName, accessIpFlagDefault, accessIpDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := ``

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "created_at"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesCredentials(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var credentialsFlagName string
	if cmdPrefix == "" {
		credentialsFlagName = "credentials"
	} else {
		credentialsFlagName = fmt.Sprintf("%v.credentials", cmdPrefix)
	}

	if err := registerModelOutOfBandConnectionDataAttributesCredentialsFlags(depth+1, credentialsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributesPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := ``

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault string

	_ = cmd.PersistentFlags().String(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesServerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverIdDescription := ``

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "server_id"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesSSHKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var sshKeyFlagName string
	if cmdPrefix == "" {
		sshKeyFlagName = "ssh_key"
	} else {
		sshKeyFlagName = fmt.Sprintf("%v.ssh_key", cmdPrefix)
	}

	if err := registerModelOutOfBandConnectionDataAttributesSSHKeyFlags(depth+1, sshKeyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOutOfBandConnectionDataAttributesFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessIpAdded := retrieveOutOfBandConnectionDataAttributesAccessIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessIpAdded

	err, createdAtAdded := retrieveOutOfBandConnectionDataAttributesCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, credentialsAdded := retrieveOutOfBandConnectionDataAttributesCredentialsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialsAdded

	err, portAdded := retrieveOutOfBandConnectionDataAttributesPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, serverIdAdded := retrieveOutOfBandConnectionDataAttributesServerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverIdAdded

	err, sshKeyAdded := retrieveOutOfBandConnectionDataAttributesSSHKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshKeyAdded

	err, statusAdded := retrieveOutOfBandConnectionDataAttributesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, usernameAdded := retrieveOutOfBandConnectionDataAttributesUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesAccessIPFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessIpFlagName := fmt.Sprintf("%v.access_ip", cmdPrefix)
	if cmd.Flags().Changed(accessIpFlagName) {

		var accessIpFlagName string
		if cmdPrefix == "" {
			accessIpFlagName = "access_ip"
		} else {
			accessIpFlagName = fmt.Sprintf("%v.access_ip", cmdPrefix)
		}

		accessIpFlagValue, err := cmd.Flags().GetString(accessIpFlagName)
		if err != nil {
			return err, false
		}
		m.AccessIP = accessIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesCreatedAtFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "created_at"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesCredentialsFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialsFlagName := fmt.Sprintf("%v.credentials", cmdPrefix)
	if cmd.Flags().Changed(credentialsFlagName) {
		// info: complex object credentials OutOfBandConnectionDataAttributesCredentials is retrieved outside this Changed() block
	}
	credentialsFlagValue := m.Credentials
	if swag.IsZero(credentialsFlagValue) {
		credentialsFlagValue = &models.OutOfBandConnectionDataAttributesCredentials{}
	}

	err, credentialsAdded := retrieveModelOutOfBandConnectionDataAttributesCredentialsFlags(depth+1, credentialsFlagValue, credentialsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialsAdded
	if credentialsAdded {
		m.Credentials = credentialsFlagValue
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesPortFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetString(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesServerIDFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverIdFlagName := fmt.Sprintf("%v.server_id", cmdPrefix)
	if cmd.Flags().Changed(serverIdFlagName) {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "server_id"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.server_id", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesSSHKeyFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sshKeyFlagName := fmt.Sprintf("%v.ssh_key", cmdPrefix)
	if cmd.Flags().Changed(sshKeyFlagName) {
		// info: complex object ssh_key OutOfBandConnectionDataAttributesSSHKey is retrieved outside this Changed() block
	}
	sshKeyFlagValue := m.SSHKey
	if swag.IsZero(sshKeyFlagValue) {
		sshKeyFlagValue = &models.OutOfBandConnectionDataAttributesSSHKey{}
	}

	err, sshKeyAdded := retrieveModelOutOfBandConnectionDataAttributesSSHKeyFlags(depth+1, sshKeyFlagValue, sshKeyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sshKeyAdded
	if sshKeyAdded {
		m.SSHKey = sshKeyFlagValue
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesStatusFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesUsernameFlags(depth int, m *models.OutOfBandConnectionDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for OutOfBandConnectionDataAttributesCredentials

// register flags to command
func registerModelOutOfBandConnectionDataAttributesCredentialsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOutOfBandConnectionDataAttributesCredentialsPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesCredentialsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributesCredentialsPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := ``

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesCredentialsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOutOfBandConnectionDataAttributesCredentialsFlags(depth int, m *models.OutOfBandConnectionDataAttributesCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, passwordAdded := retrieveOutOfBandConnectionDataAttributesCredentialsPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, userAdded := retrieveOutOfBandConnectionDataAttributesCredentialsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesCredentialsPasswordFlags(depth int, m *models.OutOfBandConnectionDataAttributesCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesCredentialsUserFlags(depth int, m *models.OutOfBandConnectionDataAttributesCredentials, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for OutOfBandConnectionDataAttributesSSHKey

// register flags to command
func registerModelOutOfBandConnectionDataAttributesSSHKeyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOutOfBandConnectionDataAttributesSSHKeyDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesSSHKeyFingerprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerOutOfBandConnectionDataAttributesSSHKeyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOutOfBandConnectionDataAttributesSSHKeyDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesSSHKeyFingerprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fingerprintDescription := ``

	var fingerprintFlagName string
	if cmdPrefix == "" {
		fingerprintFlagName = "fingerprint"
	} else {
		fingerprintFlagName = fmt.Sprintf("%v.fingerprint", cmdPrefix)
	}

	var fingerprintFlagDefault string

	_ = cmd.PersistentFlags().String(fingerprintFlagName, fingerprintFlagDefault, fingerprintDescription)

	return nil
}

func registerOutOfBandConnectionDataAttributesSSHKeyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOutOfBandConnectionDataAttributesSSHKeyFlags(depth int, m *models.OutOfBandConnectionDataAttributesSSHKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveOutOfBandConnectionDataAttributesSSHKeyDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, fingerprintAdded := retrieveOutOfBandConnectionDataAttributesSSHKeyFingerprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fingerprintAdded

	err, idAdded := retrieveOutOfBandConnectionDataAttributesSSHKeyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesSSHKeyDescriptionFlags(depth int, m *models.OutOfBandConnectionDataAttributesSSHKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesSSHKeyFingerprintFlags(depth int, m *models.OutOfBandConnectionDataAttributesSSHKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fingerprintFlagName := fmt.Sprintf("%v.fingerprint", cmdPrefix)
	if cmd.Flags().Changed(fingerprintFlagName) {

		var fingerprintFlagName string
		if cmdPrefix == "" {
			fingerprintFlagName = "fingerprint"
		} else {
			fingerprintFlagName = fmt.Sprintf("%v.fingerprint", cmdPrefix)
		}

		fingerprintFlagValue, err := cmd.Flags().GetString(fingerprintFlagName)
		if err != nil {
			return err, false
		}
		m.Fingerprint = fingerprintFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveOutOfBandConnectionDataAttributesSSHKeyIDFlags(depth int, m *models.OutOfBandConnectionDataAttributesSSHKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}
