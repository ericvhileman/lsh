// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/lsh/models"

	"github.com/spf13/cobra"
)

// Schema cli for ProjectInclude

// register flags to command
func registerModelProjectIncludeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectIncludeBandwidthAlert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeBilling(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeBillingMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeBillingType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeStats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectIncludeBandwidthAlert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bandwidthAlertDescription := ``

	var bandwidthAlertFlagName string
	if cmdPrefix == "" {
		bandwidthAlertFlagName = "bandwidth_alert"
	} else {
		bandwidthAlertFlagName = fmt.Sprintf("%v.bandwidth_alert", cmdPrefix)
	}

	var bandwidthAlertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(bandwidthAlertFlagName, bandwidthAlertFlagDefault, bandwidthAlertDescription)

	return nil
}

func registerProjectIncludeBilling(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var billingFlagName string
	if cmdPrefix == "" {
		billingFlagName = "billing"
	} else {
		billingFlagName = fmt.Sprintf("%v.billing", cmdPrefix)
	}

	if err := registerModelProjectIncludeBillingFlags(depth+1, billingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectIncludeBillingMethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingMethodDescription := ``

	var billingMethodFlagName string
	if cmdPrefix == "" {
		billingMethodFlagName = "billing_method"
	} else {
		billingMethodFlagName = fmt.Sprintf("%v.billing_method", cmdPrefix)
	}

	var billingMethodFlagDefault string

	_ = cmd.PersistentFlags().String(billingMethodFlagName, billingMethodFlagDefault, billingMethodDescription)

	return nil
}

func registerProjectIncludeBillingType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	billingTypeDescription := ``

	var billingTypeFlagName string
	if cmdPrefix == "" {
		billingTypeFlagName = "billing_type"
	} else {
		billingTypeFlagName = fmt.Sprintf("%v.billing_type", cmdPrefix)
	}

	var billingTypeFlagDefault string

	_ = cmd.PersistentFlags().String(billingTypeFlagName, billingTypeFlagDefault, billingTypeDescription)

	return nil
}

func registerProjectIncludeDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerProjectIncludeEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentDescription := ``

	var environmentFlagName string
	if cmdPrefix == "" {
		environmentFlagName = "environment"
	} else {
		environmentFlagName = fmt.Sprintf("%v.environment", cmdPrefix)
	}

	var environmentFlagDefault string

	_ = cmd.PersistentFlags().String(environmentFlagName, environmentFlagDefault, environmentDescription)

	return nil
}

func registerProjectIncludeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerProjectIncludeName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProjectIncludeSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

func registerProjectIncludeStats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var statsFlagName string
	if cmdPrefix == "" {
		statsFlagName = "stats"
	} else {
		statsFlagName = fmt.Sprintf("%v.stats", cmdPrefix)
	}

	if err := registerModelProjectIncludeStatsFlags(depth+1, statsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectIncludeFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bandwidthAlertAdded := retrieveProjectIncludeBandwidthAlertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bandwidthAlertAdded

	err, billingAdded := retrieveProjectIncludeBillingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded

	err, billingMethodAdded := retrieveProjectIncludeBillingMethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingMethodAdded

	err, billingTypeAdded := retrieveProjectIncludeBillingTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingTypeAdded

	err, descriptionAdded := retrieveProjectIncludeDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentAdded := retrieveProjectIncludeEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentAdded

	err, idAdded := retrieveProjectIncludeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveProjectIncludeNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, slugAdded := retrieveProjectIncludeSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	err, statsAdded := retrieveProjectIncludeStatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsAdded

	return nil, retAdded
}

func retrieveProjectIncludeBandwidthAlertFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bandwidthAlertFlagName := fmt.Sprintf("%v.bandwidth_alert", cmdPrefix)
	if cmd.Flags().Changed(bandwidthAlertFlagName) {

		var bandwidthAlertFlagName string
		if cmdPrefix == "" {
			bandwidthAlertFlagName = "bandwidth_alert"
		} else {
			bandwidthAlertFlagName = fmt.Sprintf("%v.bandwidth_alert", cmdPrefix)
		}

		bandwidthAlertFlagValue, err := cmd.Flags().GetBool(bandwidthAlertFlagName)
		if err != nil {
			return err, false
		}
		m.BandwidthAlert = bandwidthAlertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeBillingFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingFlagName := fmt.Sprintf("%v.billing", cmdPrefix)
	if cmd.Flags().Changed(billingFlagName) {
		// info: complex object billing ProjectIncludeBilling is retrieved outside this Changed() block
	}
	billingFlagValue := m.Billing
	if swag.IsZero(billingFlagValue) {
		billingFlagValue = &models.ProjectIncludeBilling{}
	}

	err, billingAdded := retrieveModelProjectIncludeBillingFlags(depth+1, billingFlagValue, billingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || billingAdded
	if billingAdded {
		m.Billing = billingFlagValue
	}

	return nil, retAdded
}

func retrieveProjectIncludeBillingMethodFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingMethodFlagName := fmt.Sprintf("%v.billing_method", cmdPrefix)
	if cmd.Flags().Changed(billingMethodFlagName) {

		var billingMethodFlagName string
		if cmdPrefix == "" {
			billingMethodFlagName = "billing_method"
		} else {
			billingMethodFlagName = fmt.Sprintf("%v.billing_method", cmdPrefix)
		}

		billingMethodFlagValue, err := cmd.Flags().GetString(billingMethodFlagName)
		if err != nil {
			return err, false
		}
		m.BillingMethod = &billingMethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeBillingTypeFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	billingTypeFlagName := fmt.Sprintf("%v.billing_type", cmdPrefix)
	if cmd.Flags().Changed(billingTypeFlagName) {

		var billingTypeFlagName string
		if cmdPrefix == "" {
			billingTypeFlagName = "billing_type"
		} else {
			billingTypeFlagName = fmt.Sprintf("%v.billing_type", cmdPrefix)
		}

		billingTypeFlagValue, err := cmd.Flags().GetString(billingTypeFlagName)
		if err != nil {
			return err, false
		}
		m.BillingType = &billingTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeDescriptionFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeEnvironmentFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentFlagName := fmt.Sprintf("%v.environment", cmdPrefix)
	if cmd.Flags().Changed(environmentFlagName) {

		var environmentFlagName string
		if cmdPrefix == "" {
			environmentFlagName = "environment"
		} else {
			environmentFlagName = fmt.Sprintf("%v.environment", cmdPrefix)
		}

		environmentFlagValue, err := cmd.Flags().GetString(environmentFlagName)
		if err != nil {
			return err, false
		}
		m.Environment = &environmentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeIDFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeNameFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeSlugFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeStatsFlags(depth int, m *models.ProjectInclude, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statsFlagName := fmt.Sprintf("%v.stats", cmdPrefix)
	if cmd.Flags().Changed(statsFlagName) {
		// info: complex object stats ProjectIncludeStats is retrieved outside this Changed() block
	}
	statsFlagValue := m.Stats
	if swag.IsZero(statsFlagValue) {
		statsFlagValue = &models.ProjectIncludeStats{}
	}

	err, statsAdded := retrieveModelProjectIncludeStatsFlags(depth+1, statsFlagValue, statsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statsAdded
	if statsAdded {
		m.Stats = statsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ProjectIncludeBilling

// register flags to command
func registerModelProjectIncludeBillingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectIncludeBillingMethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeBillingSubscriptionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeBillingType2(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectIncludeBillingSubscriptionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subscriptionIdDescription := ``

	var subscriptionIdFlagName string
	if cmdPrefix == "" {
		subscriptionIdFlagName = "subscription_id"
	} else {
		subscriptionIdFlagName = fmt.Sprintf("%v.subscription_id", cmdPrefix)
	}

	var subscriptionIdFlagDefault string

	_ = cmd.PersistentFlags().String(subscriptionIdFlagName, subscriptionIdFlagDefault, subscriptionIdDescription)

	return nil
}

func registerProjectIncludeBillingType2(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectIncludeBillingFlags(depth int, m *models.ProjectIncludeBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, methodAdded := retrieveProjectIncludeBillingMethodFlagsBilling(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || methodAdded

	err, subscriptionIdAdded := retrieveProjectIncludeBillingSubscriptionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subscriptionIdAdded

	err, typeAdded := retrieveProjectIncludeBillingTypeFlagsBilling(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveProjectIncludeBillingMethodFlagsBilling(depth int, m *models.ProjectIncludeBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	methodFlagName := fmt.Sprintf("%v.method", cmdPrefix)
	if cmd.Flags().Changed(methodFlagName) {

		var methodFlagName string
		if cmdPrefix == "" {
			methodFlagName = "method"
		} else {
			methodFlagName = fmt.Sprintf("%v.method", cmdPrefix)
		}

		methodFlagValue, err := cmd.Flags().GetString(methodFlagName)
		if err != nil {
			return err, false
		}
		m.Method = methodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeBillingSubscriptionIDFlags(depth int, m *models.ProjectIncludeBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subscriptionIdFlagName := fmt.Sprintf("%v.subscription_id", cmdPrefix)
	if cmd.Flags().Changed(subscriptionIdFlagName) {

		var subscriptionIdFlagName string
		if cmdPrefix == "" {
			subscriptionIdFlagName = "subscription_id"
		} else {
			subscriptionIdFlagName = fmt.Sprintf("%v.subscription_id", cmdPrefix)
		}

		subscriptionIdFlagValue, err := cmd.Flags().GetString(subscriptionIdFlagName)
		if err != nil {
			return err, false
		}
		m.SubscriptionID = subscriptionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeBillingTypeFlagsBilling(depth int, m *models.ProjectIncludeBilling, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ProjectIncludeStats

// register flags to command
func registerModelProjectIncludeStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectIncludeStatsIPAddresses(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeStatsPrefixes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeStatsServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectIncludeStatsVlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectIncludeStatsIPAddresses(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ipAddressesDescription := ``

	var ipAddressesFlagName string
	if cmdPrefix == "" {
		ipAddressesFlagName = "ip_addresses"
	} else {
		ipAddressesFlagName = fmt.Sprintf("%v.ip_addresses", cmdPrefix)
	}

	var ipAddressesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ipAddressesFlagName, ipAddressesFlagDefault, ipAddressesDescription)

	return nil
}

func registerProjectIncludeStatsPrefixes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	prefixesDescription := ``

	var prefixesFlagName string
	if cmdPrefix == "" {
		prefixesFlagName = "prefixes"
	} else {
		prefixesFlagName = fmt.Sprintf("%v.prefixes", cmdPrefix)
	}

	var prefixesFlagDefault int64

	_ = cmd.PersistentFlags().Int64(prefixesFlagName, prefixesFlagDefault, prefixesDescription)

	return nil
}

func registerProjectIncludeStatsServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serversDescription := ``

	var serversFlagName string
	if cmdPrefix == "" {
		serversFlagName = "servers"
	} else {
		serversFlagName = fmt.Sprintf("%v.servers", cmdPrefix)
	}

	var serversFlagDefault int64

	_ = cmd.PersistentFlags().Int64(serversFlagName, serversFlagDefault, serversDescription)

	return nil
}

func registerProjectIncludeStatsVlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlansDescription := ``

	var vlansFlagName string
	if cmdPrefix == "" {
		vlansFlagName = "vlans"
	} else {
		vlansFlagName = fmt.Sprintf("%v.vlans", cmdPrefix)
	}

	var vlansFlagDefault int64

	_ = cmd.PersistentFlags().Int64(vlansFlagName, vlansFlagDefault, vlansDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectIncludeStatsFlags(depth int, m *models.ProjectIncludeStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ipAddressesAdded := retrieveProjectIncludeStatsIPAddressesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ipAddressesAdded

	err, prefixesAdded := retrieveProjectIncludeStatsPrefixesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || prefixesAdded

	err, serversAdded := retrieveProjectIncludeStatsServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serversAdded

	err, vlansAdded := retrieveProjectIncludeStatsVlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlansAdded

	return nil, retAdded
}

func retrieveProjectIncludeStatsIPAddressesFlags(depth int, m *models.ProjectIncludeStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ipAddressesFlagName := fmt.Sprintf("%v.ip_addresses", cmdPrefix)
	if cmd.Flags().Changed(ipAddressesFlagName) {

		var ipAddressesFlagName string
		if cmdPrefix == "" {
			ipAddressesFlagName = "ip_addresses"
		} else {
			ipAddressesFlagName = fmt.Sprintf("%v.ip_addresses", cmdPrefix)
		}

		ipAddressesFlagValue, err := cmd.Flags().GetInt64(ipAddressesFlagName)
		if err != nil {
			return err, false
		}
		m.IPAddresses = ipAddressesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeStatsPrefixesFlags(depth int, m *models.ProjectIncludeStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	prefixesFlagName := fmt.Sprintf("%v.prefixes", cmdPrefix)
	if cmd.Flags().Changed(prefixesFlagName) {

		var prefixesFlagName string
		if cmdPrefix == "" {
			prefixesFlagName = "prefixes"
		} else {
			prefixesFlagName = fmt.Sprintf("%v.prefixes", cmdPrefix)
		}

		prefixesFlagValue, err := cmd.Flags().GetInt64(prefixesFlagName)
		if err != nil {
			return err, false
		}
		m.Prefixes = prefixesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeStatsServersFlags(depth int, m *models.ProjectIncludeStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serversFlagName := fmt.Sprintf("%v.servers", cmdPrefix)
	if cmd.Flags().Changed(serversFlagName) {

		var serversFlagName string
		if cmdPrefix == "" {
			serversFlagName = "servers"
		} else {
			serversFlagName = fmt.Sprintf("%v.servers", cmdPrefix)
		}

		serversFlagValue, err := cmd.Flags().GetInt64(serversFlagName)
		if err != nil {
			return err, false
		}
		m.Servers = serversFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectIncludeStatsVlansFlags(depth int, m *models.ProjectIncludeStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlansFlagName := fmt.Sprintf("%v.vlans", cmdPrefix)
	if cmd.Flags().Changed(vlansFlagName) {

		var vlansFlagName string
		if cmdPrefix == "" {
			vlansFlagName = "vlans"
		} else {
			vlansFlagName = fmt.Sprintf("%v.vlans", cmdPrefix)
		}

		vlansFlagValue, err := cmd.Flags().GetInt64(vlansFlagName)
		if err != nil {
			return err, false
		}
		m.Vlans = vlansFlagValue

		retAdded = true
	}

	return nil, retAdded
}
