// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/latitudesh/lsh/client/plans"
	"github.com/latitudesh/lsh/internal/utils"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPlansGetBandwidthPlansCmd returns a cmd to handle operation getBandwidthPlans
func makeOperationPlansGetBandwidthPlansCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "list-bandwidth",
		Short: `Lists all bandwidth plans.`,
		RunE:  runOperationPlansGetBandwidthPlans,
	}

	if err := registerOperationPlansGetBandwidthPlansParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPlansGetBandwidthPlans uses cmd flags to call endpoint api
func runOperationPlansGetBandwidthPlans(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plans.NewGetBandwidthPlansParams()
	if err, _ := retrieveOperationPlansGetBandwidthPlansAPIVersionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPlansGetBandwidthPlansFilterIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}

	result, err := appCli.Plans.GetBandwidthPlans(params, nil)
	if err != nil {
		utils.PrintError(err)
		return nil
	}

	msgStr, err := parseOperationPlansGetBandwidthPlansResult(result)
	if err != nil {
		return err
	}
	if !debug {

		utils.PrintResult(msgStr, "table")
	}
	return nil
}

// registerOperationPlansGetBandwidthPlansParamFlags registers all flags needed to fill params
func registerOperationPlansGetBandwidthPlansParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPlansGetBandwidthPlansAPIVersionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPlansGetBandwidthPlansFilterIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPlansGetBandwidthPlansAPIVersionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	apiVersionDescription := ``

	var apiVersionFlagName string
	if cmdPrefix == "" {
		apiVersionFlagName = "API-Version"
	} else {
		apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
	}

	var apiVersionFlagDefault string = "2023-06-01"

	_ = cmd.PersistentFlags().String(apiVersionFlagName, apiVersionFlagDefault, apiVersionDescription)

	return nil
}
func registerOperationPlansGetBandwidthPlansFilterIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	filterIdDescription := `The plan ID to filter by`

	var filterIdFlagName string
	if cmdPrefix == "" {
		filterIdFlagName = "id"
	} else {
		filterIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var filterIdFlagDefault string

	_ = cmd.PersistentFlags().String(filterIdFlagName, filterIdFlagDefault, filterIdDescription)

	return nil
}

func retrieveOperationPlansGetBandwidthPlansAPIVersionFlag(m *plans.GetBandwidthPlansParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("API-Version") {

		var apiVersionFlagName string
		if cmdPrefix == "" {
			apiVersionFlagName = "API-Version"
		} else {
			apiVersionFlagName = fmt.Sprintf("%v.API-Version", cmdPrefix)
		}

		apiVersionFlagValue, err := cmd.Flags().GetString(apiVersionFlagName)
		if err != nil {
			return err, false
		}
		m.APIVersion = &apiVersionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPlansGetBandwidthPlansFilterIDFlag(m *plans.GetBandwidthPlansParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var filterIdFlagName string
		if cmdPrefix == "" {
			filterIdFlagName = "id"
		} else {
			filterIdFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		filterIdFlagValue, err := cmd.Flags().GetString(filterIdFlagName)
		if err != nil {
			return err, false
		}
		m.FilterID = &filterIdFlagValue

	}
	return nil, retAdded
}

// parseOperationPlansGetBandwidthPlansResult parses request result and return the string content
func parseOperationPlansGetBandwidthPlansResult(resp0 *plans.GetBandwidthPlansOK) (string, error) {
	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
