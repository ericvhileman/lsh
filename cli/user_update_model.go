// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for UserUpdate

// register flags to command
func registerModelUserUpdateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserUpdateAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUpdateID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserUpdateAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelUserUpdateAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserUpdateID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserUpdateFlags(depth int, m *models.UserUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrieveUserUpdateAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrieveUserUpdateIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveUserUpdateAttributesFlags(depth int, m *models.UserUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes UserUpdateAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.UserUpdateAttributes{}
	}

	err, attributesAdded := retrieveModelUserUpdateAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrieveUserUpdateIDFlags(depth int, m *models.UserUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for UserUpdateAttributes

// register flags to command
func registerModelUserUpdateAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserUpdateAttributesAuthenticationFactorID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUpdateAttributesEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUpdateAttributesFirstName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUpdateAttributesLastName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserUpdateAttributesRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserUpdateAttributesAuthenticationFactorID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authenticationFactorIdDescription := ``

	var authenticationFactorIdFlagName string
	if cmdPrefix == "" {
		authenticationFactorIdFlagName = "authentication_factor_id"
	} else {
		authenticationFactorIdFlagName = fmt.Sprintf("%v.authentication_factor_id", cmdPrefix)
	}

	var authenticationFactorIdFlagDefault string

	_ = cmd.PersistentFlags().String(authenticationFactorIdFlagName, authenticationFactorIdFlagDefault, authenticationFactorIdDescription)

	return nil
}

func registerUserUpdateAttributesEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerUserUpdateAttributesFirstName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	firstNameDescription := ``

	var firstNameFlagName string
	if cmdPrefix == "" {
		firstNameFlagName = "first_name"
	} else {
		firstNameFlagName = fmt.Sprintf("%v.first_name", cmdPrefix)
	}

	var firstNameFlagDefault string

	_ = cmd.PersistentFlags().String(firstNameFlagName, firstNameFlagDefault, firstNameDescription)

	return nil
}

func registerUserUpdateAttributesLastName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastNameDescription := ``

	var lastNameFlagName string
	if cmdPrefix == "" {
		lastNameFlagName = "last_name"
	} else {
		lastNameFlagName = fmt.Sprintf("%v.last_name", cmdPrefix)
	}

	var lastNameFlagDefault string

	_ = cmd.PersistentFlags().String(lastNameFlagName, lastNameFlagDefault, lastNameDescription)

	return nil
}

func registerUserUpdateAttributesRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleDescription := ``

	var roleFlagName string
	if cmdPrefix == "" {
		roleFlagName = "role"
	} else {
		roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var roleFlagDefault string

	_ = cmd.PersistentFlags().String(roleFlagName, roleFlagDefault, roleDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserUpdateAttributesFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authenticationFactorIdAdded := retrieveUserUpdateAttributesAuthenticationFactorIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authenticationFactorIdAdded

	err, emailAdded := retrieveUserUpdateAttributesEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, firstNameAdded := retrieveUserUpdateAttributesFirstNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || firstNameAdded

	err, lastNameAdded := retrieveUserUpdateAttributesLastNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastNameAdded

	err, roleAdded := retrieveUserUpdateAttributesRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleAdded

	return nil, retAdded
}

func retrieveUserUpdateAttributesAuthenticationFactorIDFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authenticationFactorIdFlagName := fmt.Sprintf("%v.authentication_factor_id", cmdPrefix)
	if cmd.Flags().Changed(authenticationFactorIdFlagName) {

		var authenticationFactorIdFlagName string
		if cmdPrefix == "" {
			authenticationFactorIdFlagName = "authentication_factor_id"
		} else {
			authenticationFactorIdFlagName = fmt.Sprintf("%v.authentication_factor_id", cmdPrefix)
		}

		authenticationFactorIdFlagValue, err := cmd.Flags().GetString(authenticationFactorIdFlagName)
		if err != nil {
			return err, false
		}
		m.AuthenticationFactorID = &authenticationFactorIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserUpdateAttributesEmailFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserUpdateAttributesFirstNameFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	firstNameFlagName := fmt.Sprintf("%v.first_name", cmdPrefix)
	if cmd.Flags().Changed(firstNameFlagName) {

		var firstNameFlagName string
		if cmdPrefix == "" {
			firstNameFlagName = "first_name"
		} else {
			firstNameFlagName = fmt.Sprintf("%v.first_name", cmdPrefix)
		}

		firstNameFlagValue, err := cmd.Flags().GetString(firstNameFlagName)
		if err != nil {
			return err, false
		}
		m.FirstName = firstNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserUpdateAttributesLastNameFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastNameFlagName := fmt.Sprintf("%v.last_name", cmdPrefix)
	if cmd.Flags().Changed(lastNameFlagName) {

		var lastNameFlagName string
		if cmdPrefix == "" {
			lastNameFlagName = "last_name"
		} else {
			lastNameFlagName = fmt.Sprintf("%v.last_name", cmdPrefix)
		}

		lastNameFlagValue, err := cmd.Flags().GetString(lastNameFlagName)
		if err != nil {
			return err, false
		}
		m.LastName = lastNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserUpdateAttributesRoleFlags(depth int, m *models.UserUpdateAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleFlagName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(roleFlagName) {

		var roleFlagName string
		if cmdPrefix == "" {
			roleFlagName = "role"
		} else {
			roleFlagName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		roleFlagValue, err := cmd.Flags().GetString(roleFlagName)
		if err != nil {
			return err, false
		}
		m.Role = roleFlagValue

		retAdded = true
	}

	return nil, retAdded
}
