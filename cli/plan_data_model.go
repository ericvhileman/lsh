// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/go-openapi/swag"
	"github.com/latitudesh/cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for PlanData

// register flags to command
func registerModelPlanDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var attributesFlagName string
	if cmdPrefix == "" {
		attributesFlagName = "attributes"
	} else {
		attributesFlagName = fmt.Sprintf("%v.attributes", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesFlags(depth+1, attributesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPlanDataType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["plans"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["plans"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataFlags(depth int, m *models.PlanData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, attributesAdded := retrievePlanDataAttributesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded

	err, idAdded := retrievePlanDataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, typeAdded := retrievePlanDataTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlanDataAttributesFlags(depth int, m *models.PlanData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	attributesFlagName := fmt.Sprintf("%v.attributes", cmdPrefix)
	if cmd.Flags().Changed(attributesFlagName) {
		// info: complex object attributes PlanDataAttributes is retrieved outside this Changed() block
	}
	attributesFlagValue := m.Attributes
	if swag.IsZero(attributesFlagValue) {
		attributesFlagValue = &models.PlanDataAttributes{}
	}

	err, attributesAdded := retrieveModelPlanDataAttributesFlags(depth+1, attributesFlagValue, attributesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || attributesAdded
	if attributesAdded {
		m.Attributes = attributesFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataIDFlags(depth int, m *models.PlanData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataTypeFlags(depth int, m *models.PlanData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributes

// register flags to command
func registerModelPlanDataAttributesFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSlug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: features []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanDataAttributesRegions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: regions []*PlanDataAttributesRegionsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanDataAttributesSlug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	slugDescription := ``

	var slugFlagName string
	if cmdPrefix == "" {
		slugFlagName = "slug"
	} else {
		slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
	}

	var slugFlagDefault string

	_ = cmd.PersistentFlags().String(slugFlagName, slugFlagDefault, slugDescription)

	return nil
}

func registerPlanDataAttributesSpecs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var specsFlagName string
	if cmdPrefix == "" {
		specsFlagName = "specs"
	} else {
		specsFlagName = fmt.Sprintf("%v.specs", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesSpecsFlags(depth+1, specsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesFlags(depth int, m *models.PlanDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, featuresAdded := retrievePlanDataAttributesFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || featuresAdded

	err, regionsAdded := retrievePlanDataAttributesRegionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || regionsAdded

	err, slugAdded := retrievePlanDataAttributesSlugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || slugAdded

	err, specsAdded := retrievePlanDataAttributesSpecsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specsAdded

	return nil, retAdded
}

func retrievePlanDataAttributesFeaturesFlags(depth int, m *models.PlanDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	featuresFlagName := fmt.Sprintf("%v.features", cmdPrefix)
	if cmd.Flags().Changed(featuresFlagName) {
		// warning: features array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsFlags(depth int, m *models.PlanDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	regionsFlagName := fmt.Sprintf("%v.regions", cmdPrefix)
	if cmd.Flags().Changed(regionsFlagName) {
		// warning: regions array type []*PlanDataAttributesRegionsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSlugFlags(depth int, m *models.PlanDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	slugFlagName := fmt.Sprintf("%v.slug", cmdPrefix)
	if cmd.Flags().Changed(slugFlagName) {

		var slugFlagName string
		if cmdPrefix == "" {
			slugFlagName = "slug"
		} else {
			slugFlagName = fmt.Sprintf("%v.slug", cmdPrefix)
		}

		slugFlagValue, err := cmd.Flags().GetString(slugFlagName)
		if err != nil {
			return err, false
		}
		m.Slug = slugFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsFlags(depth int, m *models.PlanDataAttributes, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	specsFlagName := fmt.Sprintf("%v.specs", cmdPrefix)
	if cmd.Flags().Changed(specsFlagName) {
		// info: complex object specs PlanDataAttributesSpecs is retrieved outside this Changed() block
	}
	specsFlagValue := m.Specs
	if swag.IsZero(specsFlagValue) {
		specsFlagValue = &models.PlanDataAttributesSpecs{}
	}

	err, specsAdded := retrieveModelPlanDataAttributesSpecsFlags(depth+1, specsFlagValue, specsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || specsAdded
	if specsAdded {
		m.Specs = specsFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesRegionsItems0

// register flags to command
func registerModelPlanDataAttributesRegionsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesRegionsItems0DeploysInstantly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0Locations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0Name(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0Pricing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0DeploysInstantly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: deploys_instantly []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanDataAttributesRegionsItems0Locations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var locationsFlagName string
	if cmdPrefix == "" {
		locationsFlagName = "locations"
	} else {
		locationsFlagName = fmt.Sprintf("%v.locations", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesRegionsItems0LocationsFlags(depth+1, locationsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0Name(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPlanDataAttributesRegionsItems0Pricing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pricingFlagName string
	if cmdPrefix == "" {
		pricingFlagName = "pricing"
	} else {
		pricingFlagName = fmt.Sprintf("%v.pricing", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesRegionsItems0PricingFlags(depth+1, pricingFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesRegionsItems0Flags(depth int, m *models.PlanDataAttributesRegionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deploysInstantlyAdded := retrievePlanDataAttributesRegionsItems0DeploysInstantlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deploysInstantlyAdded

	err, locationsAdded := retrievePlanDataAttributesRegionsItems0LocationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationsAdded

	err, nameAdded := retrievePlanDataAttributesRegionsItems0NameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pricingAdded := retrievePlanDataAttributesRegionsItems0PricingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pricingAdded

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0DeploysInstantlyFlags(depth int, m *models.PlanDataAttributesRegionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deploysInstantlyFlagName := fmt.Sprintf("%v.deploys_instantly", cmdPrefix)
	if cmd.Flags().Changed(deploysInstantlyFlagName) {
		// warning: deploys_instantly array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0LocationsFlags(depth int, m *models.PlanDataAttributesRegionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	locationsFlagName := fmt.Sprintf("%v.locations", cmdPrefix)
	if cmd.Flags().Changed(locationsFlagName) {
		// info: complex object locations PlanDataAttributesRegionsItems0Locations is retrieved outside this Changed() block
	}
	locationsFlagValue := m.Locations
	if swag.IsZero(locationsFlagValue) {
		locationsFlagValue = &models.PlanDataAttributesRegionsItems0Locations{}
	}

	err, locationsAdded := retrieveModelPlanDataAttributesRegionsItems0LocationsFlags(depth+1, locationsFlagValue, locationsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || locationsAdded
	if locationsAdded {
		m.Locations = locationsFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0NameFlags(depth int, m *models.PlanDataAttributesRegionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingFlags(depth int, m *models.PlanDataAttributesRegionsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pricingFlagName := fmt.Sprintf("%v.pricing", cmdPrefix)
	if cmd.Flags().Changed(pricingFlagName) {
		// info: complex object pricing PlanDataAttributesRegionsItems0Pricing is retrieved outside this Changed() block
	}
	pricingFlagValue := m.Pricing
	if swag.IsZero(pricingFlagValue) {
		pricingFlagValue = &models.PlanDataAttributesRegionsItems0Pricing{}
	}

	err, pricingAdded := retrieveModelPlanDataAttributesRegionsItems0PricingFlags(depth+1, pricingFlagValue, pricingFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pricingAdded
	if pricingAdded {
		m.Pricing = pricingFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesRegionsItems0Locations

// register flags to command
func registerModelPlanDataAttributesRegionsItems0LocationsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesRegionsItems0LocationsAvailable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0LocationsInStock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0LocationsAvailable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: available []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanDataAttributesRegionsItems0LocationsInStock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: in_stock []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesRegionsItems0LocationsFlags(depth int, m *models.PlanDataAttributesRegionsItems0Locations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, availableAdded := retrievePlanDataAttributesRegionsItems0LocationsAvailableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availableAdded

	err, inStockAdded := retrievePlanDataAttributesRegionsItems0LocationsInStockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inStockAdded

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0LocationsAvailableFlags(depth int, m *models.PlanDataAttributesRegionsItems0Locations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availableFlagName := fmt.Sprintf("%v.available", cmdPrefix)
	if cmd.Flags().Changed(availableFlagName) {
		// warning: available array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0LocationsInStockFlags(depth int, m *models.PlanDataAttributesRegionsItems0Locations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inStockFlagName := fmt.Sprintf("%v.in_stock", cmdPrefix)
	if cmd.Flags().Changed(inStockFlagName) {
		// warning: in_stock array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesRegionsItems0Pricing

// register flags to command
func registerModelPlanDataAttributesRegionsItems0PricingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesRegionsItems0PricingBRL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0PricingUSD(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingBRL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var bRLFlagName string
	if cmdPrefix == "" {
		bRLFlagName = "BRL"
	} else {
		bRLFlagName = fmt.Sprintf("%v.BRL", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesRegionsItems0PricingBRLFlags(depth+1, bRLFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingUSD(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var uSDFlagName string
	if cmdPrefix == "" {
		uSDFlagName = "USD"
	} else {
		uSDFlagName = fmt.Sprintf("%v.USD", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesRegionsItems0PricingUSDFlags(depth+1, uSDFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesRegionsItems0PricingFlags(depth int, m *models.PlanDataAttributesRegionsItems0Pricing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bRLAdded := retrievePlanDataAttributesRegionsItems0PricingBRLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bRLAdded

	err, uSDAdded := retrievePlanDataAttributesRegionsItems0PricingUSDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uSDAdded

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingBRLFlags(depth int, m *models.PlanDataAttributesRegionsItems0Pricing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bRLFlagName := fmt.Sprintf("%v.BRL", cmdPrefix)
	if cmd.Flags().Changed(bRLFlagName) {
		// info: complex object BRL PlanDataAttributesRegionsItems0PricingBRL is retrieved outside this Changed() block
	}
	bRLFlagValue := m.BRL
	if swag.IsZero(bRLFlagValue) {
		bRLFlagValue = &models.PlanDataAttributesRegionsItems0PricingBRL{}
	}

	err, bRLAdded := retrieveModelPlanDataAttributesRegionsItems0PricingBRLFlags(depth+1, bRLFlagValue, bRLFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bRLAdded
	if bRLAdded {
		m.BRL = bRLFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingUSDFlags(depth int, m *models.PlanDataAttributesRegionsItems0Pricing, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uSDFlagName := fmt.Sprintf("%v.USD", cmdPrefix)
	if cmd.Flags().Changed(uSDFlagName) {
		// info: complex object USD PlanDataAttributesRegionsItems0PricingUSD is retrieved outside this Changed() block
	}
	uSDFlagValue := m.USD
	if swag.IsZero(uSDFlagValue) {
		uSDFlagValue = &models.PlanDataAttributesRegionsItems0PricingUSD{}
	}

	err, uSDAdded := retrieveModelPlanDataAttributesRegionsItems0PricingUSDFlags(depth+1, uSDFlagValue, uSDFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uSDAdded
	if uSDAdded {
		m.USD = uSDFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesRegionsItems0PricingBRL

// register flags to command
func registerModelPlanDataAttributesRegionsItems0PricingBRLFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesRegionsItems0PricingBRLHour(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0PricingBRLMonth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0PricingBRLYear(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingBRLHour(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hourDescription := ``

	var hourFlagName string
	if cmdPrefix == "" {
		hourFlagName = "hour"
	} else {
		hourFlagName = fmt.Sprintf("%v.hour", cmdPrefix)
	}

	var hourFlagDefault float64

	_ = cmd.PersistentFlags().Float64(hourFlagName, hourFlagDefault, hourDescription)

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingBRLMonth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	monthDescription := ``

	var monthFlagName string
	if cmdPrefix == "" {
		monthFlagName = "month"
	} else {
		monthFlagName = fmt.Sprintf("%v.month", cmdPrefix)
	}

	var monthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(monthFlagName, monthFlagDefault, monthDescription)

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingBRLYear(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	yearDescription := ``

	var yearFlagName string
	if cmdPrefix == "" {
		yearFlagName = "year"
	} else {
		yearFlagName = fmt.Sprintf("%v.year", cmdPrefix)
	}

	var yearFlagDefault float64

	_ = cmd.PersistentFlags().Float64(yearFlagName, yearFlagDefault, yearDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesRegionsItems0PricingBRLFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingBRL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hourAdded := retrievePlanDataAttributesRegionsItems0PricingBRLHourFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hourAdded

	err, monthAdded := retrievePlanDataAttributesRegionsItems0PricingBRLMonthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monthAdded

	err, yearAdded := retrievePlanDataAttributesRegionsItems0PricingBRLYearFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yearAdded

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingBRLHourFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingBRL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hourFlagName := fmt.Sprintf("%v.hour", cmdPrefix)
	if cmd.Flags().Changed(hourFlagName) {

		var hourFlagName string
		if cmdPrefix == "" {
			hourFlagName = "hour"
		} else {
			hourFlagName = fmt.Sprintf("%v.hour", cmdPrefix)
		}

		hourFlagValue, err := cmd.Flags().GetFloat64(hourFlagName)
		if err != nil {
			return err, false
		}
		m.Hour = hourFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingBRLMonthFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingBRL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	monthFlagName := fmt.Sprintf("%v.month", cmdPrefix)
	if cmd.Flags().Changed(monthFlagName) {

		var monthFlagName string
		if cmdPrefix == "" {
			monthFlagName = "month"
		} else {
			monthFlagName = fmt.Sprintf("%v.month", cmdPrefix)
		}

		monthFlagValue, err := cmd.Flags().GetFloat64(monthFlagName)
		if err != nil {
			return err, false
		}
		m.Month = monthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingBRLYearFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingBRL, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	yearFlagName := fmt.Sprintf("%v.year", cmdPrefix)
	if cmd.Flags().Changed(yearFlagName) {

		var yearFlagName string
		if cmdPrefix == "" {
			yearFlagName = "year"
		} else {
			yearFlagName = fmt.Sprintf("%v.year", cmdPrefix)
		}

		yearFlagValue, err := cmd.Flags().GetFloat64(yearFlagName)
		if err != nil {
			return err, false
		}
		m.Year = yearFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesRegionsItems0PricingUSD

// register flags to command
func registerModelPlanDataAttributesRegionsItems0PricingUSDFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesRegionsItems0PricingUSDHour(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0PricingUSDMonth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesRegionsItems0PricingUSDYear(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingUSDHour(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hourDescription := ``

	var hourFlagName string
	if cmdPrefix == "" {
		hourFlagName = "hour"
	} else {
		hourFlagName = fmt.Sprintf("%v.hour", cmdPrefix)
	}

	var hourFlagDefault float64

	_ = cmd.PersistentFlags().Float64(hourFlagName, hourFlagDefault, hourDescription)

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingUSDMonth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	monthDescription := ``

	var monthFlagName string
	if cmdPrefix == "" {
		monthFlagName = "month"
	} else {
		monthFlagName = fmt.Sprintf("%v.month", cmdPrefix)
	}

	var monthFlagDefault float64

	_ = cmd.PersistentFlags().Float64(monthFlagName, monthFlagDefault, monthDescription)

	return nil
}

func registerPlanDataAttributesRegionsItems0PricingUSDYear(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	yearDescription := ``

	var yearFlagName string
	if cmdPrefix == "" {
		yearFlagName = "year"
	} else {
		yearFlagName = fmt.Sprintf("%v.year", cmdPrefix)
	}

	var yearFlagDefault float64

	_ = cmd.PersistentFlags().Float64(yearFlagName, yearFlagDefault, yearDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesRegionsItems0PricingUSDFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingUSD, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, hourAdded := retrievePlanDataAttributesRegionsItems0PricingUSDHourFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hourAdded

	err, monthAdded := retrievePlanDataAttributesRegionsItems0PricingUSDMonthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || monthAdded

	err, yearAdded := retrievePlanDataAttributesRegionsItems0PricingUSDYearFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yearAdded

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingUSDHourFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingUSD, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hourFlagName := fmt.Sprintf("%v.hour", cmdPrefix)
	if cmd.Flags().Changed(hourFlagName) {

		var hourFlagName string
		if cmdPrefix == "" {
			hourFlagName = "hour"
		} else {
			hourFlagName = fmt.Sprintf("%v.hour", cmdPrefix)
		}

		hourFlagValue, err := cmd.Flags().GetFloat64(hourFlagName)
		if err != nil {
			return err, false
		}
		m.Hour = hourFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingUSDMonthFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingUSD, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	monthFlagName := fmt.Sprintf("%v.month", cmdPrefix)
	if cmd.Flags().Changed(monthFlagName) {

		var monthFlagName string
		if cmdPrefix == "" {
			monthFlagName = "month"
		} else {
			monthFlagName = fmt.Sprintf("%v.month", cmdPrefix)
		}

		monthFlagValue, err := cmd.Flags().GetFloat64(monthFlagName)
		if err != nil {
			return err, false
		}
		m.Month = monthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesRegionsItems0PricingUSDYearFlags(depth int, m *models.PlanDataAttributesRegionsItems0PricingUSD, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	yearFlagName := fmt.Sprintf("%v.year", cmdPrefix)
	if cmd.Flags().Changed(yearFlagName) {

		var yearFlagName string
		if cmdPrefix == "" {
			yearFlagName = "year"
		} else {
			yearFlagName = fmt.Sprintf("%v.year", cmdPrefix)
		}

		yearFlagValue, err := cmd.Flags().GetFloat64(yearFlagName)
		if err != nil {
			return err, false
		}
		m.Year = yearFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecs

// register flags to command
func registerModelPlanDataAttributesSpecsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsDrives(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsGpu(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsNics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "cpu"
	} else {
		cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesSpecsCPUFlags(depth+1, cpuFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsDrives(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: drives []*PlanDataAttributesSpecsDrivesItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanDataAttributesSpecsGpu(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var gpuFlagName string
	if cmdPrefix == "" {
		gpuFlagName = "gpu"
	} else {
		gpuFlagName = fmt.Sprintf("%v.gpu", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesSpecsGpuFlags(depth+1, gpuFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var memoryFlagName string
	if cmdPrefix == "" {
		memoryFlagName = "memory"
	} else {
		memoryFlagName = fmt.Sprintf("%v.memory", cmdPrefix)
	}

	if err := registerModelPlanDataAttributesSpecsMemoryFlags(depth+1, memoryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsNics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: nics []*PlanDataAttributesSpecsNicsItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuAdded := retrievePlanDataAttributesSpecsCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, drivesAdded := retrievePlanDataAttributesSpecsDrivesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || drivesAdded

	err, gpuAdded := retrievePlanDataAttributesSpecsGpuFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpuAdded

	err, memoryAdded := retrievePlanDataAttributesSpecsMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryAdded

	err, nicsAdded := retrievePlanDataAttributesSpecsNicsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nicsAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsCPUFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.cpu", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {
		// info: complex object cpu PlanDataAttributesSpecsCPU is retrieved outside this Changed() block
	}
	cpuFlagValue := m.CPU
	if swag.IsZero(cpuFlagValue) {
		cpuFlagValue = &models.PlanDataAttributesSpecsCPU{}
	}

	err, cpuAdded := retrieveModelPlanDataAttributesSpecsCPUFlags(depth+1, cpuFlagValue, cpuFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded
	if cpuAdded {
		m.CPU = cpuFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsDrivesFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	drivesFlagName := fmt.Sprintf("%v.drives", cmdPrefix)
	if cmd.Flags().Changed(drivesFlagName) {
		// warning: drives array type []*PlanDataAttributesSpecsDrivesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsGpuFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gpuFlagName := fmt.Sprintf("%v.gpu", cmdPrefix)
	if cmd.Flags().Changed(gpuFlagName) {
		// info: complex object gpu PlanDataAttributesSpecsGpu is retrieved outside this Changed() block
	}
	gpuFlagValue := m.Gpu
	if swag.IsZero(gpuFlagValue) {
		gpuFlagValue = &models.PlanDataAttributesSpecsGpu{}
	}

	err, gpuAdded := retrieveModelPlanDataAttributesSpecsGpuFlags(depth+1, gpuFlagValue, gpuFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gpuAdded
	if gpuAdded {
		m.Gpu = gpuFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsMemoryFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memoryFlagName := fmt.Sprintf("%v.memory", cmdPrefix)
	if cmd.Flags().Changed(memoryFlagName) {
		// info: complex object memory PlanDataAttributesSpecsMemory is retrieved outside this Changed() block
	}
	memoryFlagValue := m.Memory
	if swag.IsZero(memoryFlagValue) {
		memoryFlagValue = &models.PlanDataAttributesSpecsMemory{}
	}

	err, memoryAdded := retrieveModelPlanDataAttributesSpecsMemoryFlags(depth+1, memoryFlagValue, memoryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryAdded
	if memoryAdded {
		m.Memory = memoryFlagValue
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsNicsFlags(depth int, m *models.PlanDataAttributesSpecs, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nicsFlagName := fmt.Sprintf("%v.nics", cmdPrefix)
	if cmd.Flags().Changed(nicsFlagName) {
		// warning: nics array type []*PlanDataAttributesSpecsNicsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecsCPU

// register flags to command
func registerModelPlanDataAttributesSpecsCPUFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsCPUClock(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsCPUCores(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsCPUCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsCPUType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsCPUClock(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clockDescription := ``

	var clockFlagName string
	if cmdPrefix == "" {
		clockFlagName = "clock"
	} else {
		clockFlagName = fmt.Sprintf("%v.clock", cmdPrefix)
	}

	var clockFlagDefault float64

	_ = cmd.PersistentFlags().Float64(clockFlagName, clockFlagDefault, clockDescription)

	return nil
}

func registerPlanDataAttributesSpecsCPUCores(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	coresDescription := ``

	var coresFlagName string
	if cmdPrefix == "" {
		coresFlagName = "cores"
	} else {
		coresFlagName = fmt.Sprintf("%v.cores", cmdPrefix)
	}

	var coresFlagDefault float64

	_ = cmd.PersistentFlags().Float64(coresFlagName, coresFlagDefault, coresDescription)

	return nil
}

func registerPlanDataAttributesSpecsCPUCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := ``

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerPlanDataAttributesSpecsCPUType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsCPUFlags(depth int, m *models.PlanDataAttributesSpecsCPU, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clockAdded := retrievePlanDataAttributesSpecsCPUClockFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clockAdded

	err, coresAdded := retrievePlanDataAttributesSpecsCPUCoresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || coresAdded

	err, countAdded := retrievePlanDataAttributesSpecsCPUCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, typeAdded := retrievePlanDataAttributesSpecsCPUTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsCPUClockFlags(depth int, m *models.PlanDataAttributesSpecsCPU, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clockFlagName := fmt.Sprintf("%v.clock", cmdPrefix)
	if cmd.Flags().Changed(clockFlagName) {

		var clockFlagName string
		if cmdPrefix == "" {
			clockFlagName = "clock"
		} else {
			clockFlagName = fmt.Sprintf("%v.clock", cmdPrefix)
		}

		clockFlagValue, err := cmd.Flags().GetFloat64(clockFlagName)
		if err != nil {
			return err, false
		}
		m.Clock = clockFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsCPUCoresFlags(depth int, m *models.PlanDataAttributesSpecsCPU, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	coresFlagName := fmt.Sprintf("%v.cores", cmdPrefix)
	if cmd.Flags().Changed(coresFlagName) {

		var coresFlagName string
		if cmdPrefix == "" {
			coresFlagName = "cores"
		} else {
			coresFlagName = fmt.Sprintf("%v.cores", cmdPrefix)
		}

		coresFlagValue, err := cmd.Flags().GetFloat64(coresFlagName)
		if err != nil {
			return err, false
		}
		m.Cores = coresFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsCPUCountFlags(depth int, m *models.PlanDataAttributesSpecsCPU, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsCPUTypeFlags(depth int, m *models.PlanDataAttributesSpecsCPU, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecsDrivesItems0

// register flags to command
func registerModelPlanDataAttributesSpecsDrivesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsDrivesItems0Count(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsDrivesItems0Size(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsDrivesItems0Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsDrivesItems0Count(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := ``

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerPlanDataAttributesSpecsDrivesItems0Size(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := ``

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault string

	_ = cmd.PersistentFlags().String(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerPlanDataAttributesSpecsDrivesItems0Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["SSD","HDD"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SSD","HDD"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsDrivesItems0Flags(depth int, m *models.PlanDataAttributesSpecsDrivesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, countAdded := retrievePlanDataAttributesSpecsDrivesItems0CountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, sizeAdded := retrievePlanDataAttributesSpecsDrivesItems0SizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, typeAdded := retrievePlanDataAttributesSpecsDrivesItems0TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsDrivesItems0CountFlags(depth int, m *models.PlanDataAttributesSpecsDrivesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsDrivesItems0SizeFlags(depth int, m *models.PlanDataAttributesSpecsDrivesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetString(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsDrivesItems0TypeFlags(depth int, m *models.PlanDataAttributesSpecsDrivesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecsGpu

// register flags to command
func registerModelPlanDataAttributesSpecsGpuFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsGpuCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsGpuType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsGpuCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := ``

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerPlanDataAttributesSpecsGpuType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsGpuFlags(depth int, m *models.PlanDataAttributesSpecsGpu, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, countAdded := retrievePlanDataAttributesSpecsGpuCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, typeAdded := retrievePlanDataAttributesSpecsGpuTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsGpuCountFlags(depth int, m *models.PlanDataAttributesSpecsGpu, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsGpuTypeFlags(depth int, m *models.PlanDataAttributesSpecsGpu, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecsMemory

// register flags to command
func registerModelPlanDataAttributesSpecsMemoryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsMemoryTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsMemoryTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := ``

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault string

	_ = cmd.PersistentFlags().String(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsMemoryFlags(depth int, m *models.PlanDataAttributesSpecsMemory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, totalAdded := retrievePlanDataAttributesSpecsMemoryTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsMemoryTotalFlags(depth int, m *models.PlanDataAttributesSpecsMemory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetString(totalFlagName)
		if err != nil {
			return err, false
		}

		parsedFlag, err := strconv.Atoi(totalFlagValue)
		if err != nil {
			return err, false
		}
		m.Total = parsedFlag

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for PlanDataAttributesSpecsNicsItems0

// register flags to command
func registerModelPlanDataAttributesSpecsNicsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanDataAttributesSpecsNicsItems0Count(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanDataAttributesSpecsNicsItems0Type(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanDataAttributesSpecsNicsItems0Count(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	countDescription := ``

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault float64

	_ = cmd.PersistentFlags().Float64(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerPlanDataAttributesSpecsNicsItems0Type(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := ``

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanDataAttributesSpecsNicsItems0Flags(depth int, m *models.PlanDataAttributesSpecsNicsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, countAdded := retrievePlanDataAttributesSpecsNicsItems0CountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || countAdded

	err, typeAdded := retrievePlanDataAttributesSpecsNicsItems0TypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsNicsItems0CountFlags(depth int, m *models.PlanDataAttributesSpecsNicsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	countFlagName := fmt.Sprintf("%v.count", cmdPrefix)
	if cmd.Flags().Changed(countFlagName) {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetFloat64(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = countFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanDataAttributesSpecsNicsItems0TypeFlags(depth int, m *models.PlanDataAttributesSpecsNicsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
