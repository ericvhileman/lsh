// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpnSessionWithoutPassword vpn session without password
//
// swagger:model vpn_session_without_password
type VpnSessionWithoutPassword struct {

	// data
	Data *VpnSessionWithoutPasswordData `json:"data,omitempty"`
}

// Validate validates this vpn session without password
func (m *VpnSessionWithoutPassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPassword) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vpn session without password based on the context it is used
func (m *VpnSessionWithoutPassword) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPassword) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionWithoutPassword) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionWithoutPassword) UnmarshalBinary(b []byte) error {
	var res VpnSessionWithoutPassword
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VpnSessionWithoutPasswordData vpn session without password data
//
// swagger:model VpnSessionWithoutPasswordData
type VpnSessionWithoutPasswordData struct {

	// attributes
	Attributes *VpnSessionWithoutPasswordDataAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [vpn_sessions]
	Type string `json:"type,omitempty"`
}

// Validate validates this vpn session without password data
func (m *VpnSessionWithoutPasswordData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var vpnSessionWithoutPasswordDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vpn_sessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpnSessionWithoutPasswordDataTypeTypePropEnum = append(vpnSessionWithoutPasswordDataTypeTypePropEnum, v)
	}
}

const (

	// VpnSessionWithoutPasswordDataTypeVpnSessions captures enum value "vpn_sessions"
	VpnSessionWithoutPasswordDataTypeVpnSessions string = "vpn_sessions"
)

// prop value enum
func (m *VpnSessionWithoutPasswordData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vpnSessionWithoutPasswordDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VpnSessionWithoutPasswordData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vpn session without password data based on the context it is used
func (m *VpnSessionWithoutPasswordData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordData) UnmarshalBinary(b []byte) error {
	var res VpnSessionWithoutPasswordData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VpnSessionWithoutPasswordDataAttributes vpn session without password data attributes
//
// swagger:model VpnSessionWithoutPasswordDataAttributes
type VpnSessionWithoutPasswordDataAttributes struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// Time to expiry
	ExpiresAt string `json:"expires_at,omitempty"`

	// VPN host
	Host string `json:"host,omitempty"`

	// VPN port
	Port string `json:"port,omitempty"`

	// region
	Region *VpnSessionWithoutPasswordDataAttributesRegion `json:"region,omitempty"`

	// from Firewall Response
	// Enum: [enable disable]
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// VPN username
	UserName string `json:"user_name,omitempty"`
}

// Validate validates this vpn session without password data attributes
func (m *VpnSessionWithoutPasswordDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordDataAttributes) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

var vpnSessionWithoutPasswordDataAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpnSessionWithoutPasswordDataAttributesTypeStatusPropEnum = append(vpnSessionWithoutPasswordDataAttributesTypeStatusPropEnum, v)
	}
}

const (

	// VpnSessionWithoutPasswordDataAttributesStatusEnable captures enum value "enable"
	VpnSessionWithoutPasswordDataAttributesStatusEnable string = "enable"

	// VpnSessionWithoutPasswordDataAttributesStatusDisable captures enum value "disable"
	VpnSessionWithoutPasswordDataAttributesStatusDisable string = "disable"
)

// prop value enum
func (m *VpnSessionWithoutPasswordDataAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vpnSessionWithoutPasswordDataAttributesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VpnSessionWithoutPasswordDataAttributes) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("data"+"."+"attributes"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vpn session without password data attributes based on the context it is used
func (m *VpnSessionWithoutPasswordDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordDataAttributes) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributes) UnmarshalBinary(b []byte) error {
	var res VpnSessionWithoutPasswordDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VpnSessionWithoutPasswordDataAttributesRegion vpn session without password data attributes region
//
// swagger:model VpnSessionWithoutPasswordDataAttributesRegion
type VpnSessionWithoutPasswordDataAttributesRegion struct {

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// site
	Site *VpnSessionWithoutPasswordDataAttributesRegionSite `json:"site,omitempty"`
}

// Validate validates this vpn session without password data attributes region
func (m *VpnSessionWithoutPasswordDataAttributesRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordDataAttributesRegion) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "region" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes" + "." + "region" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vpn session without password data attributes region based on the context it is used
func (m *VpnSessionWithoutPasswordDataAttributesRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionWithoutPasswordDataAttributesRegion) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {

		if swag.IsZero(m.Site) { // not required
			return nil
		}

		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "region" + "." + "site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes" + "." + "region" + "." + "site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributesRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributesRegion) UnmarshalBinary(b []byte) error {
	var res VpnSessionWithoutPasswordDataAttributesRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VpnSessionWithoutPasswordDataAttributesRegionSite vpn session without password data attributes region site
//
// swagger:model VpnSessionWithoutPasswordDataAttributesRegionSite
type VpnSessionWithoutPasswordDataAttributesRegionSite struct {

	// facility
	Facility string `json:"facility,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this vpn session without password data attributes region site
func (m *VpnSessionWithoutPasswordDataAttributesRegionSite) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vpn session without password data attributes region site based on context it is used
func (m *VpnSessionWithoutPasswordDataAttributesRegionSite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributesRegionSite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionWithoutPasswordDataAttributesRegionSite) UnmarshalBinary(b []byte) error {
	var res VpnSessionWithoutPasswordDataAttributesRegionSite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
