// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpnSessionDataWithPassword vpn session data with password
//
// swagger:model vpn_session_data_with_password
type VpnSessionDataWithPassword struct {

	// attributes
	Attributes *VpnSessionDataWithPasswordAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [vpn_sessions]
	Type string `json:"type,omitempty"`
}

// Validate validates this vpn session data with password
func (m *VpnSessionDataWithPassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionDataWithPassword) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var vpnSessionDataWithPasswordTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vpn_sessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpnSessionDataWithPasswordTypeTypePropEnum = append(vpnSessionDataWithPasswordTypeTypePropEnum, v)
	}
}

const (

	// VpnSessionDataWithPasswordTypeVpnSessions captures enum value "vpn_sessions"
	VpnSessionDataWithPasswordTypeVpnSessions string = "vpn_sessions"
)

// prop value enum
func (m *VpnSessionDataWithPassword) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vpnSessionDataWithPasswordTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VpnSessionDataWithPassword) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vpn session data with password based on the context it is used
func (m *VpnSessionDataWithPassword) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionDataWithPassword) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionDataWithPassword) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionDataWithPassword) UnmarshalBinary(b []byte) error {
	var res VpnSessionDataWithPassword
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VpnSessionDataWithPasswordAttributes vpn session data with password attributes
//
// swagger:model VpnSessionDataWithPasswordAttributes
type VpnSessionDataWithPasswordAttributes struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// Time to expiry
	ExpiresAt string `json:"expires_at,omitempty"`

	// VPN host
	Host string `json:"host,omitempty"`

	// VPN password
	Password string `json:"password,omitempty"`

	// VPN port
	Port string `json:"port,omitempty"`

	// region
	Region *RegionResourceData `json:"region,omitempty"`

	// from Firewall Response
	// Enum: [enable disable]
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// VPN username
	UserName string `json:"user_name,omitempty"`
}

// Validate validates this vpn session data with password attributes
func (m *VpnSessionDataWithPasswordAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionDataWithPasswordAttributes) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.Region) { // not required
		return nil
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

var vpnSessionDataWithPasswordAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpnSessionDataWithPasswordAttributesTypeStatusPropEnum = append(vpnSessionDataWithPasswordAttributesTypeStatusPropEnum, v)
	}
}

const (

	// VpnSessionDataWithPasswordAttributesStatusEnable captures enum value "enable"
	VpnSessionDataWithPasswordAttributesStatusEnable string = "enable"

	// VpnSessionDataWithPasswordAttributesStatusDisable captures enum value "disable"
	VpnSessionDataWithPasswordAttributesStatusDisable string = "disable"
)

// prop value enum
func (m *VpnSessionDataWithPasswordAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vpnSessionDataWithPasswordAttributesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VpnSessionDataWithPasswordAttributes) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("attributes"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vpn session data with password attributes based on the context it is used
func (m *VpnSessionDataWithPasswordAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnSessionDataWithPasswordAttributes) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if swag.IsZero(m.Region) { // not required
			return nil
		}

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnSessionDataWithPasswordAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnSessionDataWithPasswordAttributes) UnmarshalBinary(b []byte) error {
	var res VpnSessionDataWithPasswordAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
