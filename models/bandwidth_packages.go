// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BandwidthPackages bandwidth packages
//
// swagger:model bandwidth_packages
type BandwidthPackages struct {

	// attributes
	Attributes *BandwidthPackagesAttributes `json:"attributes,omitempty"`

	// type
	// Enum: [bandwidth_packages]
	Type string `json:"type,omitempty"`
}

// Validate validates this bandwidth packages
func (m *BandwidthPackages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPackages) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var bandwidthPackagesTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bandwidth_packages"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bandwidthPackagesTypeTypePropEnum = append(bandwidthPackagesTypeTypePropEnum, v)
	}
}

const (

	// BandwidthPackagesTypeBandwidthPackages captures enum value "bandwidth_packages"
	BandwidthPackagesTypeBandwidthPackages string = "bandwidth_packages"
)

// prop value enum
func (m *BandwidthPackages) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bandwidthPackagesTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BandwidthPackages) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bandwidth packages based on the context it is used
func (m *BandwidthPackages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPackages) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPackages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPackages) UnmarshalBinary(b []byte) error {
	var res BandwidthPackages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPackagesAttributes bandwidth packages attributes
//
// swagger:model BandwidthPackagesAttributes
type BandwidthPackagesAttributes struct {

	// packages
	Packages []*BandwidthPackagesAttributesPackagesItems0 `json:"packages"`

	// project
	Project *BandwidthPackagesAttributesProject `json:"project,omitempty"`
}

// Validate validates this bandwidth packages attributes
func (m *BandwidthPackagesAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPackagesAttributes) validatePackages(formats strfmt.Registry) error {
	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {
		if swag.IsZero(m.Packages[i]) { // not required
			continue
		}

		if m.Packages[i] != nil {
			if err := m.Packages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + "packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BandwidthPackagesAttributes) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "project")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bandwidth packages attributes based on the context it is used
func (m *BandwidthPackagesAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthPackagesAttributes) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packages); i++ {

		if m.Packages[i] != nil {

			if swag.IsZero(m.Packages[i]) { // not required
				return nil
			}

			if err := m.Packages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "packages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + "packages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BandwidthPackagesAttributes) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if m.Project != nil {

		if swag.IsZero(m.Project) { // not required
			return nil
		}

		if err := m.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes" + "." + "project")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPackagesAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPackagesAttributes) UnmarshalBinary(b []byte) error {
	var res BandwidthPackagesAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPackagesAttributesPackagesItems0 bandwidth packages attributes packages items0
//
// swagger:model BandwidthPackagesAttributesPackagesItems0
type BandwidthPackagesAttributesPackagesItems0 struct {

	// contracted
	Contracted int64 `json:"contracted,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// region slug
	RegionSlug string `json:"region_slug,omitempty"`

	// total price
	TotalPrice float64 `json:"total_price,omitempty"`

	// unit price
	UnitPrice float64 `json:"unit_price,omitempty"`
}

// Validate validates this bandwidth packages attributes packages items0
func (m *BandwidthPackagesAttributesPackagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bandwidth packages attributes packages items0 based on context it is used
func (m *BandwidthPackagesAttributesPackagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPackagesAttributesPackagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPackagesAttributesPackagesItems0) UnmarshalBinary(b []byte) error {
	var res BandwidthPackagesAttributesPackagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BandwidthPackagesAttributesProject bandwidth packages attributes project
//
// swagger:model BandwidthPackagesAttributesProject
type BandwidthPackagesAttributesProject struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this bandwidth packages attributes project
func (m *BandwidthPackagesAttributesProject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bandwidth packages attributes project based on context it is used
func (m *BandwidthPackagesAttributesProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthPackagesAttributesProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthPackagesAttributesProject) UnmarshalBinary(b []byte) error {
	var res BandwidthPackagesAttributesProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
