// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Traffic traffic
//
// swagger:model traffic
type Traffic struct {

	// data
	Data *TrafficData `json:"data,omitempty"`
}

// Validate validates this traffic
func (m *Traffic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Traffic) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic based on the context it is used
func (m *Traffic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Traffic) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Traffic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Traffic) UnmarshalBinary(b []byte) error {
	var res Traffic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficData traffic data
//
// swagger:model TrafficData
type TrafficData struct {

	// attributes
	Attributes *TrafficDataAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [traffic]
	Type string `json:"type,omitempty"`
}

// Validate validates this traffic data
func (m *TrafficData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var trafficDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["traffic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trafficDataTypeTypePropEnum = append(trafficDataTypeTypePropEnum, v)
	}
}

const (

	// TrafficDataTypeTraffic captures enum value "traffic"
	TrafficDataTypeTraffic string = "traffic"
)

// prop value enum
func (m *TrafficData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, trafficDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TrafficData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this traffic data based on the context it is used
func (m *TrafficData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficData) UnmarshalBinary(b []byte) error {
	var res TrafficData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficDataAttributes traffic data attributes
//
// swagger:model TrafficDataAttributes
type TrafficDataAttributes struct {

	// The start timestamp. Must be a unix timestamp
	FromDate int64 `json:"from_date,omitempty"`

	// regions
	Regions []*TrafficDataAttributesRegionsItems0 `json:"regions"`

	// The end timestamp. Must be a unix timestamp
	ToDate int64 `json:"to_date,omitempty"`

	// Value in MBps
	TotalInbound95thPercentileMbps float64 `json:"total_inbound_95th_percentile_mbps,omitempty"`

	// Value in GB
	TotalInboundGb int64 `json:"total_inbound_gb,omitempty"`

	// Value in MBps
	TotalOutbound95thPercentileMbps float64 `json:"total_outbound_95th_percentile_mbps,omitempty"`

	// Value in GB
	TotalOutboundGb int64 `json:"total_outbound_gb,omitempty"`
}

// Validate validates this traffic data attributes
func (m *TrafficDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficDataAttributes) validateRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "attributes" + "." + "regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this traffic data attributes based on the context it is used
func (m *TrafficDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficDataAttributes) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {

			if swag.IsZero(m.Regions[i]) { // not required
				return nil
			}

			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "attributes" + "." + "regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficDataAttributes) UnmarshalBinary(b []byte) error {
	var res TrafficDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficDataAttributesRegionsItems0 traffic data attributes regions items0
//
// swagger:model TrafficDataAttributesRegionsItems0
type TrafficDataAttributesRegionsItems0 struct {

	// data
	Data []*TrafficDataAttributesRegionsItems0DataItems0 `json:"data"`

	// region slug
	RegionSlug string `json:"region_slug,omitempty"`

	// Value in MBps
	TotalInbound95thPercentileMbps float64 `json:"total_inbound_95th_percentile_mbps,omitempty"`

	// Value in GB
	TotalInboundGb int64 `json:"total_inbound_gb,omitempty"`

	// Value in MBps
	TotalOutbound95thPercentileMbps float64 `json:"total_outbound_95th_percentile_mbps,omitempty"`

	// Value in GB
	TotalOutboundGb int64 `json:"total_outbound_gb,omitempty"`
}

// Validate validates this traffic data attributes regions items0
func (m *TrafficDataAttributesRegionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficDataAttributesRegionsItems0) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this traffic data attributes regions items0 based on the context it is used
func (m *TrafficDataAttributesRegionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficDataAttributesRegionsItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {

			if swag.IsZero(m.Data[i]) { // not required
				return nil
			}

			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficDataAttributesRegionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficDataAttributesRegionsItems0) UnmarshalBinary(b []byte) error {
	var res TrafficDataAttributesRegionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficDataAttributesRegionsItems0DataItems0 traffic data attributes regions items0 data items0
//
// swagger:model TrafficDataAttributesRegionsItems0DataItems0
type TrafficDataAttributesRegionsItems0DataItems0 struct {

	// Value in MBps
	AvgInboundSpeedMbps float64 `json:"avg_inbound_speed_mbps,omitempty"`

	// Value in MBps
	AvgOutboundSpeedMbps float64 `json:"avg_outbound_speed_mbps,omitempty"`

	// The datetime of the day
	Date string `json:"date,omitempty"`

	// Value in GB
	InboundGb int64 `json:"inbound_gb,omitempty"`

	// Value in GB
	OutboundGb int64 `json:"outbound_gb,omitempty"`
}

// Validate validates this traffic data attributes regions items0 data items0
func (m *TrafficDataAttributesRegionsItems0DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this traffic data attributes regions items0 data items0 based on context it is used
func (m *TrafficDataAttributesRegionsItems0DataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficDataAttributesRegionsItems0DataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficDataAttributesRegionsItems0DataItems0) UnmarshalBinary(b []byte) error {
	var res TrafficDataAttributesRegionsItems0DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
