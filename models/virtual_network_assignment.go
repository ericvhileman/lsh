package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualNetworkAssignment virtual network assignment
//
// swagger:model virtual_network_assignment
type VirtualNetworkAssignment struct {

	// attributes
	Attributes *VirtualNetworkAssignmentAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this virtual network assignment
func (m *VirtualNetworkAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAssignment) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual network assignment based on the context it is used
func (m *VirtualNetworkAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualNetworkAssignment) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkAssignment) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

type VirtualNetworkAssignmentServer struct {
	ID       string `json:"id,omitempty"`
	Hostname string `json:"hostname,omitempty"`
	Label    string `json:"label,omitempty"`
	Status   string `json:"status,omitempty"`
}

// VirtualNetworkAssignmentAttributes virtual network assignment attributes
//
// swagger:model VirtualNetworkAssignmentAttributes
type VirtualNetworkAssignmentAttributes struct {

	// description
	Description string `json:"description,omitempty"`

	// server id
	ServerID string `json:"server_id,omitempty"`

	Server VirtualNetworkAssignmentServer `json:"server,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// vid
	Vid int64 `json:"vid,omitempty"`

	// virtual network id
	VirtualNetworkID string `json:"virtual_network_id,omitempty"`
}

// Validate validates this virtual network assignment attributes
func (m *VirtualNetworkAssignmentAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this virtual network assignment attributes based on context it is used
func (m *VirtualNetworkAssignmentAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualNetworkAssignmentAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualNetworkAssignmentAttributes) UnmarshalBinary(b []byte) error {
	var res VirtualNetworkAssignmentAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
