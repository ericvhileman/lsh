// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficQuota traffic quota
//
// swagger:model traffic_quota
type TrafficQuota struct {

	// data
	Data *TrafficQuotaData `json:"data,omitempty"`
}

// Validate validates this traffic quota
func (m *TrafficQuota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuota) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic quota based on the context it is used
func (m *TrafficQuota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuota) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuota) UnmarshalBinary(b []byte) error {
	var res TrafficQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaData traffic quota data
//
// swagger:model TrafficQuotaData
type TrafficQuotaData struct {

	// attributes
	Attributes *TrafficQuotaDataAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [traffic_quota]
	Type string `json:"type,omitempty"`
}

// Validate validates this traffic quota data
func (m *TrafficQuotaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var trafficQuotaDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["traffic_quota"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		trafficQuotaDataTypeTypePropEnum = append(trafficQuotaDataTypeTypePropEnum, v)
	}
}

const (

	// TrafficQuotaDataTypeTrafficQuota captures enum value "traffic_quota"
	TrafficQuotaDataTypeTrafficQuota string = "traffic_quota"
)

// prop value enum
func (m *TrafficQuotaData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, trafficQuotaDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TrafficQuotaData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this traffic quota data based on the context it is used
func (m *TrafficQuotaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {

		if swag.IsZero(m.Attributes) { // not required
			return nil
		}

		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaData) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaDataAttributes traffic quota data attributes
//
// swagger:model TrafficQuotaDataAttributes
type TrafficQuotaDataAttributes struct {

	// quota per project
	QuotaPerProject []*TrafficQuotaDataAttributesQuotaPerProjectItems0 `json:"quota_per_project"`
}

// Validate validates this traffic quota data attributes
func (m *TrafficQuotaDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaPerProject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributes) validateQuotaPerProject(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaPerProject) { // not required
		return nil
	}

	for i := 0; i < len(m.QuotaPerProject); i++ {
		if swag.IsZero(m.QuotaPerProject[i]) { // not required
			continue
		}

		if m.QuotaPerProject[i] != nil {
			if err := m.QuotaPerProject[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "quota_per_project" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "attributes" + "." + "quota_per_project" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this traffic quota data attributes based on the context it is used
func (m *TrafficQuotaDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuotaPerProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributes) contextValidateQuotaPerProject(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuotaPerProject); i++ {

		if m.QuotaPerProject[i] != nil {

			if swag.IsZero(m.QuotaPerProject[i]) { // not required
				return nil
			}

			if err := m.QuotaPerProject[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "quota_per_project" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "attributes" + "." + "quota_per_project" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaDataAttributes) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaDataAttributesQuotaPerProjectItems0 traffic quota data attributes quota per project items0
//
// swagger:model TrafficQuotaDataAttributesQuotaPerProjectItems0
type TrafficQuotaDataAttributesQuotaPerProjectItems0 struct {

	// billing method
	BillingMethod string `json:"billing_method,omitempty"`

	// project id
	ProjectID string `json:"project_id,omitempty"`

	// project slug
	ProjectSlug string `json:"project_slug,omitempty"`

	// quota per region
	QuotaPerRegion []*TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0 `json:"quota_per_region"`
}

// Validate validates this traffic quota data attributes quota per project items0
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaPerRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) validateQuotaPerRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaPerRegion) { // not required
		return nil
	}

	for i := 0; i < len(m.QuotaPerRegion); i++ {
		if swag.IsZero(m.QuotaPerRegion[i]) { // not required
			continue
		}

		if m.QuotaPerRegion[i] != nil {
			if err := m.QuotaPerRegion[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quota_per_region" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quota_per_region" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this traffic quota data attributes quota per project items0 based on the context it is used
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuotaPerRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) contextValidateQuotaPerRegion(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuotaPerRegion); i++ {

		if m.QuotaPerRegion[i] != nil {

			if swag.IsZero(m.QuotaPerRegion[i]) { // not required
				return nil
			}

			if err := m.QuotaPerRegion[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quota_per_region" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quota_per_region" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaDataAttributesQuotaPerProjectItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0 traffic quota data attributes quota per project items0 quota per region items0
//
// swagger:model TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0
type TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0 struct {

	// quota in mbps
	QuotaInMbps *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps `json:"quota_in_mbps,omitempty"`

	// quota in tb
	QuotaInTb *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb `json:"quota_in_tb,omitempty"`

	// region id
	RegionID string `json:"region_id,omitempty"`

	// region slug
	RegionSlug string `json:"region_slug,omitempty"`
}

// Validate validates this traffic quota data attributes quota per project items0 quota per region items0
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaInMbps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaInTb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) validateQuotaInMbps(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaInMbps) { // not required
		return nil
	}

	if m.QuotaInMbps != nil {
		if err := m.QuotaInMbps.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_in_mbps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota_in_mbps")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) validateQuotaInTb(formats strfmt.Registry) error {
	if swag.IsZero(m.QuotaInTb) { // not required
		return nil
	}

	if m.QuotaInTb != nil {
		if err := m.QuotaInTb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_in_tb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota_in_tb")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic quota data attributes quota per project items0 quota per region items0 based on the context it is used
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuotaInMbps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuotaInTb(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) contextValidateQuotaInMbps(ctx context.Context, formats strfmt.Registry) error {

	if m.QuotaInMbps != nil {

		if swag.IsZero(m.QuotaInMbps) { // not required
			return nil
		}

		if err := m.QuotaInMbps.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_in_mbps")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota_in_mbps")
			}
			return err
		}
	}

	return nil
}

func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) contextValidateQuotaInTb(ctx context.Context, formats strfmt.Registry) error {

	if m.QuotaInTb != nil {

		if swag.IsZero(m.QuotaInTb) { // not required
			return nil
		}

		if err := m.QuotaInTb.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota_in_tb")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quota_in_tb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps traffic quota data attributes quota per project items0 quota per region items0 quota in mbps
//
// swagger:model TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps
type TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps struct {

	// additional
	Additional int64 `json:"additional,omitempty"`

	// granted
	Granted int64 `json:"granted,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this traffic quota data attributes quota per project items0 quota per region items0 quota in mbps
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this traffic quota data attributes quota per project items0 quota per region items0 quota in mbps based on context it is used
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInMbps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb traffic quota data attributes quota per project items0 quota per region items0 quota in tb
//
// swagger:model TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb
type TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb struct {

	// additional
	Additional int64 `json:"additional,omitempty"`

	// granted
	Granted int64 `json:"granted,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this traffic quota data attributes quota per project items0 quota per region items0 quota in tb
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this traffic quota data attributes quota per project items0 quota per region items0 quota in tb based on context it is used
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb) UnmarshalBinary(b []byte) error {
	var res TrafficQuotaDataAttributesQuotaPerProjectItems0QuotaPerRegionItems0QuotaInTb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
