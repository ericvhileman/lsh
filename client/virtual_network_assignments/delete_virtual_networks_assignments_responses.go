// Code generated by go-swagger; DO NOT EDIT.

package virtual_network_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/internal/api"
	"github.com/latitudesh/cli/models"
)

// DeleteVirtualNetworksAssignmentsReader is a Reader for the DeleteVirtualNetworksAssignments structure.
type DeleteVirtualNetworksAssignmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVirtualNetworksAssignmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteVirtualNetworksAssignmentsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteVirtualNetworksAssignmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := api.NewErrorResponse()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /virtual_networks/assignments/{assignment_id}] delete-virtual-networks-assignments", response, response.Code())
	}
}

// NewDeleteVirtualNetworksAssignmentsNoContent creates a DeleteVirtualNetworksAssignmentsNoContent with default headers values
func NewDeleteVirtualNetworksAssignmentsNoContent() *DeleteVirtualNetworksAssignmentsNoContent {
	return &DeleteVirtualNetworksAssignmentsNoContent{}
}

/*
DeleteVirtualNetworksAssignmentsNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteVirtualNetworksAssignmentsNoContent struct {
}

// IsSuccess returns true when this delete virtual networks assignments no content response has a 2xx status code
func (o *DeleteVirtualNetworksAssignmentsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete virtual networks assignments no content response has a 3xx status code
func (o *DeleteVirtualNetworksAssignmentsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete virtual networks assignments no content response has a 4xx status code
func (o *DeleteVirtualNetworksAssignmentsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete virtual networks assignments no content response has a 5xx status code
func (o *DeleteVirtualNetworksAssignmentsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete virtual networks assignments no content response a status code equal to that given
func (o *DeleteVirtualNetworksAssignmentsNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete virtual networks assignments no content response
func (o *DeleteVirtualNetworksAssignmentsNoContent) Code() int {
	return 204
}

func (o *DeleteVirtualNetworksAssignmentsNoContent) Error() string {
	return fmt.Sprintf("[DELETE /virtual_networks/assignments/{assignment_id}][%d] deleteVirtualNetworksAssignmentsNoContent ", 204)
}

func (o *DeleteVirtualNetworksAssignmentsNoContent) String() string {
	return fmt.Sprintf("[DELETE /virtual_networks/assignments/{assignment_id}][%d] deleteVirtualNetworksAssignmentsNoContent ", 204)
}

func (o *DeleteVirtualNetworksAssignmentsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVirtualNetworksAssignmentsForbidden creates a DeleteVirtualNetworksAssignmentsForbidden with default headers values
func NewDeleteVirtualNetworksAssignmentsForbidden() *DeleteVirtualNetworksAssignmentsForbidden {
	return &DeleteVirtualNetworksAssignmentsForbidden{}
}

/*
DeleteVirtualNetworksAssignmentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteVirtualNetworksAssignmentsForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this delete virtual networks assignments forbidden response has a 2xx status code
func (o *DeleteVirtualNetworksAssignmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete virtual networks assignments forbidden response has a 3xx status code
func (o *DeleteVirtualNetworksAssignmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete virtual networks assignments forbidden response has a 4xx status code
func (o *DeleteVirtualNetworksAssignmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete virtual networks assignments forbidden response has a 5xx status code
func (o *DeleteVirtualNetworksAssignmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete virtual networks assignments forbidden response a status code equal to that given
func (o *DeleteVirtualNetworksAssignmentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete virtual networks assignments forbidden response
func (o *DeleteVirtualNetworksAssignmentsForbidden) Code() int {
	return 403
}

func (o *DeleteVirtualNetworksAssignmentsForbidden) Error() string {
	return fmt.Sprintf("[DELETE /virtual_networks/assignments/{assignment_id}][%d] deleteVirtualNetworksAssignmentsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVirtualNetworksAssignmentsForbidden) String() string {
	return fmt.Sprintf("[DELETE /virtual_networks/assignments/{assignment_id}][%d] deleteVirtualNetworksAssignmentsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVirtualNetworksAssignmentsForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *DeleteVirtualNetworksAssignmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
