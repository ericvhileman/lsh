// Code generated by go-swagger; DO NOT EDIT.

package ip_addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIpsParams creates a new GetIpsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetIpsParams() *GetIpsParams {
	return &GetIpsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetIpsParamsWithTimeout creates a new GetIpsParams object
// with the ability to set a timeout on a request.
func NewGetIpsParamsWithTimeout(timeout time.Duration) *GetIpsParams {
	return &GetIpsParams{
		timeout: timeout,
	}
}

// NewGetIpsParamsWithContext creates a new GetIpsParams object
// with the ability to set a context for a request.
func NewGetIpsParamsWithContext(ctx context.Context) *GetIpsParams {
	return &GetIpsParams{
		Context: ctx,
	}
}

// NewGetIpsParamsWithHTTPClient creates a new GetIpsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetIpsParamsWithHTTPClient(client *http.Client) *GetIpsParams {
	return &GetIpsParams{
		HTTPClient: client,
	}
}

/*
GetIpsParams contains all the parameters to send to the API endpoint

	for the get ips operation.

	Typically these are written to a http.Request.
*/
type GetIpsParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	/* ExtraFieldsIPAddresses.

	   The `region` and `server` are provided as extra attributes that is lazy loaded. To request it, just set `extra_fields[ip_addresses]=region,server` in the query string.
	*/
	ExtraFieldsIPAddresses *string

	/* FilterAddress.

	   The address of IP to filter by starts_with
	*/
	FilterAddress *string

	/* FilterFamily.

	   The protocol family to filter by
	*/
	FilterFamily *string

	/* FilterLocation.

	   The site slug to filter by
	*/
	FilterLocation *string

	/* FilterProject.

	   The project ID or Slug to filter by
	*/
	FilterProject *string

	/* FilterServer.

	   The server ID to filter by
	*/
	FilterServer *string

	/* FilterType.

	   The protocol type to filter by
	*/
	FilterType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get ips params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIpsParams) WithDefaults() *GetIpsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get ips params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetIpsParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := GetIpsParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get ips params
func (o *GetIpsParams) WithTimeout(timeout time.Duration) *GetIpsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ips params
func (o *GetIpsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ips params
func (o *GetIpsParams) WithContext(ctx context.Context) *GetIpsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ips params
func (o *GetIpsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ips params
func (o *GetIpsParams) WithHTTPClient(client *http.Client) *GetIpsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ips params
func (o *GetIpsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get ips params
func (o *GetIpsParams) WithAPIVersion(aPIVersion *string) *GetIpsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get ips params
func (o *GetIpsParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithExtraFieldsIPAddresses adds the extraFieldsIPAddresses to the get ips params
func (o *GetIpsParams) WithExtraFieldsIPAddresses(extraFieldsIPAddresses *string) *GetIpsParams {
	o.SetExtraFieldsIPAddresses(extraFieldsIPAddresses)
	return o
}

// SetExtraFieldsIPAddresses adds the extraFieldsIpAddresses to the get ips params
func (o *GetIpsParams) SetExtraFieldsIPAddresses(extraFieldsIPAddresses *string) {
	o.ExtraFieldsIPAddresses = extraFieldsIPAddresses
}

// WithFilterAddress adds the filterAddress to the get ips params
func (o *GetIpsParams) WithFilterAddress(filterAddress *string) *GetIpsParams {
	o.SetFilterAddress(filterAddress)
	return o
}

// SetFilterAddress adds the filterAddress to the get ips params
func (o *GetIpsParams) SetFilterAddress(filterAddress *string) {
	o.FilterAddress = filterAddress
}

// WithFilterFamily adds the filterFamily to the get ips params
func (o *GetIpsParams) WithFilterFamily(filterFamily *string) *GetIpsParams {
	o.SetFilterFamily(filterFamily)
	return o
}

// SetFilterFamily adds the filterFamily to the get ips params
func (o *GetIpsParams) SetFilterFamily(filterFamily *string) {
	o.FilterFamily = filterFamily
}

// WithFilterLocation adds the filterLocation to the get ips params
func (o *GetIpsParams) WithFilterLocation(filterLocation *string) *GetIpsParams {
	o.SetFilterLocation(filterLocation)
	return o
}

// SetFilterLocation adds the filterLocation to the get ips params
func (o *GetIpsParams) SetFilterLocation(filterLocation *string) {
	o.FilterLocation = filterLocation
}

// WithFilterProject adds the filterProject to the get ips params
func (o *GetIpsParams) WithFilterProject(filterProject *string) *GetIpsParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get ips params
func (o *GetIpsParams) SetFilterProject(filterProject *string) {
	o.FilterProject = filterProject
}

// WithFilterServer adds the filterServer to the get ips params
func (o *GetIpsParams) WithFilterServer(filterServer *string) *GetIpsParams {
	o.SetFilterServer(filterServer)
	return o
}

// SetFilterServer adds the filterServer to the get ips params
func (o *GetIpsParams) SetFilterServer(filterServer *string) {
	o.FilterServer = filterServer
}

// WithFilterType adds the filterType to the get ips params
func (o *GetIpsParams) WithFilterType(filterType *string) *GetIpsParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get ips params
func (o *GetIpsParams) SetFilterType(filterType *string) {
	o.FilterType = filterType
}

// WriteToRequest writes these params to a swagger request
func (o *GetIpsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	if o.ExtraFieldsIPAddresses != nil {

		// query param extra_fields[ip_addresses]
		var qrExtraFieldsIPAddresses string

		if o.ExtraFieldsIPAddresses != nil {
			qrExtraFieldsIPAddresses = *o.ExtraFieldsIPAddresses
		}
		qExtraFieldsIPAddresses := qrExtraFieldsIPAddresses
		if qExtraFieldsIPAddresses != "" {

			if err := r.SetQueryParam("extra_fields[ip_addresses]", qExtraFieldsIPAddresses); err != nil {
				return err
			}
		}
	}

	if o.FilterAddress != nil {

		// query param filter[address]
		var qrFilterAddress string

		if o.FilterAddress != nil {
			qrFilterAddress = *o.FilterAddress
		}
		qFilterAddress := qrFilterAddress
		if qFilterAddress != "" {

			if err := r.SetQueryParam("filter[address]", qFilterAddress); err != nil {
				return err
			}
		}
	}

	if o.FilterFamily != nil {

		// query param filter[family]
		var qrFilterFamily string

		if o.FilterFamily != nil {
			qrFilterFamily = *o.FilterFamily
		}
		qFilterFamily := qrFilterFamily
		if qFilterFamily != "" {

			if err := r.SetQueryParam("filter[family]", qFilterFamily); err != nil {
				return err
			}
		}
	}

	if o.FilterLocation != nil {

		// query param filter[location]
		var qrFilterLocation string

		if o.FilterLocation != nil {
			qrFilterLocation = *o.FilterLocation
		}
		qFilterLocation := qrFilterLocation
		if qFilterLocation != "" {

			if err := r.SetQueryParam("filter[location]", qFilterLocation); err != nil {
				return err
			}
		}
	}

	if o.FilterProject != nil {

		// query param filter[project]
		var qrFilterProject string

		if o.FilterProject != nil {
			qrFilterProject = *o.FilterProject
		}
		qFilterProject := qrFilterProject
		if qFilterProject != "" {

			if err := r.SetQueryParam("filter[project]", qFilterProject); err != nil {
				return err
			}
		}
	}

	if o.FilterServer != nil {

		// query param filter[server]
		var qrFilterServer string

		if o.FilterServer != nil {
			qrFilterServer = *o.FilterServer
		}
		qFilterServer := qrFilterServer
		if qFilterServer != "" {

			if err := r.SetQueryParam("filter[server]", qFilterServer); err != nil {
				return err
			}
		}
	}

	if o.FilterType != nil {

		// query param filter[type]
		var qrFilterType string

		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := qrFilterType
		if qFilterType != "" {

			if err := r.SetQueryParam("filter[type]", qFilterType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
