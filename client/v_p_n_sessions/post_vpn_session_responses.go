// Code generated by go-swagger; DO NOT EDIT.

package v_p_n_sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// PostVpnSessionReader is a Reader for the PostVpnSession structure.
type PostVpnSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostVpnSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostVpnSessionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewPostVpnSessionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /vpn_sessions] post-vpn-session", response, response.Code())
	}
}

// NewPostVpnSessionCreated creates a PostVpnSessionCreated with default headers values
func NewPostVpnSessionCreated() *PostVpnSessionCreated {
	return &PostVpnSessionCreated{}
}

/*
PostVpnSessionCreated describes a response with status code 201, with default header values.

Created
*/
type PostVpnSessionCreated struct {
	Payload *models.VpnSessionWithPassword
}

// IsSuccess returns true when this post vpn session created response has a 2xx status code
func (o *PostVpnSessionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post vpn session created response has a 3xx status code
func (o *PostVpnSessionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vpn session created response has a 4xx status code
func (o *PostVpnSessionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post vpn session created response has a 5xx status code
func (o *PostVpnSessionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post vpn session created response a status code equal to that given
func (o *PostVpnSessionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post vpn session created response
func (o *PostVpnSessionCreated) Code() int {
	return 201
}

func (o *PostVpnSessionCreated) Error() string {
	return fmt.Sprintf("[POST /vpn_sessions][%d] postVpnSessionCreated  %+v", 201, o.Payload)
}

func (o *PostVpnSessionCreated) String() string {
	return fmt.Sprintf("[POST /vpn_sessions][%d] postVpnSessionCreated  %+v", 201, o.Payload)
}

func (o *PostVpnSessionCreated) GetPayload() *models.VpnSessionWithPassword {
	return o.Payload
}

func (o *PostVpnSessionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VpnSessionWithPassword)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostVpnSessionUnprocessableEntity creates a PostVpnSessionUnprocessableEntity with default headers values
func NewPostVpnSessionUnprocessableEntity() *PostVpnSessionUnprocessableEntity {
	return &PostVpnSessionUnprocessableEntity{}
}

/*
PostVpnSessionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type PostVpnSessionUnprocessableEntity struct {
}

// IsSuccess returns true when this post vpn session unprocessable entity response has a 2xx status code
func (o *PostVpnSessionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post vpn session unprocessable entity response has a 3xx status code
func (o *PostVpnSessionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post vpn session unprocessable entity response has a 4xx status code
func (o *PostVpnSessionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post vpn session unprocessable entity response has a 5xx status code
func (o *PostVpnSessionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post vpn session unprocessable entity response a status code equal to that given
func (o *PostVpnSessionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post vpn session unprocessable entity response
func (o *PostVpnSessionUnprocessableEntity) Code() int {
	return 422
}

func (o *PostVpnSessionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /vpn_sessions][%d] postVpnSessionUnprocessableEntity ", 422)
}

func (o *PostVpnSessionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /vpn_sessions][%d] postVpnSessionUnprocessableEntity ", 422)
}

func (o *PostVpnSessionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostVpnSessionBody post vpn session body
swagger:model PostVpnSessionBody
*/
type PostVpnSessionBody struct {

	// data
	Data *PostVpnSessionParamsBodyData `json:"data,omitempty"`
}

// Validate validates this post vpn session body
func (o *PostVpnSessionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVpnSessionBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post vpn session body based on the context it is used
func (o *PostVpnSessionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVpnSessionBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostVpnSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVpnSessionBody) UnmarshalBinary(b []byte) error {
	var res PostVpnSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostVpnSessionParamsBodyData post vpn session params body data
swagger:model PostVpnSessionParamsBodyData
*/
type PostVpnSessionParamsBodyData struct {

	// attributes
	Attributes *PostVpnSessionParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Enum: [vpn_sessions]
	Type string `json:"type,omitempty"`
}

// Validate validates this post vpn session params body data
func (o *PostVpnSessionParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVpnSessionParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var postVpnSessionParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vpn_sessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postVpnSessionParamsBodyDataTypeTypePropEnum = append(postVpnSessionParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// PostVpnSessionParamsBodyDataTypeVpnSessions captures enum value "vpn_sessions"
	PostVpnSessionParamsBodyDataTypeVpnSessions string = "vpn_sessions"
)

// prop value enum
func (o *PostVpnSessionParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postVpnSessionParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostVpnSessionParamsBodyData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post vpn session params body data based on the context it is used
func (o *PostVpnSessionParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostVpnSessionParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostVpnSessionParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVpnSessionParamsBodyData) UnmarshalBinary(b []byte) error {
	var res PostVpnSessionParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostVpnSessionParamsBodyDataAttributes post vpn session params body data attributes
swagger:model PostVpnSessionParamsBodyDataAttributes
*/
type PostVpnSessionParamsBodyDataAttributes struct {

	// server id
	ServerID string `json:"server_id,omitempty"`

	// site
	// Enum: [ASH BGT BUE CHI DAL FRA LAX LON MEX MEX2 MIA MIA2 NYC SAN SAN2 SAO SAO2 SYD TYO TYO2]
	Site string `json:"site,omitempty"`
}

// Validate validates this post vpn session params body data attributes
func (o *PostVpnSessionParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postVpnSessionParamsBodyDataAttributesTypeSitePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASH","BGT","BUE","CHI","DAL","FRA","LAX","LON","MEX","MEX2","MIA","MIA2","NYC","SAN","SAN2","SAO","SAO2","SYD","TYO","TYO2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postVpnSessionParamsBodyDataAttributesTypeSitePropEnum = append(postVpnSessionParamsBodyDataAttributesTypeSitePropEnum, v)
	}
}

const (

	// PostVpnSessionParamsBodyDataAttributesSiteASH captures enum value "ASH"
	PostVpnSessionParamsBodyDataAttributesSiteASH string = "ASH"

	// PostVpnSessionParamsBodyDataAttributesSiteBGT captures enum value "BGT"
	PostVpnSessionParamsBodyDataAttributesSiteBGT string = "BGT"

	// PostVpnSessionParamsBodyDataAttributesSiteBUE captures enum value "BUE"
	PostVpnSessionParamsBodyDataAttributesSiteBUE string = "BUE"

	// PostVpnSessionParamsBodyDataAttributesSiteCHI captures enum value "CHI"
	PostVpnSessionParamsBodyDataAttributesSiteCHI string = "CHI"

	// PostVpnSessionParamsBodyDataAttributesSiteDAL captures enum value "DAL"
	PostVpnSessionParamsBodyDataAttributesSiteDAL string = "DAL"

	// PostVpnSessionParamsBodyDataAttributesSiteFRA captures enum value "FRA"
	PostVpnSessionParamsBodyDataAttributesSiteFRA string = "FRA"

	// PostVpnSessionParamsBodyDataAttributesSiteLAX captures enum value "LAX"
	PostVpnSessionParamsBodyDataAttributesSiteLAX string = "LAX"

	// PostVpnSessionParamsBodyDataAttributesSiteLON captures enum value "LON"
	PostVpnSessionParamsBodyDataAttributesSiteLON string = "LON"

	// PostVpnSessionParamsBodyDataAttributesSiteMEX captures enum value "MEX"
	PostVpnSessionParamsBodyDataAttributesSiteMEX string = "MEX"

	// PostVpnSessionParamsBodyDataAttributesSiteMEX2 captures enum value "MEX2"
	PostVpnSessionParamsBodyDataAttributesSiteMEX2 string = "MEX2"

	// PostVpnSessionParamsBodyDataAttributesSiteMIA captures enum value "MIA"
	PostVpnSessionParamsBodyDataAttributesSiteMIA string = "MIA"

	// PostVpnSessionParamsBodyDataAttributesSiteMIA2 captures enum value "MIA2"
	PostVpnSessionParamsBodyDataAttributesSiteMIA2 string = "MIA2"

	// PostVpnSessionParamsBodyDataAttributesSiteNYC captures enum value "NYC"
	PostVpnSessionParamsBodyDataAttributesSiteNYC string = "NYC"

	// PostVpnSessionParamsBodyDataAttributesSiteSAN captures enum value "SAN"
	PostVpnSessionParamsBodyDataAttributesSiteSAN string = "SAN"

	// PostVpnSessionParamsBodyDataAttributesSiteSAN2 captures enum value "SAN2"
	PostVpnSessionParamsBodyDataAttributesSiteSAN2 string = "SAN2"

	// PostVpnSessionParamsBodyDataAttributesSiteSAO captures enum value "SAO"
	PostVpnSessionParamsBodyDataAttributesSiteSAO string = "SAO"

	// PostVpnSessionParamsBodyDataAttributesSiteSAO2 captures enum value "SAO2"
	PostVpnSessionParamsBodyDataAttributesSiteSAO2 string = "SAO2"

	// PostVpnSessionParamsBodyDataAttributesSiteSYD captures enum value "SYD"
	PostVpnSessionParamsBodyDataAttributesSiteSYD string = "SYD"

	// PostVpnSessionParamsBodyDataAttributesSiteTYO captures enum value "TYO"
	PostVpnSessionParamsBodyDataAttributesSiteTYO string = "TYO"

	// PostVpnSessionParamsBodyDataAttributesSiteTYO2 captures enum value "TYO2"
	PostVpnSessionParamsBodyDataAttributesSiteTYO2 string = "TYO2"
)

// prop value enum
func (o *PostVpnSessionParamsBodyDataAttributes) validateSiteEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postVpnSessionParamsBodyDataAttributesTypeSitePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostVpnSessionParamsBodyDataAttributes) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(o.Site) { // not required
		return nil
	}

	// value enum
	if err := o.validateSiteEnum("body"+"."+"data"+"."+"attributes"+"."+"site", "body", o.Site); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post vpn session params body data attributes based on context it is used
func (o *PostVpnSessionParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostVpnSessionParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostVpnSessionParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res PostVpnSessionParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
