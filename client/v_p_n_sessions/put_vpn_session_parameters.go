// Code generated by go-swagger; DO NOT EDIT.

package v_p_n_sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutVpnSessionParams creates a new PutVpnSessionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPutVpnSessionParams() *PutVpnSessionParams {
	return &PutVpnSessionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPutVpnSessionParamsWithTimeout creates a new PutVpnSessionParams object
// with the ability to set a timeout on a request.
func NewPutVpnSessionParamsWithTimeout(timeout time.Duration) *PutVpnSessionParams {
	return &PutVpnSessionParams{
		timeout: timeout,
	}
}

// NewPutVpnSessionParamsWithContext creates a new PutVpnSessionParams object
// with the ability to set a context for a request.
func NewPutVpnSessionParamsWithContext(ctx context.Context) *PutVpnSessionParams {
	return &PutVpnSessionParams{
		Context: ctx,
	}
}

// NewPutVpnSessionParamsWithHTTPClient creates a new PutVpnSessionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPutVpnSessionParamsWithHTTPClient(client *http.Client) *PutVpnSessionParams {
	return &PutVpnSessionParams{
		HTTPClient: client,
	}
}

/*
PutVpnSessionParams contains all the parameters to send to the API endpoint

	for the put vpn session operation.

	Typically these are written to a http.Request.
*/
type PutVpnSessionParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	// VpnSessionID.
	VpnSessionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the put vpn session params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutVpnSessionParams) WithDefaults() *PutVpnSessionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the put vpn session params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PutVpnSessionParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := PutVpnSessionParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the put vpn session params
func (o *PutVpnSessionParams) WithTimeout(timeout time.Duration) *PutVpnSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put vpn session params
func (o *PutVpnSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put vpn session params
func (o *PutVpnSessionParams) WithContext(ctx context.Context) *PutVpnSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put vpn session params
func (o *PutVpnSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put vpn session params
func (o *PutVpnSessionParams) WithHTTPClient(client *http.Client) *PutVpnSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put vpn session params
func (o *PutVpnSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the put vpn session params
func (o *PutVpnSessionParams) WithAPIVersion(aPIVersion *string) *PutVpnSessionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the put vpn session params
func (o *PutVpnSessionParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithVpnSessionID adds the vpnSessionID to the put vpn session params
func (o *PutVpnSessionParams) WithVpnSessionID(vpnSessionID string) *PutVpnSessionParams {
	o.SetVpnSessionID(vpnSessionID)
	return o
}

// SetVpnSessionID adds the vpnSessionId to the put vpn session params
func (o *PutVpnSessionParams) SetVpnSessionID(vpnSessionID string) {
	o.VpnSessionID = vpnSessionID
}

// WriteToRequest writes these params to a swagger request
func (o *PutVpnSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	// path param vpn_session_id
	if err := r.SetPathParam("vpn_session_id", o.VpnSessionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
