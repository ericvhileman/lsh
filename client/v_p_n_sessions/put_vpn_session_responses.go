// Code generated by go-swagger; DO NOT EDIT.

package v_p_n_sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// PutVpnSessionReader is a Reader for the PutVpnSession structure.
type PutVpnSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutVpnSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutVpnSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPutVpnSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /vpn_sessions/{vpn_session_id}/refresh_password] put-vpn-session", response, response.Code())
	}
}

// NewPutVpnSessionOK creates a PutVpnSessionOK with default headers values
func NewPutVpnSessionOK() *PutVpnSessionOK {
	return &PutVpnSessionOK{}
}

/*
PutVpnSessionOK describes a response with status code 200, with default header values.

VPN Session Password Reset
*/
type PutVpnSessionOK struct {
	Payload *models.VpnSessionWithPassword
}

// IsSuccess returns true when this put vpn session o k response has a 2xx status code
func (o *PutVpnSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put vpn session o k response has a 3xx status code
func (o *PutVpnSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vpn session o k response has a 4xx status code
func (o *PutVpnSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put vpn session o k response has a 5xx status code
func (o *PutVpnSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put vpn session o k response a status code equal to that given
func (o *PutVpnSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put vpn session o k response
func (o *PutVpnSessionOK) Code() int {
	return 200
}

func (o *PutVpnSessionOK) Error() string {
	return fmt.Sprintf("[PATCH /vpn_sessions/{vpn_session_id}/refresh_password][%d] putVpnSessionOK  %+v", 200, o.Payload)
}

func (o *PutVpnSessionOK) String() string {
	return fmt.Sprintf("[PATCH /vpn_sessions/{vpn_session_id}/refresh_password][%d] putVpnSessionOK  %+v", 200, o.Payload)
}

func (o *PutVpnSessionOK) GetPayload() *models.VpnSessionWithPassword {
	return o.Payload
}

func (o *PutVpnSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VpnSessionWithPassword)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutVpnSessionNotFound creates a PutVpnSessionNotFound with default headers values
func NewPutVpnSessionNotFound() *PutVpnSessionNotFound {
	return &PutVpnSessionNotFound{}
}

/*
PutVpnSessionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutVpnSessionNotFound struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this put vpn session not found response has a 2xx status code
func (o *PutVpnSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put vpn session not found response has a 3xx status code
func (o *PutVpnSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put vpn session not found response has a 4xx status code
func (o *PutVpnSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put vpn session not found response has a 5xx status code
func (o *PutVpnSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put vpn session not found response a status code equal to that given
func (o *PutVpnSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put vpn session not found response
func (o *PutVpnSessionNotFound) Code() int {
	return 404
}

func (o *PutVpnSessionNotFound) Error() string {
	return fmt.Sprintf("[PATCH /vpn_sessions/{vpn_session_id}/refresh_password][%d] putVpnSessionNotFound  %+v", 404, o.Payload)
}

func (o *PutVpnSessionNotFound) String() string {
	return fmt.Sprintf("[PATCH /vpn_sessions/{vpn_session_id}/refresh_password][%d] putVpnSessionNotFound  %+v", 404, o.Payload)
}

func (o *PutVpnSessionNotFound) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *PutVpnSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
