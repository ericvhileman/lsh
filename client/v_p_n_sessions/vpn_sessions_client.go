// Code generated by go-swagger; DO NOT EDIT.

package v_p_n_sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new v p n sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v p n sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteVpnSession(params *DeleteVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVpnSessionNoContent, error)

	GetVpnSessions(params *GetVpnSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVpnSessionsOK, error)

	PostVpnSession(params *PostVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVpnSessionCreated, error)

	PutVpnSession(params *PutVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutVpnSessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteVpnSession deletes a v p n session

Deletes an existing VPN Session.
*/
func (a *Client) DeleteVpnSession(params *DeleteVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVpnSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVpnSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-vpn-session",
		Method:             "DELETE",
		PathPattern:        "/vpn_sessions/{vpn_session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVpnSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVpnSessionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-vpn-session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVpnSessions lists all active v p n sessions
*/
func (a *Client) GetVpnSessions(params *GetVpnSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVpnSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVpnSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-vpn-sessions",
		Method:             "GET",
		PathPattern:        "/vpn_sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVpnSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVpnSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-vpn-sessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostVpnSession creates a v p n session

	Creates a new VPN Session.

`NOTE:` The VPN credentials are only listed ONCE upon creation. They can however be refreshed or deleted.
*/
func (a *Client) PostVpnSession(params *PostVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVpnSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVpnSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-vpn-session",
		Method:             "POST",
		PathPattern:        "/vpn_sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVpnSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVpnSessionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-vpn-session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVpnSession refreshes a v p n session

Refreshing an existing VPN Session will create new credentials for that session
*/
func (a *Client) PutVpnSession(params *PutVpnSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutVpnSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVpnSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-vpn-session",
		Method:             "PATCH",
		PathPattern:        "/vpn_sessions/{vpn_session_id}/refresh_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVpnSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVpnSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-vpn-session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
