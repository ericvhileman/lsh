// Code generated by go-swagger; DO NOT EDIT.

package v_p_n_sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/latitudesh/cli/models"
)

// GetVpnSessionsReader is a Reader for the GetVpnSessions structure.
type GetVpnSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVpnSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVpnSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewGetVpnSessionsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /vpn_sessions] get-vpn-sessions", response, response.Code())
	}
}

// NewGetVpnSessionsOK creates a GetVpnSessionsOK with default headers values
func NewGetVpnSessionsOK() *GetVpnSessionsOK {
	return &GetVpnSessionsOK{}
}

/*
GetVpnSessionsOK describes a response with status code 200, with default header values.

Success
*/
type GetVpnSessionsOK struct {
	Payload *GetVpnSessionsOKBody
}

// IsSuccess returns true when this get vpn sessions o k response has a 2xx status code
func (o *GetVpnSessionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vpn sessions o k response has a 3xx status code
func (o *GetVpnSessionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vpn sessions o k response has a 4xx status code
func (o *GetVpnSessionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vpn sessions o k response has a 5xx status code
func (o *GetVpnSessionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vpn sessions o k response a status code equal to that given
func (o *GetVpnSessionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get vpn sessions o k response
func (o *GetVpnSessionsOK) Code() int {
	return 200
}

func (o *GetVpnSessionsOK) Error() string {
	return fmt.Sprintf("[GET /vpn_sessions][%d] getVpnSessionsOK  %+v", 200, o.Payload)
}

func (o *GetVpnSessionsOK) String() string {
	return fmt.Sprintf("[GET /vpn_sessions][%d] getVpnSessionsOK  %+v", 200, o.Payload)
}

func (o *GetVpnSessionsOK) GetPayload() *GetVpnSessionsOKBody {
	return o.Payload
}

func (o *GetVpnSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVpnSessionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVpnSessionsUnprocessableEntity creates a GetVpnSessionsUnprocessableEntity with default headers values
func NewGetVpnSessionsUnprocessableEntity() *GetVpnSessionsUnprocessableEntity {
	return &GetVpnSessionsUnprocessableEntity{}
}

/*
GetVpnSessionsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type GetVpnSessionsUnprocessableEntity struct {
}

// IsSuccess returns true when this get vpn sessions unprocessable entity response has a 2xx status code
func (o *GetVpnSessionsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vpn sessions unprocessable entity response has a 3xx status code
func (o *GetVpnSessionsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vpn sessions unprocessable entity response has a 4xx status code
func (o *GetVpnSessionsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vpn sessions unprocessable entity response has a 5xx status code
func (o *GetVpnSessionsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get vpn sessions unprocessable entity response a status code equal to that given
func (o *GetVpnSessionsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get vpn sessions unprocessable entity response
func (o *GetVpnSessionsUnprocessableEntity) Code() int {
	return 422
}

func (o *GetVpnSessionsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /vpn_sessions][%d] getVpnSessionsUnprocessableEntity ", 422)
}

func (o *GetVpnSessionsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /vpn_sessions][%d] getVpnSessionsUnprocessableEntity ", 422)
}

func (o *GetVpnSessionsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetVpnSessionsOKBody get vpn sessions o k body
swagger:model GetVpnSessionsOKBody
*/
type GetVpnSessionsOKBody struct {

	// data
	Data []*models.VpnSessionDataWithPassword `json:"data"`

	// meta
	Meta interface{} `json:"meta,omitempty"`
}

// Validate validates this get vpn sessions o k body
func (o *GetVpnSessionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVpnSessionsOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getVpnSessionsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getVpnSessionsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get vpn sessions o k body based on the context it is used
func (o *GetVpnSessionsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVpnSessionsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getVpnSessionsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getVpnSessionsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVpnSessionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVpnSessionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetVpnSessionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
