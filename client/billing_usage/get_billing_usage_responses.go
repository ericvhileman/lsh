// Code generated by go-swagger; DO NOT EDIT.

package billing_usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// GetBillingUsageReader is a Reader for the GetBillingUsage structure.
type GetBillingUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillingUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillingUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /billing/usage] get-billing-usage", response, response.Code())
	}
}

// NewGetBillingUsageOK creates a GetBillingUsageOK with default headers values
func NewGetBillingUsageOK() *GetBillingUsageOK {
	return &GetBillingUsageOK{}
}

/*
GetBillingUsageOK describes a response with status code 200, with default header values.

Success
*/
type GetBillingUsageOK struct {
	Payload *models.BillingUsage
}

// IsSuccess returns true when this get billing usage o k response has a 2xx status code
func (o *GetBillingUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get billing usage o k response has a 3xx status code
func (o *GetBillingUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get billing usage o k response has a 4xx status code
func (o *GetBillingUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get billing usage o k response has a 5xx status code
func (o *GetBillingUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get billing usage o k response a status code equal to that given
func (o *GetBillingUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get billing usage o k response
func (o *GetBillingUsageOK) Code() int {
	return 200
}

func (o *GetBillingUsageOK) Error() string {
	return fmt.Sprintf("[GET /billing/usage][%d] getBillingUsageOK  %+v", 200, o.Payload)
}

func (o *GetBillingUsageOK) String() string {
	return fmt.Sprintf("[GET /billing/usage][%d] getBillingUsageOK  %+v", 200, o.Payload)
}

func (o *GetBillingUsageOK) GetPayload() *models.BillingUsage {
	return o.Payload
}

func (o *GetBillingUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BillingUsage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
