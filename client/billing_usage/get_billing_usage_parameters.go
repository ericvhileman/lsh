// Code generated by go-swagger; DO NOT EDIT.

package billing_usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBillingUsageParams creates a new GetBillingUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBillingUsageParams() *GetBillingUsageParams {
	return &GetBillingUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBillingUsageParamsWithTimeout creates a new GetBillingUsageParams object
// with the ability to set a timeout on a request.
func NewGetBillingUsageParamsWithTimeout(timeout time.Duration) *GetBillingUsageParams {
	return &GetBillingUsageParams{
		timeout: timeout,
	}
}

// NewGetBillingUsageParamsWithContext creates a new GetBillingUsageParams object
// with the ability to set a context for a request.
func NewGetBillingUsageParamsWithContext(ctx context.Context) *GetBillingUsageParams {
	return &GetBillingUsageParams{
		Context: ctx,
	}
}

// NewGetBillingUsageParamsWithHTTPClient creates a new GetBillingUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBillingUsageParamsWithHTTPClient(client *http.Client) *GetBillingUsageParams {
	return &GetBillingUsageParams{
		HTTPClient: client,
	}
}

/*
GetBillingUsageParams contains all the parameters to send to the API endpoint

	for the get billing usage operation.

	Typically these are written to a http.Request.
*/
type GetBillingUsageParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	/* FilterPlan.

	   Accepts a plan name and allows to filter the usage for that plan.

	*/
	FilterPlan *string

	/* FilterProducts.

	   Allows to filter the billing usage for specific products. It accepts an array of product ids.

	*/
	FilterProducts []string

	// FilterProject.
	FilterProject string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get billing usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBillingUsageParams) WithDefaults() *GetBillingUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get billing usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBillingUsageParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := GetBillingUsageParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get billing usage params
func (o *GetBillingUsageParams) WithTimeout(timeout time.Duration) *GetBillingUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get billing usage params
func (o *GetBillingUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get billing usage params
func (o *GetBillingUsageParams) WithContext(ctx context.Context) *GetBillingUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get billing usage params
func (o *GetBillingUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get billing usage params
func (o *GetBillingUsageParams) WithHTTPClient(client *http.Client) *GetBillingUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get billing usage params
func (o *GetBillingUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get billing usage params
func (o *GetBillingUsageParams) WithAPIVersion(aPIVersion *string) *GetBillingUsageParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get billing usage params
func (o *GetBillingUsageParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithFilterPlan adds the filterPlan to the get billing usage params
func (o *GetBillingUsageParams) WithFilterPlan(filterPlan *string) *GetBillingUsageParams {
	o.SetFilterPlan(filterPlan)
	return o
}

// SetFilterPlan adds the filterPlan to the get billing usage params
func (o *GetBillingUsageParams) SetFilterPlan(filterPlan *string) {
	o.FilterPlan = filterPlan
}

// WithFilterProducts adds the filterProducts to the get billing usage params
func (o *GetBillingUsageParams) WithFilterProducts(filterProducts []string) *GetBillingUsageParams {
	o.SetFilterProducts(filterProducts)
	return o
}

// SetFilterProducts adds the filterProducts to the get billing usage params
func (o *GetBillingUsageParams) SetFilterProducts(filterProducts []string) {
	o.FilterProducts = filterProducts
}

// WithFilterProject adds the filterProject to the get billing usage params
func (o *GetBillingUsageParams) WithFilterProject(filterProject string) *GetBillingUsageParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get billing usage params
func (o *GetBillingUsageParams) SetFilterProject(filterProject string) {
	o.FilterProject = filterProject
}

// WriteToRequest writes these params to a swagger request
func (o *GetBillingUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	if o.FilterPlan != nil {

		// query param filter[plan]
		var qrFilterPlan string

		if o.FilterPlan != nil {
			qrFilterPlan = *o.FilterPlan
		}
		qFilterPlan := qrFilterPlan
		if qFilterPlan != "" {

			if err := r.SetQueryParam("filter[plan]", qFilterPlan); err != nil {
				return err
			}
		}
	}

	if o.FilterProducts != nil {

		// binding items for filter[products][]
		joinedFilterProducts := o.bindParamFilterProducts(reg)

		// query array param filter[products][]
		if err := r.SetQueryParam("filter[products][]", joinedFilterProducts...); err != nil {
			return err
		}
	}

	// query param filter[project]
	qrFilterProject := o.FilterProject
	qFilterProject := qrFilterProject
	if qFilterProject != "" {

		if err := r.SetQueryParam("filter[project]", qFilterProject); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetBillingUsage binds the parameter filter[products][]
func (o *GetBillingUsageParams) bindParamFilterProducts(formats strfmt.Registry) []string {
	filterProductsIR := o.FilterProducts

	var filterProductsIC []string
	for _, filterProductsIIR := range filterProductsIR { // explode []string

		filterProductsIIV := filterProductsIIR // string as string
		filterProductsIC = append(filterProductsIC, filterProductsIIV)
	}

	// items.CollectionFormat: "multi"
	filterProductsIS := swag.JoinByFormat(filterProductsIC, "multi")

	return filterProductsIS
}
