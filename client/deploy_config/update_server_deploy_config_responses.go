// Code generated by go-swagger; DO NOT EDIT.

package deploy_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// UpdateServerDeployConfigReader is a Reader for the UpdateServerDeployConfig structure.
type UpdateServerDeployConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServerDeployConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServerDeployConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateServerDeployConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewUpdateServerDeployConfigNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateServerDeployConfigUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /servers/{server_id}/deploy_config] update-server-deploy-config", response, response.Code())
	}
}

// NewUpdateServerDeployConfigOK creates a UpdateServerDeployConfigOK with default headers values
func NewUpdateServerDeployConfigOK() *UpdateServerDeployConfigOK {
	return &UpdateServerDeployConfigOK{}
}

/*
UpdateServerDeployConfigOK describes a response with status code 200, with default header values.

Success
*/
type UpdateServerDeployConfigOK struct {
	Payload *models.DeployConfig
}

// IsSuccess returns true when this update server deploy config o k response has a 2xx status code
func (o *UpdateServerDeployConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update server deploy config o k response has a 3xx status code
func (o *UpdateServerDeployConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server deploy config o k response has a 4xx status code
func (o *UpdateServerDeployConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update server deploy config o k response has a 5xx status code
func (o *UpdateServerDeployConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update server deploy config o k response a status code equal to that given
func (o *UpdateServerDeployConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update server deploy config o k response
func (o *UpdateServerDeployConfigOK) Code() int {
	return 200
}

func (o *UpdateServerDeployConfigOK) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateServerDeployConfigOK) String() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateServerDeployConfigOK) GetPayload() *models.DeployConfig {
	return o.Payload
}

func (o *UpdateServerDeployConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeployConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerDeployConfigForbidden creates a UpdateServerDeployConfigForbidden with default headers values
func NewUpdateServerDeployConfigForbidden() *UpdateServerDeployConfigForbidden {
	return &UpdateServerDeployConfigForbidden{}
}

/*
UpdateServerDeployConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateServerDeployConfigForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this update server deploy config forbidden response has a 2xx status code
func (o *UpdateServerDeployConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server deploy config forbidden response has a 3xx status code
func (o *UpdateServerDeployConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server deploy config forbidden response has a 4xx status code
func (o *UpdateServerDeployConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server deploy config forbidden response has a 5xx status code
func (o *UpdateServerDeployConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update server deploy config forbidden response a status code equal to that given
func (o *UpdateServerDeployConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update server deploy config forbidden response
func (o *UpdateServerDeployConfigForbidden) Code() int {
	return 403
}

func (o *UpdateServerDeployConfigForbidden) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServerDeployConfigForbidden) String() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServerDeployConfigForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *UpdateServerDeployConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerDeployConfigNotAcceptable creates a UpdateServerDeployConfigNotAcceptable with default headers values
func NewUpdateServerDeployConfigNotAcceptable() *UpdateServerDeployConfigNotAcceptable {
	return &UpdateServerDeployConfigNotAcceptable{}
}

/*
UpdateServerDeployConfigNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type UpdateServerDeployConfigNotAcceptable struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this update server deploy config not acceptable response has a 2xx status code
func (o *UpdateServerDeployConfigNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server deploy config not acceptable response has a 3xx status code
func (o *UpdateServerDeployConfigNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server deploy config not acceptable response has a 4xx status code
func (o *UpdateServerDeployConfigNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server deploy config not acceptable response has a 5xx status code
func (o *UpdateServerDeployConfigNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this update server deploy config not acceptable response a status code equal to that given
func (o *UpdateServerDeployConfigNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the update server deploy config not acceptable response
func (o *UpdateServerDeployConfigNotAcceptable) Code() int {
	return 406
}

func (o *UpdateServerDeployConfigNotAcceptable) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateServerDeployConfigNotAcceptable) String() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigNotAcceptable  %+v", 406, o.Payload)
}

func (o *UpdateServerDeployConfigNotAcceptable) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *UpdateServerDeployConfigNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServerDeployConfigUnprocessableEntity creates a UpdateServerDeployConfigUnprocessableEntity with default headers values
func NewUpdateServerDeployConfigUnprocessableEntity() *UpdateServerDeployConfigUnprocessableEntity {
	return &UpdateServerDeployConfigUnprocessableEntity{}
}

/*
UpdateServerDeployConfigUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type UpdateServerDeployConfigUnprocessableEntity struct {
	Payload *models.DeployConfig
}

// IsSuccess returns true when this update server deploy config unprocessable entity response has a 2xx status code
func (o *UpdateServerDeployConfigUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update server deploy config unprocessable entity response has a 3xx status code
func (o *UpdateServerDeployConfigUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update server deploy config unprocessable entity response has a 4xx status code
func (o *UpdateServerDeployConfigUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update server deploy config unprocessable entity response has a 5xx status code
func (o *UpdateServerDeployConfigUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update server deploy config unprocessable entity response a status code equal to that given
func (o *UpdateServerDeployConfigUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update server deploy config unprocessable entity response
func (o *UpdateServerDeployConfigUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateServerDeployConfigUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateServerDeployConfigUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /servers/{server_id}/deploy_config][%d] updateServerDeployConfigUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateServerDeployConfigUnprocessableEntity) GetPayload() *models.DeployConfig {
	return o.Payload
}

func (o *UpdateServerDeployConfigUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeployConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateServerDeployConfigBody update server deploy config body
swagger:model UpdateServerDeployConfigBody
*/
type UpdateServerDeployConfigBody struct {

	// attributes
	Attributes *UpdateServerDeployConfigParamsBodyAttributes `json:"attributes,omitempty"`

	// type
	// Required: true
	// Enum: [deploy_config]
	Type *string `json:"type"`
}

// Validate validates this update server deploy config body
func (o *UpdateServerDeployConfigBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerDeployConfigBody) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var updateServerDeployConfigBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deploy_config"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateServerDeployConfigBodyTypeTypePropEnum = append(updateServerDeployConfigBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateServerDeployConfigBodyTypeDeployConfig captures enum value "deploy_config"
	UpdateServerDeployConfigBodyTypeDeployConfig string = "deploy_config"
)

// prop value enum
func (o *UpdateServerDeployConfigBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateServerDeployConfigBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerDeployConfigBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update server deploy config body based on the context it is used
func (o *UpdateServerDeployConfigBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServerDeployConfigBody) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerDeployConfigBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerDeployConfigBody) UnmarshalBinary(b []byte) error {
	var res UpdateServerDeployConfigBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateServerDeployConfigParamsBodyAttributes update server deploy config params body attributes
swagger:model UpdateServerDeployConfigParamsBodyAttributes
*/
type UpdateServerDeployConfigParamsBodyAttributes struct {

	// hostname
	Hostname *string `json:"hostname,omitempty"`

	// URL where iPXE script is stored on, necessary for custom image deployments. This attribute is required when operating system iPXE is selected.
	IpxeURL *string `json:"ipxe_url,omitempty"`

	// operating system
	// Enum: [ipxe windows_server_2019_std_v1 ubuntu_22_04_x64_lts debian_11 rockylinux_8 debian_10 rhel8 centos_7_4_x64 centos_8_x64 ubuntu_20_04_x64_lts debian_12 ubuntu22_ml_in_a_box windows2022]
	OperatingSystem *string `json:"operating_system,omitempty"`

	// raid
	// Enum: [raid-0 raid-1]
	Raid *string `json:"raid,omitempty"`

	// ssh keys
	SSHKeys []int64 `json:"ssh_keys"`

	// User data to configure the server
	UserData *int64 `json:"user_data,omitempty"`
}

// Validate validates this update server deploy config params body attributes
func (o *UpdateServerDeployConfigParamsBodyAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRaid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateServerDeployConfigParamsBodyAttributesTypeOperatingSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipxe","windows_server_2019_std_v1","ubuntu_22_04_x64_lts","debian_11","rockylinux_8","debian_10","rhel8","centos_7_4_x64","centos_8_x64","ubuntu_20_04_x64_lts","debian_12","ubuntu22_ml_in_a_box","windows2022"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateServerDeployConfigParamsBodyAttributesTypeOperatingSystemPropEnum = append(updateServerDeployConfigParamsBodyAttributesTypeOperatingSystemPropEnum, v)
	}
}

const (

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemIpxe captures enum value "ipxe"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemIpxe string = "ipxe"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemWindowsServer2019StdV1 captures enum value "windows_server_2019_std_v1"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemWindowsServer2019StdV1 string = "windows_server_2019_std_v1"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu2204X64Lts captures enum value "ubuntu_22_04_x64_lts"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu2204X64Lts string = "ubuntu_22_04_x64_lts"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian11 captures enum value "debian_11"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian11 string = "debian_11"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemRockylinux8 captures enum value "rockylinux_8"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemRockylinux8 string = "rockylinux_8"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian10 captures enum value "debian_10"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian10 string = "debian_10"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemRhel8 captures enum value "rhel8"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemRhel8 string = "rhel8"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemCentos74X64 captures enum value "centos_7_4_x64"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemCentos74X64 string = "centos_7_4_x64"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemCentos8X64 captures enum value "centos_8_x64"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemCentos8X64 string = "centos_8_x64"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu2004X64Lts captures enum value "ubuntu_20_04_x64_lts"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu2004X64Lts string = "ubuntu_20_04_x64_lts"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian12 captures enum value "debian_12"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemDebian12 string = "debian_12"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu22MlInaBox captures enum value "ubuntu22_ml_in_a_box"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemUbuntu22MlInaBox string = "ubuntu22_ml_in_a_box"

	// UpdateServerDeployConfigParamsBodyAttributesOperatingSystemWindows2022 captures enum value "windows2022"
	UpdateServerDeployConfigParamsBodyAttributesOperatingSystemWindows2022 string = "windows2022"
)

// prop value enum
func (o *UpdateServerDeployConfigParamsBodyAttributes) validateOperatingSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateServerDeployConfigParamsBodyAttributesTypeOperatingSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerDeployConfigParamsBodyAttributes) validateOperatingSystem(formats strfmt.Registry) error {
	if swag.IsZero(o.OperatingSystem) { // not required
		return nil
	}

	// value enum
	if err := o.validateOperatingSystemEnum("body"+"."+"attributes"+"."+"operating_system", "body", *o.OperatingSystem); err != nil {
		return err
	}

	return nil
}

var updateServerDeployConfigParamsBodyAttributesTypeRaidPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raid-0","raid-1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateServerDeployConfigParamsBodyAttributesTypeRaidPropEnum = append(updateServerDeployConfigParamsBodyAttributesTypeRaidPropEnum, v)
	}
}

const (

	// UpdateServerDeployConfigParamsBodyAttributesRaidRaidDash0 captures enum value "raid-0"
	UpdateServerDeployConfigParamsBodyAttributesRaidRaidDash0 string = "raid-0"

	// UpdateServerDeployConfigParamsBodyAttributesRaidRaidDash1 captures enum value "raid-1"
	UpdateServerDeployConfigParamsBodyAttributesRaidRaidDash1 string = "raid-1"
)

// prop value enum
func (o *UpdateServerDeployConfigParamsBodyAttributes) validateRaidEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateServerDeployConfigParamsBodyAttributesTypeRaidPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerDeployConfigParamsBodyAttributes) validateRaid(formats strfmt.Registry) error {
	if swag.IsZero(o.Raid) { // not required
		return nil
	}

	// value enum
	if err := o.validateRaidEnum("body"+"."+"attributes"+"."+"raid", "body", *o.Raid); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update server deploy config params body attributes based on context it is used
func (o *UpdateServerDeployConfigParamsBodyAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServerDeployConfigParamsBodyAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServerDeployConfigParamsBodyAttributes) UnmarshalBinary(b []byte) error {
	var res UpdateServerDeployConfigParamsBodyAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
