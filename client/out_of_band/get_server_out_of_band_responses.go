// Code generated by go-swagger; DO NOT EDIT.

package out_of_band

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// GetServerOutOfBandReader is a Reader for the GetServerOutOfBand structure.
type GetServerOutOfBandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerOutOfBandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerOutOfBandOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetServerOutOfBandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{server_id}/out_of_band_connection] get-server-out-of-band", response, response.Code())
	}
}

// NewGetServerOutOfBandOK creates a GetServerOutOfBandOK with default headers values
func NewGetServerOutOfBandOK() *GetServerOutOfBandOK {
	return &GetServerOutOfBandOK{}
}

/*
GetServerOutOfBandOK describes a response with status code 200, with default header values.

Success
*/
type GetServerOutOfBandOK struct {
	Payload *models.OutOfBandConnection
}

// IsSuccess returns true when this get server out of band o k response has a 2xx status code
func (o *GetServerOutOfBandOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get server out of band o k response has a 3xx status code
func (o *GetServerOutOfBandOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server out of band o k response has a 4xx status code
func (o *GetServerOutOfBandOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server out of band o k response has a 5xx status code
func (o *GetServerOutOfBandOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get server out of band o k response a status code equal to that given
func (o *GetServerOutOfBandOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get server out of band o k response
func (o *GetServerOutOfBandOK) Code() int {
	return 200
}

func (o *GetServerOutOfBandOK) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/out_of_band_connection][%d] getServerOutOfBandOK  %+v", 200, o.Payload)
}

func (o *GetServerOutOfBandOK) String() string {
	return fmt.Sprintf("[GET /servers/{server_id}/out_of_band_connection][%d] getServerOutOfBandOK  %+v", 200, o.Payload)
}

func (o *GetServerOutOfBandOK) GetPayload() *models.OutOfBandConnection {
	return o.Payload
}

func (o *GetServerOutOfBandOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutOfBandConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerOutOfBandNotFound creates a GetServerOutOfBandNotFound with default headers values
func NewGetServerOutOfBandNotFound() *GetServerOutOfBandNotFound {
	return &GetServerOutOfBandNotFound{}
}

/*
GetServerOutOfBandNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetServerOutOfBandNotFound struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this get server out of band not found response has a 2xx status code
func (o *GetServerOutOfBandNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server out of band not found response has a 3xx status code
func (o *GetServerOutOfBandNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server out of band not found response has a 4xx status code
func (o *GetServerOutOfBandNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server out of band not found response has a 5xx status code
func (o *GetServerOutOfBandNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get server out of band not found response a status code equal to that given
func (o *GetServerOutOfBandNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get server out of band not found response
func (o *GetServerOutOfBandNotFound) Code() int {
	return 404
}

func (o *GetServerOutOfBandNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{server_id}/out_of_band_connection][%d] getServerOutOfBandNotFound  %+v", 404, o.Payload)
}

func (o *GetServerOutOfBandNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{server_id}/out_of_band_connection][%d] getServerOutOfBandNotFound  %+v", 404, o.Payload)
}

func (o *GetServerOutOfBandNotFound) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *GetServerOutOfBandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
