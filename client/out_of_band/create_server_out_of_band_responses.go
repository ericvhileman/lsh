// Code generated by go-swagger; DO NOT EDIT.

package out_of_band

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// CreateServerOutOfBandReader is a Reader for the CreateServerOutOfBand structure.
type CreateServerOutOfBandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServerOutOfBandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateServerOutOfBandCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCreateServerOutOfBandForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateServerOutOfBandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCreateServerOutOfBandNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{server_id}/out_of_band_connection] create-server-out-of-band", response, response.Code())
	}
}

// NewCreateServerOutOfBandCreated creates a CreateServerOutOfBandCreated with default headers values
func NewCreateServerOutOfBandCreated() *CreateServerOutOfBandCreated {
	return &CreateServerOutOfBandCreated{}
}

/*
CreateServerOutOfBandCreated describes a response with status code 201, with default header values.

Created
*/
type CreateServerOutOfBandCreated struct {
	Payload *models.OutOfBandConnection
}

// IsSuccess returns true when this create server out of band created response has a 2xx status code
func (o *CreateServerOutOfBandCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create server out of band created response has a 3xx status code
func (o *CreateServerOutOfBandCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server out of band created response has a 4xx status code
func (o *CreateServerOutOfBandCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create server out of band created response has a 5xx status code
func (o *CreateServerOutOfBandCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create server out of band created response a status code equal to that given
func (o *CreateServerOutOfBandCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create server out of band created response
func (o *CreateServerOutOfBandCreated) Code() int {
	return 201
}

func (o *CreateServerOutOfBandCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandCreated  %+v", 201, o.Payload)
}

func (o *CreateServerOutOfBandCreated) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandCreated  %+v", 201, o.Payload)
}

func (o *CreateServerOutOfBandCreated) GetPayload() *models.OutOfBandConnection {
	return o.Payload
}

func (o *CreateServerOutOfBandCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OutOfBandConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerOutOfBandForbidden creates a CreateServerOutOfBandForbidden with default headers values
func NewCreateServerOutOfBandForbidden() *CreateServerOutOfBandForbidden {
	return &CreateServerOutOfBandForbidden{}
}

/*
CreateServerOutOfBandForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateServerOutOfBandForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this create server out of band forbidden response has a 2xx status code
func (o *CreateServerOutOfBandForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create server out of band forbidden response has a 3xx status code
func (o *CreateServerOutOfBandForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server out of band forbidden response has a 4xx status code
func (o *CreateServerOutOfBandForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create server out of band forbidden response has a 5xx status code
func (o *CreateServerOutOfBandForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create server out of band forbidden response a status code equal to that given
func (o *CreateServerOutOfBandForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create server out of band forbidden response
func (o *CreateServerOutOfBandForbidden) Code() int {
	return 403
}

func (o *CreateServerOutOfBandForbidden) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandForbidden  %+v", 403, o.Payload)
}

func (o *CreateServerOutOfBandForbidden) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandForbidden  %+v", 403, o.Payload)
}

func (o *CreateServerOutOfBandForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *CreateServerOutOfBandForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerOutOfBandNotFound creates a CreateServerOutOfBandNotFound with default headers values
func NewCreateServerOutOfBandNotFound() *CreateServerOutOfBandNotFound {
	return &CreateServerOutOfBandNotFound{}
}

/*
CreateServerOutOfBandNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateServerOutOfBandNotFound struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this create server out of band not found response has a 2xx status code
func (o *CreateServerOutOfBandNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create server out of band not found response has a 3xx status code
func (o *CreateServerOutOfBandNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server out of band not found response has a 4xx status code
func (o *CreateServerOutOfBandNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create server out of band not found response has a 5xx status code
func (o *CreateServerOutOfBandNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create server out of band not found response a status code equal to that given
func (o *CreateServerOutOfBandNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create server out of band not found response
func (o *CreateServerOutOfBandNotFound) Code() int {
	return 404
}

func (o *CreateServerOutOfBandNotFound) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandNotFound  %+v", 404, o.Payload)
}

func (o *CreateServerOutOfBandNotFound) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandNotFound  %+v", 404, o.Payload)
}

func (o *CreateServerOutOfBandNotFound) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *CreateServerOutOfBandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServerOutOfBandNotAcceptable creates a CreateServerOutOfBandNotAcceptable with default headers values
func NewCreateServerOutOfBandNotAcceptable() *CreateServerOutOfBandNotAcceptable {
	return &CreateServerOutOfBandNotAcceptable{}
}

/*
CreateServerOutOfBandNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type CreateServerOutOfBandNotAcceptable struct {
}

// IsSuccess returns true when this create server out of band not acceptable response has a 2xx status code
func (o *CreateServerOutOfBandNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create server out of band not acceptable response has a 3xx status code
func (o *CreateServerOutOfBandNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create server out of band not acceptable response has a 4xx status code
func (o *CreateServerOutOfBandNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this create server out of band not acceptable response has a 5xx status code
func (o *CreateServerOutOfBandNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this create server out of band not acceptable response a status code equal to that given
func (o *CreateServerOutOfBandNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the create server out of band not acceptable response
func (o *CreateServerOutOfBandNotAcceptable) Code() int {
	return 406
}

func (o *CreateServerOutOfBandNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandNotAcceptable ", 406)
}

func (o *CreateServerOutOfBandNotAcceptable) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/out_of_band_connection][%d] createServerOutOfBandNotAcceptable ", 406)
}

func (o *CreateServerOutOfBandNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
CreateServerOutOfBandBody create server out of band body
swagger:model CreateServerOutOfBandBody
*/
type CreateServerOutOfBandBody struct {

	// data
	// Required: true
	Data *CreateServerOutOfBandParamsBodyData `json:"data"`
}

// Validate validates this create server out of band body
func (o *CreateServerOutOfBandBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerOutOfBandBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create server out of band body based on the context it is used
func (o *CreateServerOutOfBandBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerOutOfBandBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerOutOfBandBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerOutOfBandBody) UnmarshalBinary(b []byte) error {
	var res CreateServerOutOfBandBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateServerOutOfBandParamsBodyData create server out of band params body data
swagger:model CreateServerOutOfBandParamsBodyData
*/
type CreateServerOutOfBandParamsBodyData struct {

	// attributes
	Attributes *CreateServerOutOfBandParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Required: true
	// Enum: [out_of_band]
	Type *string `json:"type"`
}

// Validate validates this create server out of band params body data
func (o *CreateServerOutOfBandParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerOutOfBandParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var createServerOutOfBandParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["out_of_band"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createServerOutOfBandParamsBodyDataTypeTypePropEnum = append(createServerOutOfBandParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// CreateServerOutOfBandParamsBodyDataTypeOutOfBand captures enum value "out_of_band"
	CreateServerOutOfBandParamsBodyDataTypeOutOfBand string = "out_of_band"
)

// prop value enum
func (o *CreateServerOutOfBandParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createServerOutOfBandParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateServerOutOfBandParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create server out of band params body data based on the context it is used
func (o *CreateServerOutOfBandParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateServerOutOfBandParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerOutOfBandParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerOutOfBandParamsBodyData) UnmarshalBinary(b []byte) error {
	var res CreateServerOutOfBandParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateServerOutOfBandParamsBodyDataAttributes create server out of band params body data attributes
swagger:model CreateServerOutOfBandParamsBodyDataAttributes
*/
type CreateServerOutOfBandParamsBodyDataAttributes struct {

	// SSH Key ID to set for out of band
	SSHKeyID string `json:"ssh_key_id,omitempty"`
}

// Validate validates this create server out of band params body data attributes
func (o *CreateServerOutOfBandParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create server out of band params body data attributes based on context it is used
func (o *CreateServerOutOfBandParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateServerOutOfBandParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateServerOutOfBandParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res CreateServerOutOfBandParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
