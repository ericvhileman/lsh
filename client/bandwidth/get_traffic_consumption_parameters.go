// Code generated by go-swagger; DO NOT EDIT.

package bandwidth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTrafficConsumptionParams creates a new GetTrafficConsumptionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTrafficConsumptionParams() *GetTrafficConsumptionParams {
	return &GetTrafficConsumptionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTrafficConsumptionParamsWithTimeout creates a new GetTrafficConsumptionParams object
// with the ability to set a timeout on a request.
func NewGetTrafficConsumptionParamsWithTimeout(timeout time.Duration) *GetTrafficConsumptionParams {
	return &GetTrafficConsumptionParams{
		timeout: timeout,
	}
}

// NewGetTrafficConsumptionParamsWithContext creates a new GetTrafficConsumptionParams object
// with the ability to set a context for a request.
func NewGetTrafficConsumptionParamsWithContext(ctx context.Context) *GetTrafficConsumptionParams {
	return &GetTrafficConsumptionParams{
		Context: ctx,
	}
}

// NewGetTrafficConsumptionParamsWithHTTPClient creates a new GetTrafficConsumptionParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTrafficConsumptionParamsWithHTTPClient(client *http.Client) *GetTrafficConsumptionParams {
	return &GetTrafficConsumptionParams{
		HTTPClient: client,
	}
}

/*
GetTrafficConsumptionParams contains all the parameters to send to the API endpoint

	for the get traffic consumption operation.

	Typically these are written to a http.Request.
*/
type GetTrafficConsumptionParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	/* FilterFromDate.

	   The start timestamp. Must be a unix timestamp
	*/
	FilterFromDate *int64

	// FilterProject.
	FilterProject *int64

	// FilterServer.
	FilterServer *int64

	/* FilterToDate.

	   The end timestamp. Must be a unix timestamp
	*/
	FilterToDate *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get traffic consumption params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTrafficConsumptionParams) WithDefaults() *GetTrafficConsumptionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get traffic consumption params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTrafficConsumptionParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := GetTrafficConsumptionParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithTimeout(timeout time.Duration) *GetTrafficConsumptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithContext(ctx context.Context) *GetTrafficConsumptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithHTTPClient(client *http.Client) *GetTrafficConsumptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithAPIVersion(aPIVersion *string) *GetTrafficConsumptionParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithFilterFromDate adds the filterFromDate to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithFilterFromDate(filterFromDate *int64) *GetTrafficConsumptionParams {
	o.SetFilterFromDate(filterFromDate)
	return o
}

// SetFilterFromDate adds the filterFromDate to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetFilterFromDate(filterFromDate *int64) {
	o.FilterFromDate = filterFromDate
}

// WithFilterProject adds the filterProject to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithFilterProject(filterProject *int64) *GetTrafficConsumptionParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetFilterProject(filterProject *int64) {
	o.FilterProject = filterProject
}

// WithFilterServer adds the filterServer to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithFilterServer(filterServer *int64) *GetTrafficConsumptionParams {
	o.SetFilterServer(filterServer)
	return o
}

// SetFilterServer adds the filterServer to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetFilterServer(filterServer *int64) {
	o.FilterServer = filterServer
}

// WithFilterToDate adds the filterToDate to the get traffic consumption params
func (o *GetTrafficConsumptionParams) WithFilterToDate(filterToDate *int64) *GetTrafficConsumptionParams {
	o.SetFilterToDate(filterToDate)
	return o
}

// SetFilterToDate adds the filterToDate to the get traffic consumption params
func (o *GetTrafficConsumptionParams) SetFilterToDate(filterToDate *int64) {
	o.FilterToDate = filterToDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetTrafficConsumptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	if o.FilterFromDate != nil {

		// query param filter[from_date]
		var qrFilterFromDate int64

		if o.FilterFromDate != nil {
			qrFilterFromDate = *o.FilterFromDate
		}
		qFilterFromDate := swag.FormatInt64(qrFilterFromDate)
		if qFilterFromDate != "" {

			if err := r.SetQueryParam("filter[from_date]", qFilterFromDate); err != nil {
				return err
			}
		}
	}

	if o.FilterProject != nil {

		// query param filter[project]
		var qrFilterProject int64

		if o.FilterProject != nil {
			qrFilterProject = *o.FilterProject
		}
		qFilterProject := swag.FormatInt64(qrFilterProject)
		if qFilterProject != "" {

			if err := r.SetQueryParam("filter[project]", qFilterProject); err != nil {
				return err
			}
		}
	}

	if o.FilterServer != nil {

		// query param filter[server]
		var qrFilterServer int64

		if o.FilterServer != nil {
			qrFilterServer = *o.FilterServer
		}
		qFilterServer := swag.FormatInt64(qrFilterServer)
		if qFilterServer != "" {

			if err := r.SetQueryParam("filter[server]", qFilterServer); err != nil {
				return err
			}
		}
	}

	if o.FilterToDate != nil {

		// query param filter[to_date]
		var qrFilterToDate int64

		if o.FilterToDate != nil {
			qrFilterToDate = *o.FilterToDate
		}
		qFilterToDate := swag.FormatInt64(qrFilterToDate)
		if qFilterToDate != "" {

			if err := r.SetQueryParam("filter[to_date]", qFilterToDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
