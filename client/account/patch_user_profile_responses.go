// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// PatchUserProfileReader is a Reader for the PatchUserProfile structure.
type PatchUserProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUserProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchUserProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchUserProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchUserProfileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /user/profile/{id}] patch-user-profile", response, response.Code())
	}
}

// NewPatchUserProfileOK creates a PatchUserProfileOK with default headers values
func NewPatchUserProfileOK() *PatchUserProfileOK {
	return &PatchUserProfileOK{}
}

/*
PatchUserProfileOK describes a response with status code 200, with default header values.

Success
*/
type PatchUserProfileOK struct {
	Payload *PatchUserProfileOKBody
}

// IsSuccess returns true when this patch user profile o k response has a 2xx status code
func (o *PatchUserProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch user profile o k response has a 3xx status code
func (o *PatchUserProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user profile o k response has a 4xx status code
func (o *PatchUserProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch user profile o k response has a 5xx status code
func (o *PatchUserProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user profile o k response a status code equal to that given
func (o *PatchUserProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch user profile o k response
func (o *PatchUserProfileOK) Code() int {
	return 200
}

func (o *PatchUserProfileOK) Error() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileOK  %+v", 200, o.Payload)
}

func (o *PatchUserProfileOK) String() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileOK  %+v", 200, o.Payload)
}

func (o *PatchUserProfileOK) GetPayload() *PatchUserProfileOKBody {
	return o.Payload
}

func (o *PatchUserProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchUserProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserProfileForbidden creates a PatchUserProfileForbidden with default headers values
func NewPatchUserProfileForbidden() *PatchUserProfileForbidden {
	return &PatchUserProfileForbidden{}
}

/*
PatchUserProfileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchUserProfileForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this patch user profile forbidden response has a 2xx status code
func (o *PatchUserProfileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user profile forbidden response has a 3xx status code
func (o *PatchUserProfileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user profile forbidden response has a 4xx status code
func (o *PatchUserProfileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user profile forbidden response has a 5xx status code
func (o *PatchUserProfileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user profile forbidden response a status code equal to that given
func (o *PatchUserProfileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch user profile forbidden response
func (o *PatchUserProfileForbidden) Code() int {
	return 403
}

func (o *PatchUserProfileForbidden) Error() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserProfileForbidden) String() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileForbidden  %+v", 403, o.Payload)
}

func (o *PatchUserProfileForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *PatchUserProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchUserProfileUnprocessableEntity creates a PatchUserProfileUnprocessableEntity with default headers values
func NewPatchUserProfileUnprocessableEntity() *PatchUserProfileUnprocessableEntity {
	return &PatchUserProfileUnprocessableEntity{}
}

/*
PatchUserProfileUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type PatchUserProfileUnprocessableEntity struct {
}

// IsSuccess returns true when this patch user profile unprocessable entity response has a 2xx status code
func (o *PatchUserProfileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch user profile unprocessable entity response has a 3xx status code
func (o *PatchUserProfileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch user profile unprocessable entity response has a 4xx status code
func (o *PatchUserProfileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch user profile unprocessable entity response has a 5xx status code
func (o *PatchUserProfileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this patch user profile unprocessable entity response a status code equal to that given
func (o *PatchUserProfileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the patch user profile unprocessable entity response
func (o *PatchUserProfileUnprocessableEntity) Code() int {
	return 422
}

func (o *PatchUserProfileUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileUnprocessableEntity ", 422)
}

func (o *PatchUserProfileUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /user/profile/{id}][%d] patchUserProfileUnprocessableEntity ", 422)
}

func (o *PatchUserProfileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PatchUserProfileBody patch user profile body
swagger:model PatchUserProfileBody
*/
type PatchUserProfileBody struct {

	// data
	// Required: true
	Data *PatchUserProfileParamsBodyData `json:"data"`
}

// Validate validates this patch user profile body
func (o *PatchUserProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch user profile body based on the context it is used
func (o *PatchUserProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserProfileBody) UnmarshalBinary(b []byte) error {
	var res PatchUserProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchUserProfileOKBody patch user profile o k body
swagger:model PatchUserProfileOKBody
*/
type PatchUserProfileOKBody struct {

	// data
	Data *models.UserUpdate `json:"data,omitempty"`
}

// Validate validates this patch user profile o k body
func (o *PatchUserProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchUserProfileOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchUserProfileOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch user profile o k body based on the context it is used
func (o *PatchUserProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchUserProfileOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patchUserProfileOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserProfileOKBody) UnmarshalBinary(b []byte) error {
	var res PatchUserProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchUserProfileParamsBodyData patch user profile params body data
swagger:model PatchUserProfileParamsBodyData
*/
type PatchUserProfileParamsBodyData struct {

	// attributes
	Attributes *PatchUserProfileParamsBodyDataAttributes `json:"attributes,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [users]
	Type *string `json:"type"`
}

// Validate validates this patch user profile params body data
func (o *PatchUserProfileParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (o *PatchUserProfileParamsBodyData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var patchUserProfileParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["users"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchUserProfileParamsBodyDataTypeTypePropEnum = append(patchUserProfileParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// PatchUserProfileParamsBodyDataTypeUsers captures enum value "users"
	PatchUserProfileParamsBodyDataTypeUsers string = "users"
)

// prop value enum
func (o *PatchUserProfileParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchUserProfileParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchUserProfileParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this patch user profile params body data based on the context it is used
func (o *PatchUserProfileParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserProfileParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserProfileParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserProfileParamsBodyData) UnmarshalBinary(b []byte) error {
	var res PatchUserProfileParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PatchUserProfileParamsBodyDataAttributes patch user profile params body data attributes
swagger:model PatchUserProfileParamsBodyDataAttributes
*/
type PatchUserProfileParamsBodyDataAttributes struct {

	// authentication factor id
	AuthenticationFactorID string `json:"authentication_factor_id,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// role
	// Enum: [administrator billing collaborator owner]
	Role string `json:"role,omitempty"`
}

// Validate validates this patch user profile params body data attributes
func (o *PatchUserProfileParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchUserProfileParamsBodyDataAttributesTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","billing","collaborator","owner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchUserProfileParamsBodyDataAttributesTypeRolePropEnum = append(patchUserProfileParamsBodyDataAttributesTypeRolePropEnum, v)
	}
}

const (

	// PatchUserProfileParamsBodyDataAttributesRoleAdministrator captures enum value "administrator"
	PatchUserProfileParamsBodyDataAttributesRoleAdministrator string = "administrator"

	// PatchUserProfileParamsBodyDataAttributesRoleBilling captures enum value "billing"
	PatchUserProfileParamsBodyDataAttributesRoleBilling string = "billing"

	// PatchUserProfileParamsBodyDataAttributesRoleCollaborator captures enum value "collaborator"
	PatchUserProfileParamsBodyDataAttributesRoleCollaborator string = "collaborator"

	// PatchUserProfileParamsBodyDataAttributesRoleOwner captures enum value "owner"
	PatchUserProfileParamsBodyDataAttributesRoleOwner string = "owner"
)

// prop value enum
func (o *PatchUserProfileParamsBodyDataAttributes) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchUserProfileParamsBodyDataAttributesTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PatchUserProfileParamsBodyDataAttributes) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("body"+"."+"data"+"."+"attributes"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch user profile params body data attributes based on context it is used
func (o *PatchUserProfileParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserProfileParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserProfileParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res PatchUserProfileParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
