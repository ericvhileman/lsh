// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEventsParams creates a new GetEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEventsParams() *GetEventsParams {
	return &GetEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsParamsWithTimeout creates a new GetEventsParams object
// with the ability to set a timeout on a request.
func NewGetEventsParamsWithTimeout(timeout time.Duration) *GetEventsParams {
	return &GetEventsParams{
		timeout: timeout,
	}
}

// NewGetEventsParamsWithContext creates a new GetEventsParams object
// with the ability to set a context for a request.
func NewGetEventsParamsWithContext(ctx context.Context) *GetEventsParams {
	return &GetEventsParams{
		Context: ctx,
	}
}

// NewGetEventsParamsWithHTTPClient creates a new GetEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEventsParamsWithHTTPClient(client *http.Client) *GetEventsParams {
	return &GetEventsParams{
		HTTPClient: client,
	}
}

/*
GetEventsParams contains all the parameters to send to the API endpoint

	for the get events operation.

	Typically these are written to a http.Request.
*/
type GetEventsParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	/* FilterAction.

	   The action performed in event to filter by
	*/
	FilterAction *string

	/* FilterAuthor.

	   The author ID or email to filter by
	*/
	FilterAuthor *string

	/* FilterCreatedAt.

	   The created at between date range date1, date2 (inclusive) to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	*/
	FilterCreatedAt []string

	/* FilterCreatedAtGte.

	   The created at greater than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	*/
	FilterCreatedAtGte *string

	/* FilterCreatedAtLte.

	   The created at less than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	*/
	FilterCreatedAtLte *string

	/* FilterProject.

	   The project ID to filter by
	*/
	FilterProject *string

	/* FilterTargetID.

	   The target id of the event to filter by
	*/
	FilterTargetID *string

	/* FilterTargetName.

	   The target type(s) of the event to filter by
	*/
	FilterTargetName []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsParams) WithDefaults() *GetEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := GetEventsParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get events params
func (o *GetEventsParams) WithTimeout(timeout time.Duration) *GetEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events params
func (o *GetEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events params
func (o *GetEventsParams) WithContext(ctx context.Context) *GetEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events params
func (o *GetEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) WithHTTPClient(client *http.Client) *GetEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get events params
func (o *GetEventsParams) WithAPIVersion(aPIVersion *string) *GetEventsParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get events params
func (o *GetEventsParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithFilterAction adds the filterAction to the get events params
func (o *GetEventsParams) WithFilterAction(filterAction *string) *GetEventsParams {
	o.SetFilterAction(filterAction)
	return o
}

// SetFilterAction adds the filterAction to the get events params
func (o *GetEventsParams) SetFilterAction(filterAction *string) {
	o.FilterAction = filterAction
}

// WithFilterAuthor adds the filterAuthor to the get events params
func (o *GetEventsParams) WithFilterAuthor(filterAuthor *string) *GetEventsParams {
	o.SetFilterAuthor(filterAuthor)
	return o
}

// SetFilterAuthor adds the filterAuthor to the get events params
func (o *GetEventsParams) SetFilterAuthor(filterAuthor *string) {
	o.FilterAuthor = filterAuthor
}

// WithFilterCreatedAt adds the filterCreatedAt to the get events params
func (o *GetEventsParams) WithFilterCreatedAt(filterCreatedAt []string) *GetEventsParams {
	o.SetFilterCreatedAt(filterCreatedAt)
	return o
}

// SetFilterCreatedAt adds the filterCreatedAt to the get events params
func (o *GetEventsParams) SetFilterCreatedAt(filterCreatedAt []string) {
	o.FilterCreatedAt = filterCreatedAt
}

// WithFilterCreatedAtGte adds the filterCreatedAtGte to the get events params
func (o *GetEventsParams) WithFilterCreatedAtGte(filterCreatedAtGte *string) *GetEventsParams {
	o.SetFilterCreatedAtGte(filterCreatedAtGte)
	return o
}

// SetFilterCreatedAtGte adds the filterCreatedAtGte to the get events params
func (o *GetEventsParams) SetFilterCreatedAtGte(filterCreatedAtGte *string) {
	o.FilterCreatedAtGte = filterCreatedAtGte
}

// WithFilterCreatedAtLte adds the filterCreatedAtLte to the get events params
func (o *GetEventsParams) WithFilterCreatedAtLte(filterCreatedAtLte *string) *GetEventsParams {
	o.SetFilterCreatedAtLte(filterCreatedAtLte)
	return o
}

// SetFilterCreatedAtLte adds the filterCreatedAtLte to the get events params
func (o *GetEventsParams) SetFilterCreatedAtLte(filterCreatedAtLte *string) {
	o.FilterCreatedAtLte = filterCreatedAtLte
}

// WithFilterProject adds the filterProject to the get events params
func (o *GetEventsParams) WithFilterProject(filterProject *string) *GetEventsParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get events params
func (o *GetEventsParams) SetFilterProject(filterProject *string) {
	o.FilterProject = filterProject
}

// WithFilterTargetID adds the filterTargetID to the get events params
func (o *GetEventsParams) WithFilterTargetID(filterTargetID *string) *GetEventsParams {
	o.SetFilterTargetID(filterTargetID)
	return o
}

// SetFilterTargetID adds the filterTargetId to the get events params
func (o *GetEventsParams) SetFilterTargetID(filterTargetID *string) {
	o.FilterTargetID = filterTargetID
}

// WithFilterTargetName adds the filterTargetName to the get events params
func (o *GetEventsParams) WithFilterTargetName(filterTargetName []string) *GetEventsParams {
	o.SetFilterTargetName(filterTargetName)
	return o
}

// SetFilterTargetName adds the filterTargetName to the get events params
func (o *GetEventsParams) SetFilterTargetName(filterTargetName []string) {
	o.FilterTargetName = filterTargetName
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	if o.FilterAction != nil {

		// query param filter[action]
		var qrFilterAction string

		if o.FilterAction != nil {
			qrFilterAction = *o.FilterAction
		}
		qFilterAction := qrFilterAction
		if qFilterAction != "" {

			if err := r.SetQueryParam("filter[action]", qFilterAction); err != nil {
				return err
			}
		}
	}

	if o.FilterAuthor != nil {

		// query param filter[author]
		var qrFilterAuthor string

		if o.FilterAuthor != nil {
			qrFilterAuthor = *o.FilterAuthor
		}
		qFilterAuthor := qrFilterAuthor
		if qFilterAuthor != "" {

			if err := r.SetQueryParam("filter[author]", qFilterAuthor); err != nil {
				return err
			}
		}
	}

	if o.FilterCreatedAt != nil {

		// binding items for filter[created_at]
		joinedFilterCreatedAt := o.bindParamFilterCreatedAt(reg)

		// query array param filter[created_at]
		if err := r.SetQueryParam("filter[created_at]", joinedFilterCreatedAt...); err != nil {
			return err
		}
	}

	if o.FilterCreatedAtGte != nil {

		// query param filter[created_at][gte]
		var qrFilterCreatedAtGte string

		if o.FilterCreatedAtGte != nil {
			qrFilterCreatedAtGte = *o.FilterCreatedAtGte
		}
		qFilterCreatedAtGte := qrFilterCreatedAtGte
		if qFilterCreatedAtGte != "" {

			if err := r.SetQueryParam("filter[created_at][gte]", qFilterCreatedAtGte); err != nil {
				return err
			}
		}
	}

	if o.FilterCreatedAtLte != nil {

		// query param filter[created_at][lte]
		var qrFilterCreatedAtLte string

		if o.FilterCreatedAtLte != nil {
			qrFilterCreatedAtLte = *o.FilterCreatedAtLte
		}
		qFilterCreatedAtLte := qrFilterCreatedAtLte
		if qFilterCreatedAtLte != "" {

			if err := r.SetQueryParam("filter[created_at][lte]", qFilterCreatedAtLte); err != nil {
				return err
			}
		}
	}

	if o.FilterProject != nil {

		// query param filter[project]
		var qrFilterProject string

		if o.FilterProject != nil {
			qrFilterProject = *o.FilterProject
		}
		qFilterProject := qrFilterProject
		if qFilterProject != "" {

			if err := r.SetQueryParam("filter[project]", qFilterProject); err != nil {
				return err
			}
		}
	}

	if o.FilterTargetID != nil {

		// query param filter[target_id]
		var qrFilterTargetID string

		if o.FilterTargetID != nil {
			qrFilterTargetID = *o.FilterTargetID
		}
		qFilterTargetID := qrFilterTargetID
		if qFilterTargetID != "" {

			if err := r.SetQueryParam("filter[target_id]", qFilterTargetID); err != nil {
				return err
			}
		}
	}

	if o.FilterTargetName != nil {

		// binding items for filter[target_name]
		joinedFilterTargetName := o.bindParamFilterTargetName(reg)

		// query array param filter[target_name]
		if err := r.SetQueryParam("filter[target_name]", joinedFilterTargetName...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetEvents binds the parameter filter[created_at]
func (o *GetEventsParams) bindParamFilterCreatedAt(formats strfmt.Registry) []string {
	filterCreatedAtIR := o.FilterCreatedAt

	var filterCreatedAtIC []string
	for _, filterCreatedAtIIR := range filterCreatedAtIR { // explode []string

		filterCreatedAtIIV := filterCreatedAtIIR // string as string
		filterCreatedAtIC = append(filterCreatedAtIC, filterCreatedAtIIV)
	}

	// items.CollectionFormat: "multi"
	filterCreatedAtIS := swag.JoinByFormat(filterCreatedAtIC, "multi")

	return filterCreatedAtIS
}

// bindParamGetEvents binds the parameter filter[target_name]
func (o *GetEventsParams) bindParamFilterTargetName(formats strfmt.Registry) []string {
	filterTargetNameIR := o.FilterTargetName

	var filterTargetNameIC []string
	for _, filterTargetNameIIR := range filterTargetNameIR { // explode []string

		filterTargetNameIIV := filterTargetNameIIR // string as string
		filterTargetNameIC = append(filterTargetNameIC, filterTargetNameIIV)
	}

	// items.CollectionFormat: "multi"
	filterTargetNameIS := swag.JoinByFormat(filterTargetNameIC, "multi")

	return filterTargetNameIS
}
