// Code generated by go-swagger; DO NOT EDIT.

package bandwidth_packages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// UpdatePlansBandwidthReader is a Reader for the UpdatePlansBandwidth structure.
type UpdatePlansBandwidthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePlansBandwidthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePlansBandwidthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdatePlansBandwidthForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plans/bandwidth] update-plans-bandwidth", response, response.Code())
	}
}

// NewUpdatePlansBandwidthOK creates a UpdatePlansBandwidthOK with default headers values
func NewUpdatePlansBandwidthOK() *UpdatePlansBandwidthOK {
	return &UpdatePlansBandwidthOK{}
}

/*
UpdatePlansBandwidthOK describes a response with status code 200, with default header values.

Success
*/
type UpdatePlansBandwidthOK struct {
	Payload *models.BandwidthPackages
}

// IsSuccess returns true when this update plans bandwidth o k response has a 2xx status code
func (o *UpdatePlansBandwidthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update plans bandwidth o k response has a 3xx status code
func (o *UpdatePlansBandwidthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plans bandwidth o k response has a 4xx status code
func (o *UpdatePlansBandwidthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plans bandwidth o k response has a 5xx status code
func (o *UpdatePlansBandwidthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update plans bandwidth o k response a status code equal to that given
func (o *UpdatePlansBandwidthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update plans bandwidth o k response
func (o *UpdatePlansBandwidthOK) Code() int {
	return 200
}

func (o *UpdatePlansBandwidthOK) Error() string {
	return fmt.Sprintf("[POST /plans/bandwidth][%d] updatePlansBandwidthOK  %+v", 200, o.Payload)
}

func (o *UpdatePlansBandwidthOK) String() string {
	return fmt.Sprintf("[POST /plans/bandwidth][%d] updatePlansBandwidthOK  %+v", 200, o.Payload)
}

func (o *UpdatePlansBandwidthOK) GetPayload() *models.BandwidthPackages {
	return o.Payload
}

func (o *UpdatePlansBandwidthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BandwidthPackages)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlansBandwidthForbidden creates a UpdatePlansBandwidthForbidden with default headers values
func NewUpdatePlansBandwidthForbidden() *UpdatePlansBandwidthForbidden {
	return &UpdatePlansBandwidthForbidden{}
}

/*
UpdatePlansBandwidthForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePlansBandwidthForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this update plans bandwidth forbidden response has a 2xx status code
func (o *UpdatePlansBandwidthForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plans bandwidth forbidden response has a 3xx status code
func (o *UpdatePlansBandwidthForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plans bandwidth forbidden response has a 4xx status code
func (o *UpdatePlansBandwidthForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update plans bandwidth forbidden response has a 5xx status code
func (o *UpdatePlansBandwidthForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update plans bandwidth forbidden response a status code equal to that given
func (o *UpdatePlansBandwidthForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update plans bandwidth forbidden response
func (o *UpdatePlansBandwidthForbidden) Code() int {
	return 403
}

func (o *UpdatePlansBandwidthForbidden) Error() string {
	return fmt.Sprintf("[POST /plans/bandwidth][%d] updatePlansBandwidthForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePlansBandwidthForbidden) String() string {
	return fmt.Sprintf("[POST /plans/bandwidth][%d] updatePlansBandwidthForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePlansBandwidthForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *UpdatePlansBandwidthForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdatePlansBandwidthBody update plans bandwidth body
swagger:model UpdatePlansBandwidthBody
*/
type UpdatePlansBandwidthBody struct {

	// data
	Data *UpdatePlansBandwidthParamsBodyData `json:"data,omitempty"`
}

// Validate validates this update plans bandwidth body
func (o *UpdatePlansBandwidthBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlansBandwidthBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update plans bandwidth body based on the context it is used
func (o *UpdatePlansBandwidthBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlansBandwidthBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlansBandwidthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlansBandwidthBody) UnmarshalBinary(b []byte) error {
	var res UpdatePlansBandwidthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlansBandwidthParamsBodyData update plans bandwidth params body data
swagger:model UpdatePlansBandwidthParamsBodyData
*/
type UpdatePlansBandwidthParamsBodyData struct {

	// attributes
	Attributes *UpdatePlansBandwidthParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Enum: [bandwidth_packages]
	Type string `json:"type,omitempty"`
}

// Validate validates this update plans bandwidth params body data
func (o *UpdatePlansBandwidthParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlansBandwidthParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var updatePlansBandwidthParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bandwidth_packages"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatePlansBandwidthParamsBodyDataTypeTypePropEnum = append(updatePlansBandwidthParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// UpdatePlansBandwidthParamsBodyDataTypeBandwidthPackages captures enum value "bandwidth_packages"
	UpdatePlansBandwidthParamsBodyDataTypeBandwidthPackages string = "bandwidth_packages"
)

// prop value enum
func (o *UpdatePlansBandwidthParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updatePlansBandwidthParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdatePlansBandwidthParamsBodyData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update plans bandwidth params body data based on the context it is used
func (o *UpdatePlansBandwidthParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePlansBandwidthParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlansBandwidthParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlansBandwidthParamsBodyData) UnmarshalBinary(b []byte) error {
	var res UpdatePlansBandwidthParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdatePlansBandwidthParamsBodyDataAttributes update plans bandwidth params body data attributes
swagger:model UpdatePlansBandwidthParamsBodyDataAttributes
*/
type UpdatePlansBandwidthParamsBodyDataAttributes struct {

	// The project (ID or Slug) to add bandwidth
	Project string `json:"project,omitempty"`

	// The total amount you want to have
	Quantity int64 `json:"quantity,omitempty"`

	// The region to add bandwidth
	RegionSlug string `json:"region_slug,omitempty"`
}

// Validate validates this update plans bandwidth params body data attributes
func (o *UpdatePlansBandwidthParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update plans bandwidth params body data attributes based on context it is used
func (o *UpdatePlansBandwidthParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePlansBandwidthParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePlansBandwidthParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res UpdatePlansBandwidthParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
