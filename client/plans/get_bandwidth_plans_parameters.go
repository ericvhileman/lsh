// Code generated by go-swagger; DO NOT EDIT.

package plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBandwidthPlansParams creates a new GetBandwidthPlansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBandwidthPlansParams() *GetBandwidthPlansParams {
	return &GetBandwidthPlansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBandwidthPlansParamsWithTimeout creates a new GetBandwidthPlansParams object
// with the ability to set a timeout on a request.
func NewGetBandwidthPlansParamsWithTimeout(timeout time.Duration) *GetBandwidthPlansParams {
	return &GetBandwidthPlansParams{
		timeout: timeout,
	}
}

// NewGetBandwidthPlansParamsWithContext creates a new GetBandwidthPlansParams object
// with the ability to set a context for a request.
func NewGetBandwidthPlansParamsWithContext(ctx context.Context) *GetBandwidthPlansParams {
	return &GetBandwidthPlansParams{
		Context: ctx,
	}
}

// NewGetBandwidthPlansParamsWithHTTPClient creates a new GetBandwidthPlansParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBandwidthPlansParamsWithHTTPClient(client *http.Client) *GetBandwidthPlansParams {
	return &GetBandwidthPlansParams{
		HTTPClient: client,
	}
}

/*
GetBandwidthPlansParams contains all the parameters to send to the API endpoint

	for the get bandwidth plans operation.

	Typically these are written to a http.Request.
*/
type GetBandwidthPlansParams struct {

	// APIVersion.
	//
	// Default: "2023-06-01"
	APIVersion *string

	/* FilterID.

	   The plan ID to filter by
	*/
	FilterID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bandwidth plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBandwidthPlansParams) WithDefaults() *GetBandwidthPlansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bandwidth plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBandwidthPlansParams) SetDefaults() {
	var (
		aPIVersionDefault = string("2023-06-01")
	)

	val := GetBandwidthPlansParams{
		APIVersion: &aPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get bandwidth plans params
func (o *GetBandwidthPlansParams) WithTimeout(timeout time.Duration) *GetBandwidthPlansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bandwidth plans params
func (o *GetBandwidthPlansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bandwidth plans params
func (o *GetBandwidthPlansParams) WithContext(ctx context.Context) *GetBandwidthPlansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bandwidth plans params
func (o *GetBandwidthPlansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bandwidth plans params
func (o *GetBandwidthPlansParams) WithHTTPClient(client *http.Client) *GetBandwidthPlansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bandwidth plans params
func (o *GetBandwidthPlansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the get bandwidth plans params
func (o *GetBandwidthPlansParams) WithAPIVersion(aPIVersion *string) *GetBandwidthPlansParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get bandwidth plans params
func (o *GetBandwidthPlansParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithFilterID adds the filterID to the get bandwidth plans params
func (o *GetBandwidthPlansParams) WithFilterID(filterID *string) *GetBandwidthPlansParams {
	o.SetFilterID(filterID)
	return o
}

// SetFilterID adds the filterId to the get bandwidth plans params
func (o *GetBandwidthPlansParams) SetFilterID(filterID *string) {
	o.FilterID = filterID
}

// WriteToRequest writes these params to a swagger request
func (o *GetBandwidthPlansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param API-Version
		if err := r.SetHeaderParam("API-Version", *o.APIVersion); err != nil {
			return err
		}
	}

	if o.FilterID != nil {

		// query param filter[id]
		var qrFilterID string

		if o.FilterID != nil {
			qrFilterID = *o.FilterID
		}
		qFilterID := qrFilterID
		if qFilterID != "" {

			if err := r.SetQueryParam("filter[id]", qFilterID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
