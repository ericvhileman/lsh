// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/lsh/models"
)

// PostTeamReader is a Reader for the PostTeam structure.
type PostTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostTeamCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 406:
		result := NewPostTeamNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /team] post-team", response, response.Code())
	}
}

// NewPostTeamCreated creates a PostTeamCreated with default headers values
func NewPostTeamCreated() *PostTeamCreated {
	return &PostTeamCreated{}
}

/*
PostTeamCreated describes a response with status code 201, with default header values.

Created
*/
type PostTeamCreated struct {
	Payload *PostTeamCreatedBody
}

// IsSuccess returns true when this post team created response has a 2xx status code
func (o *PostTeamCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post team created response has a 3xx status code
func (o *PostTeamCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post team created response has a 4xx status code
func (o *PostTeamCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post team created response has a 5xx status code
func (o *PostTeamCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post team created response a status code equal to that given
func (o *PostTeamCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post team created response
func (o *PostTeamCreated) Code() int {
	return 201
}

func (o *PostTeamCreated) Error() string {
	return fmt.Sprintf("[POST /team][%d] postTeamCreated  %+v", 201, o.Payload)
}

func (o *PostTeamCreated) String() string {
	return fmt.Sprintf("[POST /team][%d] postTeamCreated  %+v", 201, o.Payload)
}

func (o *PostTeamCreated) GetPayload() *PostTeamCreatedBody {
	return o.Payload
}

func (o *PostTeamCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTeamCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTeamNotAcceptable creates a PostTeamNotAcceptable with default headers values
func NewPostTeamNotAcceptable() *PostTeamNotAcceptable {
	return &PostTeamNotAcceptable{}
}

/*
PostTeamNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type PostTeamNotAcceptable struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this post team not acceptable response has a 2xx status code
func (o *PostTeamNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post team not acceptable response has a 3xx status code
func (o *PostTeamNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post team not acceptable response has a 4xx status code
func (o *PostTeamNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this post team not acceptable response has a 5xx status code
func (o *PostTeamNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this post team not acceptable response a status code equal to that given
func (o *PostTeamNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the post team not acceptable response
func (o *PostTeamNotAcceptable) Code() int {
	return 406
}

func (o *PostTeamNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /team][%d] postTeamNotAcceptable  %+v", 406, o.Payload)
}

func (o *PostTeamNotAcceptable) String() string {
	return fmt.Sprintf("[POST /team][%d] postTeamNotAcceptable  %+v", 406, o.Payload)
}

func (o *PostTeamNotAcceptable) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *PostTeamNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTeamUnprocessableEntity creates a PostTeamUnprocessableEntity with default headers values
func NewPostTeamUnprocessableEntity() *PostTeamUnprocessableEntity {
	return &PostTeamUnprocessableEntity{}
}

/*
PostTeamUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type PostTeamUnprocessableEntity struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this post team unprocessable entity response has a 2xx status code
func (o *PostTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post team unprocessable entity response has a 3xx status code
func (o *PostTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post team unprocessable entity response has a 4xx status code
func (o *PostTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post team unprocessable entity response has a 5xx status code
func (o *PostTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post team unprocessable entity response a status code equal to that given
func (o *PostTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post team unprocessable entity response
func (o *PostTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *PostTeamUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /team][%d] postTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostTeamUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /team][%d] postTeamUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PostTeamUnprocessableEntity) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *PostTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostTeamBody post team body
swagger:model PostTeamBody
*/
type PostTeamBody struct {

	// data
	// Required: true
	Data *PostTeamParamsBodyData `json:"data"`
}

// Validate validates this post team body
func (o *PostTeamBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post team body based on the context it is used
func (o *PostTeamBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTeamBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTeamBody) UnmarshalBinary(b []byte) error {
	var res PostTeamBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTeamCreatedBody post team created body
swagger:model PostTeamCreatedBody
*/
type PostTeamCreatedBody struct {

	// data
	Data *models.Team `json:"data,omitempty"`
}

// Validate validates this post team created body
func (o *PostTeamCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamCreatedBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTeamCreated" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTeamCreated" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post team created body based on the context it is used
func (o *PostTeamCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamCreatedBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTeamCreated" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTeamCreated" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTeamCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTeamCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostTeamCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTeamParamsBodyData post team params body data
swagger:model PostTeamParamsBodyData
*/
type PostTeamParamsBodyData struct {

	// attributes
	Attributes *PostTeamParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Required: true
	// Enum: [teams]
	Type *string `json:"type"`
}

// Validate validates this post team params body data
func (o *PostTeamParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var postTeamParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["teams"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTeamParamsBodyDataTypeTypePropEnum = append(postTeamParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// PostTeamParamsBodyDataTypeTeams captures enum value "teams"
	PostTeamParamsBodyDataTypeTeams string = "teams"
)

// prop value enum
func (o *PostTeamParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTeamParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostTeamParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post team params body data based on the context it is used
func (o *PostTeamParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTeamParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTeamParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTeamParamsBodyData) UnmarshalBinary(b []byte) error {
	var res PostTeamParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostTeamParamsBodyDataAttributes post team params body data attributes
swagger:model PostTeamParamsBodyDataAttributes
*/
type PostTeamParamsBodyDataAttributes struct {

	// address
	Address string `json:"address,omitempty"`

	// currency
	// Required: true
	// Enum: [USD BRL]
	Currency *string `json:"currency"`

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Supported only for first team creation
	ReferredCode string `json:"referred_code,omitempty"`
}

// Validate validates this post team params body data attributes
func (o *PostTeamParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postTeamParamsBodyDataAttributesTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USD","BRL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postTeamParamsBodyDataAttributesTypeCurrencyPropEnum = append(postTeamParamsBodyDataAttributesTypeCurrencyPropEnum, v)
	}
}

const (

	// PostTeamParamsBodyDataAttributesCurrencyUSD captures enum value "USD"
	PostTeamParamsBodyDataAttributesCurrencyUSD string = "USD"

	// PostTeamParamsBodyDataAttributesCurrencyBRL captures enum value "BRL"
	PostTeamParamsBodyDataAttributesCurrencyBRL string = "BRL"
)

// prop value enum
func (o *PostTeamParamsBodyDataAttributes) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postTeamParamsBodyDataAttributesTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostTeamParamsBodyDataAttributes) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"attributes"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	// value enum
	if err := o.validateCurrencyEnum("body"+"."+"data"+"."+"attributes"+"."+"currency", "body", *o.Currency); err != nil {
		return err
	}

	return nil
}

func (o *PostTeamParamsBodyDataAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"attributes"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post team params body data attributes based on context it is used
func (o *PostTeamParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTeamParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTeamParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res PostTeamParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
