// Code generated by go-swagger; DO NOT EDIT.

package ip_m_i_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ip m i credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ip m i credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIpmiSession(params *CreateIpmiSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIpmiSessionCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateIpmiSession generates IP m i credentials

	Generates IPMI credentials for a given server. Remote access creates a VPN connection to the internal network of your server so you can connect to its IPMI.

You will have to use a VPN client such as https://openvpn.net to connect. See `VPN Sessions` API to create a VPN connection.

Related guide: https://docs.latitude.sh/docs/ipmi
*/
func (a *Client) CreateIpmiSession(params *CreateIpmiSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIpmiSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIpmiSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-ipmi-session",
		Method:             "POST",
		PathPattern:        "/servers/{id}/remote_access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIpmiSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIpmiSessionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-ipmi-session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
