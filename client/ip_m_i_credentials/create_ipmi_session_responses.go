// Code generated by go-swagger; DO NOT EDIT.

package ip_m_i_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// CreateIpmiSessionReader is a Reader for the CreateIpmiSession structure.
type CreateIpmiSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIpmiSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateIpmiSessionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCreateIpmiSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateIpmiSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateIpmiSessionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{id}/remote_access] create-ipmi-session", response, response.Code())
	}
}

// NewCreateIpmiSessionCreated creates a CreateIpmiSessionCreated with default headers values
func NewCreateIpmiSessionCreated() *CreateIpmiSessionCreated {
	return &CreateIpmiSessionCreated{}
}

/*
CreateIpmiSessionCreated describes a response with status code 201, with default header values.

Created
*/
type CreateIpmiSessionCreated struct {
	Payload *models.IpmiSession
}

// IsSuccess returns true when this create ipmi session created response has a 2xx status code
func (o *CreateIpmiSessionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create ipmi session created response has a 3xx status code
func (o *CreateIpmiSessionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ipmi session created response has a 4xx status code
func (o *CreateIpmiSessionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create ipmi session created response has a 5xx status code
func (o *CreateIpmiSessionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create ipmi session created response a status code equal to that given
func (o *CreateIpmiSessionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create ipmi session created response
func (o *CreateIpmiSessionCreated) Code() int {
	return 201
}

func (o *CreateIpmiSessionCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionCreated  %+v", 201, o.Payload)
}

func (o *CreateIpmiSessionCreated) String() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionCreated  %+v", 201, o.Payload)
}

func (o *CreateIpmiSessionCreated) GetPayload() *models.IpmiSession {
	return o.Payload
}

func (o *CreateIpmiSessionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpmiSession)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIpmiSessionForbidden creates a CreateIpmiSessionForbidden with default headers values
func NewCreateIpmiSessionForbidden() *CreateIpmiSessionForbidden {
	return &CreateIpmiSessionForbidden{}
}

/*
CreateIpmiSessionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateIpmiSessionForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this create ipmi session forbidden response has a 2xx status code
func (o *CreateIpmiSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ipmi session forbidden response has a 3xx status code
func (o *CreateIpmiSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ipmi session forbidden response has a 4xx status code
func (o *CreateIpmiSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ipmi session forbidden response has a 5xx status code
func (o *CreateIpmiSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create ipmi session forbidden response a status code equal to that given
func (o *CreateIpmiSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create ipmi session forbidden response
func (o *CreateIpmiSessionForbidden) Code() int {
	return 403
}

func (o *CreateIpmiSessionForbidden) Error() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionForbidden  %+v", 403, o.Payload)
}

func (o *CreateIpmiSessionForbidden) String() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionForbidden  %+v", 403, o.Payload)
}

func (o *CreateIpmiSessionForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *CreateIpmiSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIpmiSessionNotFound creates a CreateIpmiSessionNotFound with default headers values
func NewCreateIpmiSessionNotFound() *CreateIpmiSessionNotFound {
	return &CreateIpmiSessionNotFound{}
}

/*
CreateIpmiSessionNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateIpmiSessionNotFound struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this create ipmi session not found response has a 2xx status code
func (o *CreateIpmiSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ipmi session not found response has a 3xx status code
func (o *CreateIpmiSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ipmi session not found response has a 4xx status code
func (o *CreateIpmiSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ipmi session not found response has a 5xx status code
func (o *CreateIpmiSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create ipmi session not found response a status code equal to that given
func (o *CreateIpmiSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create ipmi session not found response
func (o *CreateIpmiSessionNotFound) Code() int {
	return 404
}

func (o *CreateIpmiSessionNotFound) Error() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionNotFound  %+v", 404, o.Payload)
}

func (o *CreateIpmiSessionNotFound) String() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionNotFound  %+v", 404, o.Payload)
}

func (o *CreateIpmiSessionNotFound) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *CreateIpmiSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIpmiSessionUnprocessableEntity creates a CreateIpmiSessionUnprocessableEntity with default headers values
func NewCreateIpmiSessionUnprocessableEntity() *CreateIpmiSessionUnprocessableEntity {
	return &CreateIpmiSessionUnprocessableEntity{}
}

/*
CreateIpmiSessionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type CreateIpmiSessionUnprocessableEntity struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this create ipmi session unprocessable entity response has a 2xx status code
func (o *CreateIpmiSessionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create ipmi session unprocessable entity response has a 3xx status code
func (o *CreateIpmiSessionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create ipmi session unprocessable entity response has a 4xx status code
func (o *CreateIpmiSessionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create ipmi session unprocessable entity response has a 5xx status code
func (o *CreateIpmiSessionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create ipmi session unprocessable entity response a status code equal to that given
func (o *CreateIpmiSessionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create ipmi session unprocessable entity response
func (o *CreateIpmiSessionUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateIpmiSessionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateIpmiSessionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /servers/{id}/remote_access][%d] createIpmiSessionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateIpmiSessionUnprocessableEntity) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *CreateIpmiSessionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
