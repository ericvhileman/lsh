// Code generated by go-swagger; DO NOT EDIT.

package regions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// GetRegionReader is a Reader for the GetRegion structure.
type GetRegionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRegionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRegionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /locations/{id}] get-region", response, response.Code())
	}
}

// NewGetRegionOK creates a GetRegionOK with default headers values
func NewGetRegionOK() *GetRegionOK {
	return &GetRegionOK{}
}

/*
GetRegionOK describes a response with status code 200, with default header values.

Success
*/
type GetRegionOK struct {
	Payload *models.Region
}

// IsSuccess returns true when this get region o k response has a 2xx status code
func (o *GetRegionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get region o k response has a 3xx status code
func (o *GetRegionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get region o k response has a 4xx status code
func (o *GetRegionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get region o k response has a 5xx status code
func (o *GetRegionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get region o k response a status code equal to that given
func (o *GetRegionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get region o k response
func (o *GetRegionOK) Code() int {
	return 200
}

func (o *GetRegionOK) Error() string {
	return fmt.Sprintf("[GET /locations/{id}][%d] getRegionOK  %+v", 200, o.Payload)
}

func (o *GetRegionOK) String() string {
	return fmt.Sprintf("[GET /locations/{id}][%d] getRegionOK  %+v", 200, o.Payload)
}

func (o *GetRegionOK) GetPayload() *models.Region {
	return o.Payload
}

func (o *GetRegionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Region)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegionNotFound creates a GetRegionNotFound with default headers values
func NewGetRegionNotFound() *GetRegionNotFound {
	return &GetRegionNotFound{}
}

/*
GetRegionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetRegionNotFound struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this get region not found response has a 2xx status code
func (o *GetRegionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get region not found response has a 3xx status code
func (o *GetRegionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get region not found response has a 4xx status code
func (o *GetRegionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get region not found response has a 5xx status code
func (o *GetRegionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get region not found response a status code equal to that given
func (o *GetRegionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get region not found response
func (o *GetRegionNotFound) Code() int {
	return 404
}

func (o *GetRegionNotFound) Error() string {
	return fmt.Sprintf("[GET /locations/{id}][%d] getRegionNotFound  %+v", 404, o.Payload)
}

func (o *GetRegionNotFound) String() string {
	return fmt.Sprintf("[GET /locations/{id}][%d] getRegionNotFound  %+v", 404, o.Payload)
}

func (o *GetRegionNotFound) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *GetRegionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
