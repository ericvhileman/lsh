// Code generated by go-swagger; DO NOT EDIT.

package rescue_mode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/latitudesh/cli/models"
)

// ServerStartRescueModeReader is a Reader for the ServerStartRescueMode structure.
type ServerStartRescueModeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServerStartRescueModeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewServerStartRescueModeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewServerStartRescueModeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewServerStartRescueModeNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{server_id}/rescue_mode] server-start-rescue-mode", response, response.Code())
	}
}

// NewServerStartRescueModeCreated creates a ServerStartRescueModeCreated with default headers values
func NewServerStartRescueModeCreated() *ServerStartRescueModeCreated {
	return &ServerStartRescueModeCreated{}
}

/*
ServerStartRescueModeCreated describes a response with status code 201, with default header values.

Created
*/
type ServerStartRescueModeCreated struct {
	Payload *models.ServerRescue
}

// IsSuccess returns true when this server start rescue mode created response has a 2xx status code
func (o *ServerStartRescueModeCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this server start rescue mode created response has a 3xx status code
func (o *ServerStartRescueModeCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this server start rescue mode created response has a 4xx status code
func (o *ServerStartRescueModeCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this server start rescue mode created response has a 5xx status code
func (o *ServerStartRescueModeCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this server start rescue mode created response a status code equal to that given
func (o *ServerStartRescueModeCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the server start rescue mode created response
func (o *ServerStartRescueModeCreated) Code() int {
	return 201
}

func (o *ServerStartRescueModeCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeCreated  %+v", 201, o.Payload)
}

func (o *ServerStartRescueModeCreated) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeCreated  %+v", 201, o.Payload)
}

func (o *ServerStartRescueModeCreated) GetPayload() *models.ServerRescue {
	return o.Payload
}

func (o *ServerStartRescueModeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerRescue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServerStartRescueModeForbidden creates a ServerStartRescueModeForbidden with default headers values
func NewServerStartRescueModeForbidden() *ServerStartRescueModeForbidden {
	return &ServerStartRescueModeForbidden{}
}

/*
ServerStartRescueModeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ServerStartRescueModeForbidden struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this server start rescue mode forbidden response has a 2xx status code
func (o *ServerStartRescueModeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this server start rescue mode forbidden response has a 3xx status code
func (o *ServerStartRescueModeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this server start rescue mode forbidden response has a 4xx status code
func (o *ServerStartRescueModeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this server start rescue mode forbidden response has a 5xx status code
func (o *ServerStartRescueModeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this server start rescue mode forbidden response a status code equal to that given
func (o *ServerStartRescueModeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the server start rescue mode forbidden response
func (o *ServerStartRescueModeForbidden) Code() int {
	return 403
}

func (o *ServerStartRescueModeForbidden) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeForbidden  %+v", 403, o.Payload)
}

func (o *ServerStartRescueModeForbidden) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeForbidden  %+v", 403, o.Payload)
}

func (o *ServerStartRescueModeForbidden) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *ServerStartRescueModeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServerStartRescueModeNotAcceptable creates a ServerStartRescueModeNotAcceptable with default headers values
func NewServerStartRescueModeNotAcceptable() *ServerStartRescueModeNotAcceptable {
	return &ServerStartRescueModeNotAcceptable{}
}

/*
ServerStartRescueModeNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type ServerStartRescueModeNotAcceptable struct {
	Payload *models.ErrorObject
}

// IsSuccess returns true when this server start rescue mode not acceptable response has a 2xx status code
func (o *ServerStartRescueModeNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this server start rescue mode not acceptable response has a 3xx status code
func (o *ServerStartRescueModeNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this server start rescue mode not acceptable response has a 4xx status code
func (o *ServerStartRescueModeNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this server start rescue mode not acceptable response has a 5xx status code
func (o *ServerStartRescueModeNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this server start rescue mode not acceptable response a status code equal to that given
func (o *ServerStartRescueModeNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the server start rescue mode not acceptable response
func (o *ServerStartRescueModeNotAcceptable) Code() int {
	return 406
}

func (o *ServerStartRescueModeNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeNotAcceptable  %+v", 406, o.Payload)
}

func (o *ServerStartRescueModeNotAcceptable) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/rescue_mode][%d] serverStartRescueModeNotAcceptable  %+v", 406, o.Payload)
}

func (o *ServerStartRescueModeNotAcceptable) GetPayload() *models.ErrorObject {
	return o.Payload
}

func (o *ServerStartRescueModeNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
