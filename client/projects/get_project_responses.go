package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/viper"

	apierrors "github.com/latitudesh/lsh/internal/api/errors"
	"github.com/latitudesh/lsh/internal/output"
	"github.com/latitudesh/lsh/internal/output/table"
	"github.com/latitudesh/lsh/models"
)

// GetProjectReader is a Reader for the GetProject structure.
type GetProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := apierrors.NewUnauthorized()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := apierrors.NewNotFound()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /projects/{id_or_slug}] get-project", response, response.Code())
	}
}

// NewGetProjectOK creates a GetProjectOK with default headers values
func NewGetProjectOK() *GetProjectOK {
	return &GetProjectOK{}
}

/*
GetProjectOK describes a response with status code 200, with default header values.

Success
*/
type GetProjectOK struct {
	Payload *GetProjectOKBody
}

// IsSuccess returns true when this get project o k response has a 2xx status code
func (o *GetProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project o k response has a 3xx status code
func (o *GetProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project o k response has a 4xx status code
func (o *GetProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project o k response has a 5xx status code
func (o *GetProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project o k response a status code equal to that given
func (o *GetProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project o k response
func (o *GetProjectOK) Code() int {
	return 200
}

func (o *GetProjectOK) Error() string {
	return fmt.Sprintf("[GET /projects/{id_or_slug}][%d] getProjectOK  %+v", 200, o.Payload)
}

func (o *GetProjectOK) String() string {
	return fmt.Sprintf("[GET /projects/{id_or_slug}][%d] getProjectOK  %+v", 200, o.Payload)
}

func (o *GetProjectOK) GetPayload() *GetProjectOKBody {
	return o.Payload
}

type GetProjectTableRow struct {
	ID             string `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
	Slug           string `json:"slug,omitempty"`
	Description    string `json:"description,omitempty"`
	BillingMethod  string `json:"billing_method,omitempty"`
	Cost           string `json:"cost,omitempty"`
	Environment    string `json:"environment,omitempty"`
	ProvisiongType string `json:"provisioning_type,omitempty"`
	Team           string `json:"team,omitempty"`
	IPs            string `json:"ips,omitempty"`
	Prefixes       string `json:"prefixes,omitempty"`
	Servers        string `json:"servers,omitempty"`
	Vlans          string `json:"vlans,omitempty"`
}

func (o *GetProjectOK) Render() {
	formatAsJSON := viper.GetBool("json")

	if formatAsJSON {
		o.RenderJSON()
		return
	}

	formatOutputFlag := viper.GetString("output")

	switch formatOutputFlag {
	case "json":
		o.RenderJSON()
	case "table":
		o.RenderTable()
	default:
		fmt.Println("Unsupported output format")
	}
}

func (o *GetProjectOK) RenderJSON() {
	if !swag.IsZero(o) && !swag.IsZero(o.Payload) {
		JSONString, err := json.Marshal(o.Payload)
		if err != nil {
			fmt.Println("Could not decode the result as JSON.")
		}

		output.RenderJSON(JSONString)
	}
}

func (o *GetProjectOK) RenderTable() {
	resource := o.Payload.Data

	var rows []GetProjectTableRow

	attributes := *resource.Attributes

	row := GetProjectTableRow{
		ID:            table.RenderString(resource.ID),
		Name:          table.RenderString(attributes.Name),
		Slug:          table.RenderString(attributes.Slug),
		Description:   table.RenderString(attributes.Description),
		BillingMethod: table.RenderString(attributes.BillingMethod),
		Cost:          table.RenderString(attributes.Cost),
		Environment:   table.RenderString(attributes.Environment),
		Team:          table.RenderString(attributes.Team.Name),
		IPs:           table.RenderFloat(attributes.Stats.IPAddresses),
		Prefixes:      table.RenderFloat(attributes.Stats.Prefixes),
		Servers:       table.RenderFloat(attributes.Stats.Servers),
		Vlans:         table.RenderFloat(attributes.Stats.Vlans),
	}

	rows = append(rows, row)

	var interfaceRows []interface{}

	for _, row := range rows {
		interfaceRows = append(interfaceRows, row)
	}

	table.Render(interfaceRows)
}

func (o *GetProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetProjectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetProjectOKBody get project o k body
swagger:model GetProjectOKBody
*/
type GetProjectOKBody struct {

	// data
	Data *models.Project `json:"data,omitempty"`
}

// Validate validates this get project o k body
func (o *GetProjectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProjectOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProjectOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getProjectOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get project o k body based on the context it is used
func (o *GetProjectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProjectOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getProjectOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getProjectOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProjectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProjectOKBody) UnmarshalBinary(b []byte) error {
	var res GetProjectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
