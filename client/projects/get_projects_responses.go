package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/viper"

	apierrors "github.com/latitudesh/lsh/internal/api/errors"
	"github.com/latitudesh/lsh/internal/output"
	"github.com/latitudesh/lsh/internal/output/table"
	"github.com/latitudesh/lsh/models"
)

// GetProjectsReader is a Reader for the GetProjects structure.
type GetProjectsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := apierrors.NewUnauthorized()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /projects] get-projects", response, response.Code())
	}
}

// NewGetProjectsOK creates a GetProjectsOK with default headers values
func NewGetProjectsOK() *GetProjectsOK {
	return &GetProjectsOK{}
}

/*
GetProjectsOK describes a response with status code 200, with default header values.

Success
*/
type GetProjectsOK struct {
	Payload *models.Projects
}

// IsSuccess returns true when this get projects o k response has a 2xx status code
func (o *GetProjectsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get projects o k response has a 3xx status code
func (o *GetProjectsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get projects o k response has a 4xx status code
func (o *GetProjectsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get projects o k response has a 5xx status code
func (o *GetProjectsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get projects o k response a status code equal to that given
func (o *GetProjectsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get projects o k response
func (o *GetProjectsOK) Code() int {
	return 200
}

func (o *GetProjectsOK) Error() string {
	return fmt.Sprintf("[GET /projects][%d] getProjectsOK  %+v", 200, o.Payload)
}

func (o *GetProjectsOK) String() string {
	return fmt.Sprintf("[GET /projects][%d] getProjectsOK  %+v", 200, o.Payload)
}

func (o *GetProjectsOK) GetPayload() *models.Projects {
	return o.Payload
}

type ProjectTableRow struct {
	ID             string `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
	Slug           string `json:"slug,omitempty"`
	Description    string `json:"description,omitempty"`
	BillingMethod  string `json:"billing_method,omitempty"`
	Cost           string `json:"cost,omitempty"`
	Environment    string `json:"environment,omitempty"`
	ProvisiongType string `json:"provisioning_type,omitempty"`
	Team           string `json:"team,omitempty"`
	IPs            string `json:"ips,omitempty"`
	Prefixes       string `json:"prefixes,omitempty"`
	Servers        string `json:"servers,omitempty"`
	Vlans          string `json:"vlans,omitempty"`
}

func (o *GetProjectsOK) Render() {
	formatAsJSON := viper.GetBool("json")

	if formatAsJSON {
		o.RenderJSON()
		return
	}

	formatOutputFlag := viper.GetString("output")

	switch formatOutputFlag {
	case "json":
		o.RenderJSON()
	case "table":
		o.RenderTable()
	default:
		fmt.Println("Unsupported output format")
	}
}

func (o *GetProjectsOK) RenderJSON() {
	if !swag.IsZero(o) && !swag.IsZero(o.Payload) {
		JSONString, err := json.Marshal(o.Payload)
		if err != nil {
			fmt.Println("Could not decode the result as JSON.")
		}

		output.RenderJSON(JSONString)
	}
}

func (o *GetProjectsOK) RenderTable() {
	data := o.Payload.Data

	var rows []ProjectTableRow

	for _, resource := range data {
		attributes := resource.Attributes

		row := ProjectTableRow{
			ID:            table.RenderString(resource.ID),
			Name:          table.RenderString(attributes.Name),
			Slug:          table.RenderString(attributes.Slug),
			Description:   table.RenderString(attributes.Description),
			BillingMethod: table.RenderString(attributes.BillingMethod),
			Cost:          table.RenderString(attributes.Cost),
			Environment:   table.RenderString(attributes.Environment),
			Team:          table.RenderString(attributes.Team.Name),
			IPs:           table.RenderFloat(attributes.Stats.IPAddresses),
			Prefixes:      table.RenderFloat(attributes.Stats.Prefixes),
			Servers:       table.RenderFloat(attributes.Stats.Servers),
			Vlans:         table.RenderFloat(attributes.Stats.Vlans),
		}

		rows = append(rows, row)
	}

	headers := table.ExtractHeaders(rows[0])

	var values [][]string

	for _, row := range rows {
		var tr []string

		for _, key := range headers {
			value, err := table.GetFieldValue(row, key)
			if err != nil {
				fmt.Printf("Error accessing field %s: %v\n", key, err)
				continue
			}

			tr = append(tr, fmt.Sprintf("%v", value))
		}

		values = append(values, tr)
	}

	table.Render(table.Table{Headers: headers, Rows: values})
}

func (o *GetProjectsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Projects)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
