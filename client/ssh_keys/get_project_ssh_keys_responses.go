package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/viper"

	apierrors "github.com/latitudesh/lsh/internal/api/errors"
	"github.com/latitudesh/lsh/internal/output"
	"github.com/latitudesh/lsh/internal/output/table"
	"github.com/latitudesh/lsh/models"
)

// GetProjectSSHKeysReader is a Reader for the GetProjectSSHKeys structure.
type GetProjectSSHKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectSSHKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectSSHKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := apierrors.NewUnauthorized()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := apierrors.NewNotFound()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /projects/{project_id_or_slug}/ssh_keys] get-project-ssh-keys", response, response.Code())
	}
}

// NewGetProjectSSHKeysOK creates a GetProjectSSHKeysOK with default headers values
func NewGetProjectSSHKeysOK() *GetProjectSSHKeysOK {
	return &GetProjectSSHKeysOK{}
}

/*
GetProjectSSHKeysOK describes a response with status code 200, with default header values.

Success
*/
type GetProjectSSHKeysOK struct {
	Payload *models.SSHKey
}

// IsSuccess returns true when this get project Ssh keys o k response has a 2xx status code
func (o *GetProjectSSHKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project Ssh keys o k response has a 3xx status code
func (o *GetProjectSSHKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project Ssh keys o k response has a 4xx status code
func (o *GetProjectSSHKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project Ssh keys o k response has a 5xx status code
func (o *GetProjectSSHKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project Ssh keys o k response a status code equal to that given
func (o *GetProjectSSHKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project Ssh keys o k response
func (o *GetProjectSSHKeysOK) Code() int {
	return 200
}

func (o *GetProjectSSHKeysOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_id_or_slug}/ssh_keys][%d] getProjectSshKeysOK  %+v", 200, o.Payload)
}

func (o *GetProjectSSHKeysOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_id_or_slug}/ssh_keys][%d] getProjectSshKeysOK  %+v", 200, o.Payload)
}

func (o *GetProjectSSHKeysOK) GetPayload() *models.SSHKey {
	return o.Payload
}

type SSHKeyTableRow struct {
	ID          string `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	User        string `json:"user,omitempty"`
	PublicKey   string `json:"public_key,omitempty"`
	Fingerprint string `json:"fingerprint,omitempty"`
}

func (o *GetProjectSSHKeysOK) Render() {
	formatAsJSON := viper.GetBool("json")

	if formatAsJSON {
		o.RenderJSON()
		return
	}

	formatOutputFlag := viper.GetString("output")

	switch formatOutputFlag {
	case "json":
		o.RenderJSON()
	case "table":
		o.RenderTable()
	default:
		fmt.Println("Unsupported output format")
	}
}

func (o *GetProjectSSHKeysOK) RenderJSON() {
	if !swag.IsZero(o) && !swag.IsZero(o.Payload) {
		JSONString, err := json.Marshal(o.Payload)
		if err != nil {
			fmt.Println("Could not decode the result as JSON.")
		}

		output.RenderJSON(JSONString)
	}
}

func (o *GetProjectSSHKeysOK) RenderTable() {
	data := o.Payload.Data

	var rows []SSHKeyTableRow

	for _, resource := range data {
		attributes := resource.Attributes

		row := SSHKeyTableRow{
			ID:          table.RenderString(resource.ID),
			Name:        table.RenderString(attributes.Name),
			User:        table.RenderString(fmt.Sprintf("%v %v", attributes.User.FirstName, attributes.User.LastName)),
			PublicKey:   table.RenderString(attributes.PublicKey),
			Fingerprint: table.RenderString(attributes.Fingerprint),
		}

		rows = append(rows, row)
	}

	headers := table.ExtractHeaders(rows[0])

	var values [][]string

	for _, row := range rows {
		var tr []string

		for _, key := range headers {
			value, err := table.GetFieldValue(row, key)
			if err != nil {
				fmt.Printf("Error accessing field %s: %v\n", key, err)
				continue
			}

			tr = append(tr, fmt.Sprintf("%v", value))
		}

		values = append(values, tr)
	}

	table.Render(table.Table{Headers: headers, Rows: values})
}

func (o *GetProjectSSHKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SSHKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
