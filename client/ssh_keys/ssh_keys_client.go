// Code generated by go-swagger; DO NOT EDIT.

package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

var sshKeysType = "ssh_keys"

// New creates a new ssh keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ssh keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectSSHKey(params *DeleteProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSSHKeyOK, error)

	GetProjectSSHKey(params *GetProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSSHKeyOK, error)

	GetProjectSSHKeys(params *GetProjectSSHKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSSHKeysOK, error)

	PostProjectSSHKey(params *PostProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectSSHKeyCreated, error)

	PutProjectSSHKey(params *PutProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectSSHKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectSSHKey deletes a project SSH key

Allow you remove SSH Keys in a project. Remove a SSH Key from the project won't revoke the SSH Keys access for previously deploy and reinstall actions.
*/
func (a *Client) DeleteProjectSSHKey(params *DeleteProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectSSHKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-project-ssh-key",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_id_or_slug}/ssh_keys/{ssh_key_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectSSHKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-project-ssh-key: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectSSHKey retrieves a project SSH key

List all SSH Keys in the project. These keys can be used to access servers after deploy and reinstall actions.
*/
func (a *Client) GetProjectSSHKey(params *GetProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSSHKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-project-ssh-key",
		Method:             "GET",
		PathPattern:        "/projects/{project_id_or_slug}/ssh_keys/{ssh_key_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSSHKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-project-ssh-key: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectSSHKeys lists all project SSH keys

List all SSH Keys in the project. These keys can be used to access servers after deploy and reinstall actions.
*/
func (a *Client) GetProjectSSHKeys(params *GetProjectSSHKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectSSHKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSSHKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-project-ssh-keys",
		Method:             "GET",
		PathPattern:        "/projects/{project_id_or_slug}/ssh_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectSSHKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSSHKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-project-ssh-keys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectSSHKey creates a project SSH key

Allow you create SSH Keys in a project. These keys can be used to access servers after deploy and reinstall actions.
*/
func (a *Client) PostProjectSSHKey(params *PostProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectSSHKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectSSHKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-project-ssh-key",
		Method:             "POST",
		PathPattern:        "/projects/{project_id_or_slug}/ssh_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectSSHKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-project-ssh-key: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectSSHKey updates a project SSH key

Allow you update SSH Key in a project. These keys can be used to access servers after deploy and reinstall actions.
*/
func (a *Client) PutProjectSSHKey(params *PutProjectSSHKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectSSHKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-project-ssh-key",
		Method:             "PATCH",
		PathPattern:        "/projects/{project_id_or_slug}/ssh_keys/{ssh_key_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutProjectSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectSSHKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-project-ssh-key: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
