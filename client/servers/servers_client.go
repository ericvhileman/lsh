// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

var serverType = "servers"

// New creates a new servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServer(params *CreateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerCreated, error)

	DestroyServer(params *DestroyServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyServerNoContent, error)

	GetServer(params *GetServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerOK, error)

	GetServers(params *GetServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServersOK, error)

	ServerScheduleDeletion(params *ServerScheduleDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerScheduleDeletionCreated, error)

	ServerUnscheduleDeletion(params *ServerUnscheduleDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUnscheduleDeletionNoContent, error)

	UpdateServer(params *UpdateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateServer deploys a new server
*/
func (a *Client) CreateServer(params *CreateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create-server",
		Method:             "POST",
		PathPattern:        "/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create-server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DestroyServer removes a server
*/
func (a *Client) DestroyServer(params *DestroyServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DestroyServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "destroy-server",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DestroyServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DestroyServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for destroy-server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServer retrieves a server

Returns a server that belongs to the team.
*/
func (a *Client) GetServer(params *GetServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-server",
		Method:             "GET",
		PathPattern:        "/servers/{server_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServers lists all servers

Returns a list of all servers belonging to the team.
*/
func (a *Client) GetServers(params *GetServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-servers",
		Method:             "GET",
		PathPattern:        "/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-servers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServerScheduleDeletion schedules the server deletion

Schedules the server to be removed at the end of the billing cycle.
*/
func (a *Client) ServerScheduleDeletion(params *ServerScheduleDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerScheduleDeletionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerScheduleDeletionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server-schedule-deletion",
		Method:             "POST",
		PathPattern:        "/servers/{server_id}/schedule_deletion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerScheduleDeletionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerScheduleDeletionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server-schedule-deletion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ServerUnscheduleDeletion unschedules the server deletion

Unschedules the server removal at the end of the billing cycle.
*/
func (a *Client) ServerUnscheduleDeletion(params *ServerUnscheduleDeletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServerUnscheduleDeletionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServerUnscheduleDeletionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "server-unschedule-deletion",
		Method:             "DELETE",
		PathPattern:        "/servers/{server_id}/schedule_deletion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServerUnscheduleDeletionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServerUnscheduleDeletionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for server-unschedule-deletion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServer updates a server
*/
func (a *Client) UpdateServer(params *UpdateServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update-server",
		Method:             "PATCH",
		PathPattern:        "/servers/{server_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update-server: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
