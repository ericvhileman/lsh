package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/viper"

	apierrors "github.com/latitudesh/lsh/internal/api/errors"
	"github.com/latitudesh/lsh/internal/output"
	"github.com/latitudesh/lsh/internal/output/table"
	"github.com/latitudesh/lsh/models"
)

// ServerScheduleDeletionReader is a Reader for the ServerScheduleDeletion structure.
type ServerScheduleDeletionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServerScheduleDeletionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewServerScheduleDeletionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := apierrors.NewUnauthorized()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := apierrors.NewForbidden()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := apierrors.NewNotFound()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := apierrors.NewNotAcceptable()
		if err := result.ReadResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{server_id}/schedule_deletion] server-schedule-deletion", response, response.Code())
	}
}

// NewServerScheduleDeletionCreated creates a ServerScheduleDeletionCreated with default headers values
func NewServerScheduleDeletionCreated() *ServerScheduleDeletionCreated {
	return &ServerScheduleDeletionCreated{}
}

/*
ServerScheduleDeletionCreated describes a response with status code 201, with default header values.

Created
*/
type ServerScheduleDeletionCreated struct {
	Payload *models.ServerScheduleDeletion
}

// IsSuccess returns true when this server schedule deletion created response has a 2xx status code
func (o *ServerScheduleDeletionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this server schedule deletion created response has a 3xx status code
func (o *ServerScheduleDeletionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this server schedule deletion created response has a 4xx status code
func (o *ServerScheduleDeletionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this server schedule deletion created response has a 5xx status code
func (o *ServerScheduleDeletionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this server schedule deletion created response a status code equal to that given
func (o *ServerScheduleDeletionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the server schedule deletion created response
func (o *ServerScheduleDeletionCreated) Code() int {
	return 201
}

func (o *ServerScheduleDeletionCreated) Error() string {
	return fmt.Sprintf("[POST /servers/{server_id}/schedule_deletion][%d] serverScheduleDeletionCreated  %+v", 201, o.Payload)
}

func (o *ServerScheduleDeletionCreated) String() string {
	return fmt.Sprintf("[POST /servers/{server_id}/schedule_deletion][%d] serverScheduleDeletionCreated  %+v", 201, o.Payload)
}

func (o *ServerScheduleDeletionCreated) GetPayload() *models.ServerScheduleDeletion {
	return o.Payload
}

type CreateServerScheduleDeletionTableRow struct {
	ID          string `json:"id,omitempty"`
	ServerID    string `json:"server_id,omitempty"`
	ScheduledAt string `json:"scheduled_at,omitempty"`
}

func (o *ServerScheduleDeletionCreated) RenderOutput() {
	formatAsJSON := viper.GetBool("json")

	if formatAsJSON {
		o.RenderJSON()
		return
	}

	formatOutputFlag := viper.GetString("output")

	switch formatOutputFlag {
	case "json":
		o.RenderJSON()
	case "table":
		o.RenderTable()
	default:
		fmt.Println("Unsupported output format")
	}
}

func (o *ServerScheduleDeletionCreated) RenderJSON() {
	if !swag.IsZero(o) && !swag.IsZero(o.Payload) {
		JSONString, err := json.Marshal(o.Payload)
		if err != nil {
			fmt.Println("Could not decode the result as JSON.")
		}

		output.RenderJSON(JSONString)
	}
}

func (o *ServerScheduleDeletionCreated) RenderTable() {
	resource := o.Payload.Data

	var rows []CreateServerScheduleDeletionTableRow

	attributes := resource.Attributes

	row := CreateServerScheduleDeletionTableRow{
		ID:          table.RenderString(resource.ID),
		ServerID:    table.RenderString(attributes.ServerID),
		ScheduledAt: table.RenderString(attributes.ScheduledDeletionAt),
	}
	rows = append(rows, row)

	headers := table.ExtractHeaders(rows[0])

	var values [][]string

	for _, row := range rows {
		var tr []string

		for _, key := range headers {
			value, err := table.GetFieldValue(row, key)
			if err != nil {
				fmt.Printf("Error accessing field %s: %v\n", key, err)
				continue
			}

			tr = append(tr, fmt.Sprintf("%v", value))
		}

		values = append(values, tr)
	}

	table.Render(table.Table{Headers: headers, Rows: values})
}

func (o *ServerScheduleDeletionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerScheduleDeletion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
