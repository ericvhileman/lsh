// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// PutProjectUserDataReader is a Reader for the PutProjectUserData structure.
type PutProjectUserDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProjectUserDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutProjectUserDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutProjectUserDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutProjectUserDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPutProjectUserDataUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}] put-project-user-data", response, response.Code())
	}
}

// NewPutProjectUserDataOK creates a PutProjectUserDataOK with default headers values
func NewPutProjectUserDataOK() *PutProjectUserDataOK {
	return &PutProjectUserDataOK{}
}

/*
PutProjectUserDataOK describes a response with status code 200, with default header values.

Success
*/
type PutProjectUserDataOK struct {
	Payload *models.UserData
}

// IsSuccess returns true when this put project user data o k response has a 2xx status code
func (o *PutProjectUserDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put project user data o k response has a 3xx status code
func (o *PutProjectUserDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project user data o k response has a 4xx status code
func (o *PutProjectUserDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put project user data o k response has a 5xx status code
func (o *PutProjectUserDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put project user data o k response a status code equal to that given
func (o *PutProjectUserDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put project user data o k response
func (o *PutProjectUserDataOK) Code() int {
	return 200
}

func (o *PutProjectUserDataOK) Error() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataOK  %+v", 200, o.Payload)
}

func (o *PutProjectUserDataOK) String() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataOK  %+v", 200, o.Payload)
}

func (o *PutProjectUserDataOK) GetPayload() *models.UserData {
	return o.Payload
}

func (o *PutProjectUserDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProjectUserDataBadRequest creates a PutProjectUserDataBadRequest with default headers values
func NewPutProjectUserDataBadRequest() *PutProjectUserDataBadRequest {
	return &PutProjectUserDataBadRequest{}
}

/*
PutProjectUserDataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutProjectUserDataBadRequest struct {
}

// IsSuccess returns true when this put project user data bad request response has a 2xx status code
func (o *PutProjectUserDataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put project user data bad request response has a 3xx status code
func (o *PutProjectUserDataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project user data bad request response has a 4xx status code
func (o *PutProjectUserDataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put project user data bad request response has a 5xx status code
func (o *PutProjectUserDataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put project user data bad request response a status code equal to that given
func (o *PutProjectUserDataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the put project user data bad request response
func (o *PutProjectUserDataBadRequest) Code() int {
	return 400
}

func (o *PutProjectUserDataBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataBadRequest ", 400)
}

func (o *PutProjectUserDataBadRequest) String() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataBadRequest ", 400)
}

func (o *PutProjectUserDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutProjectUserDataNotFound creates a PutProjectUserDataNotFound with default headers values
func NewPutProjectUserDataNotFound() *PutProjectUserDataNotFound {
	return &PutProjectUserDataNotFound{}
}

/*
PutProjectUserDataNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutProjectUserDataNotFound struct {
}

// IsSuccess returns true when this put project user data not found response has a 2xx status code
func (o *PutProjectUserDataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put project user data not found response has a 3xx status code
func (o *PutProjectUserDataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project user data not found response has a 4xx status code
func (o *PutProjectUserDataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put project user data not found response has a 5xx status code
func (o *PutProjectUserDataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put project user data not found response a status code equal to that given
func (o *PutProjectUserDataNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put project user data not found response
func (o *PutProjectUserDataNotFound) Code() int {
	return 404
}

func (o *PutProjectUserDataNotFound) Error() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataNotFound ", 404)
}

func (o *PutProjectUserDataNotFound) String() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataNotFound ", 404)
}

func (o *PutProjectUserDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutProjectUserDataUnprocessableEntity creates a PutProjectUserDataUnprocessableEntity with default headers values
func NewPutProjectUserDataUnprocessableEntity() *PutProjectUserDataUnprocessableEntity {
	return &PutProjectUserDataUnprocessableEntity{}
}

/*
PutProjectUserDataUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type PutProjectUserDataUnprocessableEntity struct {
}

// IsSuccess returns true when this put project user data unprocessable entity response has a 2xx status code
func (o *PutProjectUserDataUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put project user data unprocessable entity response has a 3xx status code
func (o *PutProjectUserDataUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project user data unprocessable entity response has a 4xx status code
func (o *PutProjectUserDataUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this put project user data unprocessable entity response has a 5xx status code
func (o *PutProjectUserDataUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this put project user data unprocessable entity response a status code equal to that given
func (o *PutProjectUserDataUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the put project user data unprocessable entity response
func (o *PutProjectUserDataUnprocessableEntity) Code() int {
	return 422
}

func (o *PutProjectUserDataUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataUnprocessableEntity ", 422)
}

func (o *PutProjectUserDataUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /projects/{project_id_or_slug}/user_data/{user_data_id}][%d] putProjectUserDataUnprocessableEntity ", 422)
}

func (o *PutProjectUserDataUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutProjectUserDataBody put project user data body
swagger:model PutProjectUserDataBody
*/
type PutProjectUserDataBody struct {

	// data
	// Required: true
	Data *PutProjectUserDataParamsBodyData `json:"data"`
}

// Validate validates this put project user data body
func (o *PutProjectUserDataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProjectUserDataBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put project user data body based on the context it is used
func (o *PutProjectUserDataBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProjectUserDataBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutProjectUserDataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProjectUserDataBody) UnmarshalBinary(b []byte) error {
	var res PutProjectUserDataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutProjectUserDataParamsBodyData put project user data params body data
swagger:model PutProjectUserDataParamsBodyData
*/
type PutProjectUserDataParamsBodyData struct {

	// attributes
	Attributes *PutProjectUserDataParamsBodyDataAttributes `json:"attributes,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [user_data]
	Type *string `json:"type"`
}

// Validate validates this put project user data params body data
func (o *PutProjectUserDataParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProjectUserDataParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (o *PutProjectUserDataParamsBodyData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var putProjectUserDataParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putProjectUserDataParamsBodyDataTypeTypePropEnum = append(putProjectUserDataParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// PutProjectUserDataParamsBodyDataTypeUserData captures enum value "user_data"
	PutProjectUserDataParamsBodyDataTypeUserData string = "user_data"
)

// prop value enum
func (o *PutProjectUserDataParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putProjectUserDataParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PutProjectUserDataParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this put project user data params body data based on the context it is used
func (o *PutProjectUserDataParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProjectUserDataParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutProjectUserDataParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProjectUserDataParamsBodyData) UnmarshalBinary(b []byte) error {
	var res PutProjectUserDataParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PutProjectUserDataParamsBodyDataAttributes put project user data params body data attributes
swagger:model PutProjectUserDataParamsBodyDataAttributes
*/
type PutProjectUserDataParamsBodyDataAttributes struct {

	// encoded content of the User Data
	Content string `json:"content,omitempty"`

	// description dummy user data
	Description string `json:"description,omitempty"`
}

// Validate validates this put project user data params body data attributes
func (o *PutProjectUserDataParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put project user data params body data attributes based on context it is used
func (o *PutProjectUserDataParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutProjectUserDataParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProjectUserDataParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res PutProjectUserDataParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
