// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectUserData(params *DeleteProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectUserDataNoContent, error)

	GetProjectUserData(params *GetProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectUserDataOK, error)

	GetProjectUsersData(params *GetProjectUsersDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectUsersDataOK, error)

	PostProjectUserData(params *PostProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectUserDataCreated, error)

	PutProjectUserData(params *PutProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectUserDataOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectUserData deletes a project user data

Allow you remove User Data in a project.
*/
func (a *Client) DeleteProjectUserData(params *DeleteProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectUserDataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectUserDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete-project-user-data",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_id_or_slug}/user_data/{user_data_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectUserDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectUserDataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-project-user-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectUserData retrieves a project user data

Get User Data in the project. These scripts can be used to configure servers with user data.
*/
func (a *Client) GetProjectUserData(params *GetProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectUserDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectUserDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-project-user-data",
		Method:             "GET",
		PathPattern:        "/projects/{project_id_or_slug}/user_data/{user_data_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectUserDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectUserDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-project-user-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectUsersData lists all project user data

List all Users Data in the project. These scripts can be used to configure servers with user data.
*/
func (a *Client) GetProjectUsersData(params *GetProjectUsersDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectUsersDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectUsersDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get-project-users-data",
		Method:             "GET",
		PathPattern:        "/projects/{project_id_or_slug}/user_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectUsersDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectUsersDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-project-users-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectUserData creates a project user data

Allows you to create User Data in a project, which can be used to perform custom setup on your servers after deploy and reinstall.
*/
func (a *Client) PostProjectUserData(params *PostProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectUserDataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectUserDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "post-project-user-data",
		Method:             "POST",
		PathPattern:        "/projects/{project_id_or_slug}/user_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostProjectUserDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectUserDataCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-project-user-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectUserData updates a project user data

Allow you update User Data in a project.
*/
func (a *Client) PutProjectUserData(params *PutProjectUserDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectUserDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectUserDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "put-project-user-data",
		Method:             "PATCH",
		PathPattern:        "/projects/{project_id_or_slug}/user_data/{user_data_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutProjectUserDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectUserDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-project-user-data: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
