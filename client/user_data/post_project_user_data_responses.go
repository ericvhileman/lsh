// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/latitudesh/cli/models"
)

// PostProjectUserDataReader is a Reader for the PostProjectUserData structure.
type PostProjectUserDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostProjectUserDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostProjectUserDataCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostProjectUserDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostProjectUserDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostProjectUserDataUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /projects/{project_id_or_slug}/user_data] post-project-user-data", response, response.Code())
	}
}

// NewPostProjectUserDataCreated creates a PostProjectUserDataCreated with default headers values
func NewPostProjectUserDataCreated() *PostProjectUserDataCreated {
	return &PostProjectUserDataCreated{}
}

/*
PostProjectUserDataCreated describes a response with status code 201, with default header values.

Created
*/
type PostProjectUserDataCreated struct {
	Payload *models.UserData
}

// IsSuccess returns true when this post project user data created response has a 2xx status code
func (o *PostProjectUserDataCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post project user data created response has a 3xx status code
func (o *PostProjectUserDataCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post project user data created response has a 4xx status code
func (o *PostProjectUserDataCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post project user data created response has a 5xx status code
func (o *PostProjectUserDataCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post project user data created response a status code equal to that given
func (o *PostProjectUserDataCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post project user data created response
func (o *PostProjectUserDataCreated) Code() int {
	return 201
}

func (o *PostProjectUserDataCreated) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataCreated  %+v", 201, o.Payload)
}

func (o *PostProjectUserDataCreated) String() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataCreated  %+v", 201, o.Payload)
}

func (o *PostProjectUserDataCreated) GetPayload() *models.UserData {
	return o.Payload
}

func (o *PostProjectUserDataCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostProjectUserDataBadRequest creates a PostProjectUserDataBadRequest with default headers values
func NewPostProjectUserDataBadRequest() *PostProjectUserDataBadRequest {
	return &PostProjectUserDataBadRequest{}
}

/*
PostProjectUserDataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostProjectUserDataBadRequest struct {
}

// IsSuccess returns true when this post project user data bad request response has a 2xx status code
func (o *PostProjectUserDataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post project user data bad request response has a 3xx status code
func (o *PostProjectUserDataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post project user data bad request response has a 4xx status code
func (o *PostProjectUserDataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post project user data bad request response has a 5xx status code
func (o *PostProjectUserDataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post project user data bad request response a status code equal to that given
func (o *PostProjectUserDataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post project user data bad request response
func (o *PostProjectUserDataBadRequest) Code() int {
	return 400
}

func (o *PostProjectUserDataBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataBadRequest ", 400)
}

func (o *PostProjectUserDataBadRequest) String() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataBadRequest ", 400)
}

func (o *PostProjectUserDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProjectUserDataNotFound creates a PostProjectUserDataNotFound with default headers values
func NewPostProjectUserDataNotFound() *PostProjectUserDataNotFound {
	return &PostProjectUserDataNotFound{}
}

/*
PostProjectUserDataNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostProjectUserDataNotFound struct {
}

// IsSuccess returns true when this post project user data not found response has a 2xx status code
func (o *PostProjectUserDataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post project user data not found response has a 3xx status code
func (o *PostProjectUserDataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post project user data not found response has a 4xx status code
func (o *PostProjectUserDataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post project user data not found response has a 5xx status code
func (o *PostProjectUserDataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post project user data not found response a status code equal to that given
func (o *PostProjectUserDataNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post project user data not found response
func (o *PostProjectUserDataNotFound) Code() int {
	return 404
}

func (o *PostProjectUserDataNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataNotFound ", 404)
}

func (o *PostProjectUserDataNotFound) String() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataNotFound ", 404)
}

func (o *PostProjectUserDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostProjectUserDataUnprocessableEntity creates a PostProjectUserDataUnprocessableEntity with default headers values
func NewPostProjectUserDataUnprocessableEntity() *PostProjectUserDataUnprocessableEntity {
	return &PostProjectUserDataUnprocessableEntity{}
}

/*
PostProjectUserDataUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type PostProjectUserDataUnprocessableEntity struct {
}

// IsSuccess returns true when this post project user data unprocessable entity response has a 2xx status code
func (o *PostProjectUserDataUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post project user data unprocessable entity response has a 3xx status code
func (o *PostProjectUserDataUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post project user data unprocessable entity response has a 4xx status code
func (o *PostProjectUserDataUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this post project user data unprocessable entity response has a 5xx status code
func (o *PostProjectUserDataUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this post project user data unprocessable entity response a status code equal to that given
func (o *PostProjectUserDataUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the post project user data unprocessable entity response
func (o *PostProjectUserDataUnprocessableEntity) Code() int {
	return 422
}

func (o *PostProjectUserDataUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataUnprocessableEntity ", 422)
}

func (o *PostProjectUserDataUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /projects/{project_id_or_slug}/user_data][%d] postProjectUserDataUnprocessableEntity ", 422)
}

func (o *PostProjectUserDataUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PostProjectUserDataBody post project user data body
swagger:model PostProjectUserDataBody
*/
type PostProjectUserDataBody struct {

	// data
	// Required: true
	Data *PostProjectUserDataParamsBodyData `json:"data"`
}

// Validate validates this post project user data body
func (o *PostProjectUserDataBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectUserDataBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post project user data body based on the context it is used
func (o *PostProjectUserDataBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectUserDataBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProjectUserDataBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProjectUserDataBody) UnmarshalBinary(b []byte) error {
	var res PostProjectUserDataBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostProjectUserDataParamsBodyData post project user data params body data
swagger:model PostProjectUserDataParamsBodyData
*/
type PostProjectUserDataParamsBodyData struct {

	// attributes
	Attributes *PostProjectUserDataParamsBodyDataAttributes `json:"attributes,omitempty"`

	// type
	// Required: true
	// Enum: [user_data]
	Type *string `json:"type"`
}

// Validate validates this post project user data params body data
func (o *PostProjectUserDataParamsBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectUserDataParamsBodyData) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	if o.Attributes != nil {
		if err := o.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var postProjectUserDataParamsBodyDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postProjectUserDataParamsBodyDataTypeTypePropEnum = append(postProjectUserDataParamsBodyDataTypeTypePropEnum, v)
	}
}

const (

	// PostProjectUserDataParamsBodyDataTypeUserData captures enum value "user_data"
	PostProjectUserDataParamsBodyDataTypeUserData string = "user_data"
)

// prop value enum
func (o *PostProjectUserDataParamsBodyData) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postProjectUserDataParamsBodyDataTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostProjectUserDataParamsBodyData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("body"+"."+"data"+"."+"type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post project user data params body data based on the context it is used
func (o *PostProjectUserDataParamsBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectUserDataParamsBodyData) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if o.Attributes != nil {

		if swag.IsZero(o.Attributes) { // not required
			return nil
		}

		if err := o.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data" + "." + "attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProjectUserDataParamsBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProjectUserDataParamsBodyData) UnmarshalBinary(b []byte) error {
	var res PostProjectUserDataParamsBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PostProjectUserDataParamsBodyDataAttributes post project user data params body data attributes
swagger:model PostProjectUserDataParamsBodyDataAttributes
*/
type PostProjectUserDataParamsBodyDataAttributes struct {

	// base64 encoded content of the User Data
	// Required: true
	Content *string `json:"content"`

	// description of the User Data
	// Required: true
	Description *string `json:"description"`
}

// Validate validates this post project user data params body data attributes
func (o *PostProjectUserDataParamsBodyDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectUserDataParamsBodyDataAttributes) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"attributes"+"."+"content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *PostProjectUserDataParamsBodyDataAttributes) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data"+"."+"attributes"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post project user data params body data attributes based on context it is used
func (o *PostProjectUserDataParamsBodyDataAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostProjectUserDataParamsBodyDataAttributes) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProjectUserDataParamsBodyDataAttributes) UnmarshalBinary(b []byte) error {
	var res PostProjectUserDataParamsBodyDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
